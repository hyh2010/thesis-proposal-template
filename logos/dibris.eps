%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Dibris con dicitura RGB.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: PowerMac G5
%%CreationDate: 12/1/14
%%BoundingBox: 0 0 591 555
%%HiResBoundingBox: 0 0 590.8535 554.1025
%%CropBox: 0 0 590.8535 554.1025
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.1 x420 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 120 8%%BeginData: 13178 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45B5FCFCFCB0FCFCFCB5FCFCC3FFFFFFCAFCFCB5B5CAFD14FFA8FD08%FFA87DA87D7D7DA87DA8FD2CFFA8FD18FFFD04FCB5FFFD05CAFD05FFC3C4%BCB5FCFCBCFD10FFA87D7D7DFD07FFA8FFA8FFFD047DA8FD29FFA8A87D7D%7DFD17FFB5FCFCFCBCFD0FFFCAB0FCFCCAFD0DFFA8FD057DFD0AFFA87D7D%7DA8FD29FFA87DA87D7D7DFD16FFFD04FCBCFD11FFB5FCFCBCFD0CFFFD06%7DA8FD09FFFD057DFD29FFFD067DA8FD15FFB5FCB0FCBCFD12FFB5FCFCBC%FD0BFFA87D7D7DA87DFD0AFFA87D7D7DA8FD29FF7D7DA87D7D7DFD16FFFD%04FCBCFD13FFFCFCFCBCFD0AFFFD067DFD0AFFFD057DFD29FFFD067DA8FD%15FFB5FCFCFCBCFD13FFC3FCFCFCCAFD0AFF7D7D7DA8A8FD0AFF7D7DA87D%A8FD2AFF7D7D7DA8A8FD16FFFD04FCB5FD13FFCAFD04FCFD0BFFA8FD0DFF%FD057DFD2BFFA8FFA8FD17FFB5FCFCFCBCFD14FFB5FCFCFCBCFD18FFA87D%A87DA8FD45FFFD04FCBCFD14FFC3FD04FCCAFD17FFFD047DA8FD45FFB5FC%FCFCBCFD14FFCAFD04FCBCFD16FFA8A87D7D7DA8FD45FFFD04FCBCFD15FF%FD05FCFD17FFFD057DFD45FFB5FCB0FCBCFD15FFB5FD04FCC3FD16FFA87D%7D7DA8FD45FFFD04FCBCFD15FFB5FD04FCBCFD16FFFD057DFD45FFB5FCFC%FCBCFD15FFBCFD05FCFD16FF7D7DA87DA8FD45FFFD04FCB5FD15FFBCFD05%FCCAFD15FFFD057DFD45FFB5FCFCFCBCFD15FFBCFCB0FCFCFCCAFFFFA8FF%A8FFA8FFA8FFA8FD0AFFA87DA87DA8FD04FFA8A87DA87DFD09FFA8FFA8FF%A8FFA8FD05FFA8A87DA8A8FFFFFFA8FFA8FFA8FFA8FD0DFFA8A87DA8A8FD%04FFA8FFFD04FCBCFD15FFBCFD05FCC3FFFFA87DA8FD067DFD0AFFFD047D%A8FFFFA87D7DA8A8A87D527DA8FD05FFA8A8FD077DA8FFFFFD067DA8FFFF%A8FD077DA8FD08FFA87D7DA8A8A87D7D7DA8A8A87DFFB5FCFCFCBCFD15FF%C3FD05FCC3FD06FFFD057DFD09FFA8A87D7D7DA8FFA87DFD06FFA87D7D7D%FD09FFFD047DA8FFA87DA8A87D7D7DA8FD06FFFD057DFD07FFA87D7DFD07%FF7D7D7DA8FFFD04FCBCFD15FFBCFD05FCBCFD06FFA87D7D7DA8FD0AFFFD%047DA8A87DFD08FFA87D7D7DFD07FFA8FD047DA8A87DA8FFA8FD047DFD06%FFFD057DFD07FF7D7DFD09FF7D7D7DFFB5FCB0FCBCFD15FFC3FCFCFCB0FC%C3FD06FF7D7D7DA87DFD0AFFA87D7D7DA87DFD0AFFA87D7D7DFD07FF7DA8%7D7DA8A8A8FFFFFF7D7D7DA8FD06FF7DA87D7D7DFD07FF7DFD0BFF7DA8FF%FD04FCBCFD15FFBCFD05FCC3FD06FFA87D7D7DA8FD0AFFFD057DA8FD0AFF%FD047DA8FD05FFA8FD047DA87DFD04FFA87D7DA8FD06FFA87D7D7DA8FD06%FF7D7DFD0BFF7D7DFFB5FCFCFCBCFD15FFBCFD05FCCAFD06FFFD057DFD0A%FF7D7DA87D7DA8FD0AFFA87DA87DA8FD06FF7D7D7DA87DA8FD06FFA8FD07%FFFD057DFD06FFA87DFD0BFFA8A8FFFD04FCB5FD15FFBCFD05FCC3FD06FF%FD057DFD0AFFFD057DFD0BFFFD057DA8FD04FFA8FD057DA8FD0EFFA87D7D%7DA8FD06FF7D7D7DA8A8FD09FFA8FFB5FCFCFCBCFD15FFBCFCB0FCFCFCFD%07FF7DA87D7D7DFD0AFFA87DA87DA8FD0BFFA87DA87D7DA8FD05FF7D7D7D%A87DFD0FFF7D7D7DA87DFD06FFA87D7D7DFD04A8FD08FFFD04FCBCFD15FF%B5FD04FCB5FD07FFA87D7D7DA8FD0AFFFD047DA8FD0BFFA8FD047DA8FD04%FFA8FD047DA8FD0FFFA87D7D7DA8FD06FFFD097DA8A8A8FD04FFB5FCFCFC%BCFD15FFB5FD04FCBCFD07FFFD057DFD09FFA8A87D7D7DA8FD0BFFA8FD05%7DFD05FF7DA87D7DA8FD0FFFFD057DFD07FF7DA87D7D7DA8FD057DA8A8FF%FFFD04FCBCFD15FFFD05FCC3FD07FFA87D7D7DA8FD0AFFFD047DA8FD0BFF%FD067DFD04FFA8FD047DA8FD0FFFFD057DFD07FFA852FD0B7DA8FFB5FCB0%FCBCFD14FFCAB5FCFCFCB5FD08FF7D7D7DA87DFD0AFFA87D7D7DFD0CFFA8%7D7D7DA87DFD05FF7DA87D7DA8FD0FFF7DA87D7D7DFD08FFA87D7D7DA87D%7D7DA87D7D7DA8FFFD04FCBCFD14FFC3FD04FCBCFD08FFA87D7D7DA8FD0A%FFFD047DA8FD0BFFFD057DA8FD04FFA8FD047DA8FD0FFFA87D7D7DA8FD09%FFA8FD0B7DA8B5FCFCFCBCFD14FFBCFD04FCCAFD08FFFD057DFD0AFF7D7D%A87DA8FD0BFFA87DA87D7D7DFD05FFFD047DA8FD0FFFFD057DFD0DFFA8A8%FD077DFD04FCB5FD14FFB5FCFCFCBCFD09FFFD057DFD0AFFFD057DFD0BFF%FD057DA8FD04FFA8FD047DA8FD0FFFA87D7D7DA8FD06FF7DFD09FFA8A8FD%047DB5FCFCFCBCFD14FFFCFCFCB5FD0AFF7DA87D7D7DFD0AFFA87DA87DA8%FD0BFFA87DA87D7DA8FD05FFFD047DA8FD0FFF7D7D7DA87DFD06FF7DA8FD%0BFFA87D7DFD04FCBCFD13FFBCFCFCFCC3FD0AFFA87D7D7DA8FD0AFFFD05%7DFD0BFFFD057DFD05FFA8FD047DFD10FFA87D7D7DA8FD06FF7DA8FD0CFF%7D7DB5FCFCFCBCFD12FFCAB0FCFCBCFD0BFFFD057DFD09FFA8A8FD047DA8%FD0AFFA87D7D7DA8FD06FF7DA87D7DA8FD0FFFFD057DFD06FF7D7DFD0CFF%A87DFD04FCBCFD12FFB6FCFCBCFD0CFFA87D7D7DA8FD0AFFFD067DFD0AFF%FD047DA8FD05FFA8FD047DA8FD0FFFFD057DFD06FF7D7D7DFD0BFF7DA8B5%FCB0FCBCFD11FFBCFCFCBCFD0DFF7D7D7DA87DFD0AFFA87D7D7DA87DA8FD%08FFA8A87D7DA8FD07FF7DA87D7DA8FD0FFF7DA87D7D7DFD06FFA87DA8FD%0AFFA87DA8FD04FCBCFD0FFFC3B5FCB5C3FD0EFFA87D7D7DA8FD0AFFFD04%7DA8FF7DA8FD07FFA87D7DA8FD07FFA8FD047DA8FD0FFFA87D7D7DA8FD06%FFFD047DA8FD07FFA87D7DFFB5FCFCFCBCCACAC3CAC3CACAFD04FFCAC3BC%FCFCFCC3FD0CFFA8FFA8FFFD057DFFA8FFA8FFFFFFA8FFA8FD047DA8FFA8%7DA8A8FD04FFA87D7DA8FD05FFA8FFA8A8FD047DA8FFA8FD09FFA8FFA8FF%FD057DFFA8FFA8FFA87DA8FF7D7DA8FD05FFA87D7DFFFFFD0BFCCAFFFFFF%CAFCFCB0BCC3FD0EFFA8FD0B7DA8FFFFFD087DA8FFFFA87D7D7DA87D7D7D%A8A8FD05FFA8FD0C7DA8FD07FFA8FD0B7DA8FFFF7DFFFFFFFD057DA87D7D%A8FD42FFFD05A8FD33FFA8A8A8FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFD1A%FFFD05A8FFFFFFA8A8A8FD15FFA8FFA8A8A8FD1BFFA8FD3FFFA8FD057DA8%FFFF7DA8FD14FF7DA8FFFF7DA8FD1AFFA87DA8FD3EFFA87DA8FFA87D7DFF%FFA8A8FFA8FFA8A8A8FFFFFFA8A8A8FFFFFFA8FFA8A8A87D7DFD04A8FFA8%FFA8A8A8FFA8A8A8FFFFFFA8A8A8FFFFFFA8FFA8A8A8FFA8A87DA8A8FFFF%A8A8A8FD38FFA87DA8FFFFA87DA8FF7DA8FFA8FD047DA8FFFD057DFFFFFD%087DFF7D7DFFA87DA87D7D7DA87D7DA8FFA8FD047DFFFFFD057DA8A87DA8%7DA8FFA87D7D7DA8FD37FF7D7DA8FFFFA87DA8A87D7DFF7D7DA8A852FD04%A8FFA87D7DFF7D7D7DFFA87D7DFFFF7D7DFFA87D7DFF7D7DA8A87DA8A87D%7DFFA87D7DFF7D7DA8A852A8FFA852FFFFA852A8FFA852A8FD36FFA87DA8%FFFFA87D7DFF7DA8FFA87DFFA87D7DFFA8A87DA87DA8FFA87DFFFFFF7DA8%FFFF7DA8FFA87DFFFFA87DFFFF7DA8FF7DA87DA87DA8FFA87DFFFFA8A8FF%A87DFFFF7D7DA8FFA87DA8FD36FF7D7DA8FFFFA87DA8A87D7DFF7D7DFFFF%7DA8A87D7DFFA87D7DFF7D7DFFFFA87D7DFFFF7D7DFFA87DA8FF7D7DFFFF%7DA8A87D7DFFA8FFA8FF7D7DFFFF7DA8FFA87DFFFFA87DFFFFA852A8FD36%FFA87DA8A8A87DA8FFFF7DA8FFA87DFFA87DA8FF7DA8FFA87DA8FFA87DFF%FFFF7D7DA8FF7D7DFFA87DFFFFA87DFFA87DA8FF7DA8A8FF7DA8FF7D7DFF%FF7D7DFFA87DA8FFA87D7DFF7D7DA8FD36FFFD057DA8A8FFA87D7DFFFD05%7DFFA8FD067DFF7D7DFFFFFFA87D7DA8A87DFF7D7DA8FF7DA8FFFF7DA8FF%A8FD047DA8FF7D7DFFFF7DA8FFFF7D7D7DFF7D7D527D7DFD43FFA87DFFA8%FD05FFA8FD0BFFA8FD11FFA8FD0DFFA8FFFFFFA8FD46FF7D7DFD7FFFA8FD%FCFFFD7AFFA8FFFFFFA8FD07FFA8FD09FFA8FFA8FD23FFA8FD43FFA87DFF%A87DA8FD04FFA87DA8FD08FFA8A87D7DA8FD1DFFA8A8FFFF7D7DA8FD40FF%A8FF7D7DA8FFA8FD05FFA87D7DFD05FFA8FFFFA852A8A8FFFFFFA8FD15FF%A8FFFFFFA87D7DFFFFA8A8FD0BFFA8FD34FF7D7D7DA87DFFA8A8A8FD05FF%7DA8FFA8A8A87DA8FFA87DA87DA8FFA87D7D7DFFFFFF7DA87DA87DA8A87D%7DFF7D7DA8FFFFA87DA87DA8FFA87D7D7DFFA8A8FFFFA87D7DA8FFFFA8A8%7D7D7DFD32FF7D7D7DA87D7DA8A87DA8FD04FFA87DA8FF7D7D7DA87DA8A8%7D7DA8A8A852A8A87D7DFFA87D7D7DA87D7DA87D7D7DA87D7DA8A87DA8A8%A87DA8A87D7DA8A8A87DFFA87D7DA852A8A87D7DFFA87D7DFD31FF7D7DFF%FFA87DFF7D7DA8FD04FFA87DA8FF7D7DFFFF7D7DFFA87DA8FF7D7DA8FFA8%7DA8FF7DA8FFFF7D7DFFFF7DA8FFA87DFFFFFFA8A87D7DA8FF7DA8FFFF7D%A8FFA87DFFFFA8A8FFFFA8A8A87DA8FD31FF7D7DFFFF7D7DA8A852A8FD04%FFA87D7DFF7D7DFFFF7D7DFFA87DFFFF7D7DFFFFA852A8A87DA8FFA87D7D%FFA87DA8FF7D7DA8A87D7DA8A852FFA87D7DFFFF7D7DFF7D7DA8FFFFFFA8%A87DA87D7D7DFD31FFA87DFFFFA87DFFA87DA8FD04FFA87DA8FFA87DFFFF%7D7DFFA87DA8FF7D7DA8FFA87DA8FF7DA8FFFF7DA8FFFF7DA8FFA87DFF7D%7DA8FFA87DA8FF7DA8FFFF7DA8FFA87DFFFFA87DA87DA8FFFF7DA8FFFFA8%FD2EFFA8FD057DA8A852A8FD04FFA87D7DFF7D7DFFFF7D7DFFA87DFFFFFF%FD057DFFA87DA8FFFF7D7DFFA87D7DFF7D7DA8A852A87D7D52A8FF7D7D7D%A87D7DFFA87D7DA87DA8A87D7DA87D7D7DFF7D7DA8FD2EFFFD05A8FFA8A8%A8FD05FFA8FFFFA8A8FFFFA8A8FFA8A8FD04FFA8A8A8FFFFFF7DFFFFFFA8%A8FFFF7DFFFFFF7DFFFFA87DFFA8A8A8FFA8A87DFFA8A8FFFFA8A87DA8FF%FFA8A8A8FFA8A8FFA87DFD7EFFA8A8FD7EFFA8A8FDFCFFFDB2FFA8A8A87D%A8A8FFFFA87DFD09FF7DFD31FF7DFD3AFFFD077DFF7DA8A8FD07FFA87DA8%FD0CFFA87DFD0CFFA87DFD13FFA8A8A8FD39FFA87DFFFFFF7DA8FFFFA8FF%FFFFA8A8A8FFFFFFA8FFFFA8A8FFA8FD04FFA8A8A87DA8FFFFA8A8A8FD04%FFA87DA87DFD04A8FFA8FD05FFA8A8A8FFFFA8A8FFA8FFA8FFFFFFA8A8A8%FD34FF7D7DA8FFA87D7DFF7D7DA8FFFD057DFFA87DA8FF527D7D7D52A8FF%7D7DA87D7DA8FFFD057DFFA87D7DA87D7DA8FF527D7D7D52FFFFA852A87D%7DA8FF7D7D52A87D7DA8FFFD057DFD33FFA87DA87D7D7DFFFFA87DFFA87D%A8FFA87DA8FF7DFFFFA87DFFA87DA8FF7DA8FFA87DFFA87DA8FFA87DA8FF%7DA8FFFF7DFFFF7D7DFFA87DA8FF7DA8FFFF7DA8FFA87DA8FFA87DFFFFA8%A8FFA87DA8FD32FF7D7DA8FFA87D7DFF7D7DA8A87DFFFFA87DA8A87DA8FF%7DA8FFA852A8FFA87DA87D7DA8A87D7D7DA87DA8FFA87DA87D7DA8FF7DA8%FFA852A8A87D7DA87D7D7DFF7D7DFFFFA87DA8FFA87D7DA87DA8FD32FFA8%7DFFFFFF7D7DA8A87DFF7D7DA8FFA87DA8FF7DFFFF7D7DFFA87DA8FF7DA8%A8A8FFFFA87DA8FFA8FFA8FF7DA8A8A8FFFFA87DA8FFA87DA8A87DA8FFFF%A8FFA87D7DFFFFA87DFFA87DA8FFA87DA8FD32FF7D7D7DA87D7D7DFF7D7D%A8A852A8A87D7DFFA87DA8FF7DA8FFA852A8A87D7DA87DA8A8FF527DA8A8%52A8A87D7DFD04A8FF7DA8FFA852A8A87D7DA87D7DA8FF7DA8FFFF7D7DA8%A852A8A87D52A8FF7D7DFD2FFFA87D7D7DA87DFFFFA87DFFFFA87D7D7DFF%FFA87DFFFF7DA8FFA87DA8FF7DA87DA87DA8FFFF7D7D7DA8FFFF7DA87DA8%7DA8A87DA8FFA87DA8FFA87D7DA8A8FFFFA87DFFFFA87DFFFFA87DFD04A8%FF7DA8FD3DFFA8FD0DFF7D7DA8FFA8A87DFFFFFFA8FFFFFF7D7DA8FFFF7D%7DFD0BFFA8FD12FFA87DFD4CFF7DA87D7D7DA8FD08FF7D7D7DA87DA8FD1E%FF7DFD4EFFA8FFA8FD0BFFA8A8A8FD1FFFA8FDFCFFFD36FFA8FFA8FD0BFF%A8FD13FFA8FD5CFFFD047D527D7DFD08FFA852FD0DFF7DA8FFFF7D7DA8FD%5BFFA87DA8A8FF7D7DA8FFFFFFA8FFFFFF7D7DA8FFA8FD05FFA8FFFFFFA8%7D7DFFFFFFA8FFFFFFA8FD07FFA8FD09FFA8FD46FF7D7DA8FFFFA87DA8FF%A87D7D7DFFFFA87DA87D7DA8FFFFA87D7D7DA8A8FD047DFF7D7DFFFF7D7D%7DA8A8FFFD057DFD06FFA87D7D7DA8FD44FFA87DA8A8A87DA8FFA87DA8A8%7D7DFFA87D7DFF7D7DFFA87DA8A8A87DFFA87D7DFFFFA87DFF7D7DA8A87D%FD04A8FFA87DA8FD05FF7DA8FFA87DA8FD43FFFD067DA8FF7D7DFFFF7D7D%A8A87DFFFFA87DA87D7DA8FF7D7DA8FF7DA8FFFF7D7DA87D7DFFFFA8A8FF%A8A87DA87DA8FD04FF7D7D7DA87D7D7DFD43FFA87DFFFFA87DFFFF7D7DFF%FFA87DFFA87DA8FFA87DA8A87DFFFFA87DFFFF7DA8FFFFA87DFF7DA8FD04%FFA87D7DFFA87DA8FD04FFA87DA8A8FFA8FD44FFA87DA8FFA87D7DFF7D7D%A8FF7D7DA8A87DA8A8A87DFF7D7DA8FF7D7DA8FF7DA8FFFF7D7DFF7D7DFF%A87D7DA87DA8FFA87DA8FD04FF7D7DA8FFA8A8A8FD43FFA87DA8FFFF7D7D%A8FFFD047DA8FF7DA87D7D7DA8FFFFFD057DFFFF7D7D7DFF7D7DFFA8FD04%7DFFA87D7DA87D7DA8FD05FFFD057DFD44FFA8A8A8FFFFFFA8FFFFFFA8A8%A8FFFFA8A8FFA8A8A8FFFFFF7DA8A8FFFFFFA8A87DFFA8A8FFFFA8A87DFF%FFFFA8A8A8FFA8FD07FFA8A8A8FDFCFFFDFCFFFDCDFFA87DA8FD2FFFA87D%A8FD0FFFA87DA8FD07FFA87D7DFD05FFA8A87D7D7DFFFFFF7DA8FD08FFA8%A8FD14FF7DA8A87DA8FD0CFFA8A8A8FD0BFFA87DA8FD13FF7DFD10FFA87D%A8FD08FFA8A8FD05FFA87DA8A87D7DFFFFA8A8FD08FF7D7DFD14FFA8A87D%7DA8FF7DA8A87D7DFFFFFF7DA87D7D7DFFFFA87DA8A8FFFFFFFD057DFF7D%A8A87D7DFFFFFF7DA87DA8FFFFFD07A8FFA8A87DA8A8FD06FFA87DA87D7D%A8FFA8A87DA8A8FFA8A8A8FD05FF7D7DA8FFA8A8A8FFA8A8FFFF7D7D7DFF%A8A87D7D7DFFFFA87D7DA8FFFFA87DA87DA8A8A87DA8FFFFA8A8A87DA8FF%A87DA87D7DA8FF7D7DA8A87DFFFFA87DA87D7DA8FF7D7DA8A87DFFFF7D7D%A87D7DA8FF7D7DA8A87DFFFF7D7D7DA8A852FFFF7D7DFF7D7DA8FD05FF7D%7D7DA87DFFFFA87DA87D7DA8FF7DA8FD05FFA87DA8A8FFFFFFA87D7DFF7D%A8A8A87DFF7DA87DA8FFA87DA87D7DA8FF7D7D7DA87DA87D7D7DFFFFFD04%7DA8FF7D7DFFFF7DA8FF7D7DFFA87DA8FF7DA8A8A87D7DA87D7DFFA87DA8%FF7D7DFFA852A8A87D7DFFA87D7DFF7D7DA8FFA87DA8FFFD04A87DA8FD04%FF7D7DA8FF7D7DA8A852A8A8A852A8A87D7DFD05FFA8A8FD047DA8FF7DA8%A87D7DA8A8FFFFFF7DA8FFFF7D7DA8FF7D7DA8A87DFFA87D7DFFA87DA8FF%7DA8A87DFFFF7D7DFFA87D7DFFA87D7DA87DFFA87D7DA87DA87DFFA8FD04%7DFFFF7D7DFFA87DA8FF7DA87DA87DA8FFA87DFFFFA87DA8FFA87DA87D7D%A8FD04FFA87DFFFFA87DFFA87D7DA87DA87DFF7DA8FD08FFA8A87DA8A87D%A8FFA8FD047DFFFF7D7DFFA87D7DA87DA87DFFA87DFFFF7DA8FFFF7DA8A8%FD047DA8FF7D7DFFFF7DA8A8A87DA8A8FFFFA852A8FFFFA8FFA87D7DA8A8%FFFFFF7DA8FFA87DA8A87D7DFFA8A8A8FF7D7DFFFFA87DA8A852A8FFA852%A8FD04FF7D7DA8FFA87DA8A852A8FFFFA8FFA87D7DFD04FFA87DA8FFFF7D%7D7DFF7DA8FFFFA8FF7D7D7DFF7DA8FFFF7D7DA8FFFD04A87DFFA87D7DFF%A87DA8FF7DA8A87DFFFF7D7DFFA87D7DFF7D7D7DA8A8FFFFA87DA8A87DA8%FF7DA87DA8A8FFFF7D7DFFA87DA8FF7D7DA8A87DA8FFA87DFFFFFF7DFFA8%7D7DA87D7DA8FD05FF7DA8A8A87DFFFF7D7DA8A87DA8FF7DA8FD05FFA87D%A87DA87DFFA87DA8FF7DA8A8A87DFFFF7D7DA8FFA87DA8A87D7DFFA87DFF%FF7DA8FFFF7DFFFF7D7DA87DA8FF7DA8FFFF7DA8A87D7DA87D7D7DFFA8A8%7D7D7DFFA87D7DA87D7D7DFF7DA8FFFF7DA8FFFF7D7D7DA8FFFF7DA8FFFF%A87DA8FF7D7D7DA87DA8FD05FFA87DA8A87DA8FFA87D7D7DA8FFA8A87DFD%05FFA8A87D7D7DA8FFFF7DA8FFA87D7D7DA8FFFFA87D7DFFFFA87D7D7DFF%FFA87DFFA8A8A8FFA87DA8FF7DA8FD0AFFA87DFFFFFF7D7DA8FD06FFA87D%A8FFFF7D7DA8FD6AFFA8A8FD047DA8FD07FFA8A8FD047DA8FD60FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">CMYK base</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2014-12-01T16:32:05+01:00</xap:CreateDate>
         <xap:ModifyDate>2014-12-01T16:32:05+01:00</xap:ModifyDate>
         <xap:MetadataDate>2014-12-01T16:32:05+01:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>240</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA8AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8AgV//AL3XP/GV/wDiRzkp&#xA;c36Nw/RH3B9E+SfyX/L/AFXyjo+pXtjI93d2kU07ieVQXdQSaBgBm7waHFKAJG5D5X2t7Va7Dqsm&#xA;OEgIxmQPTH9TJ9G/JvyDo+qW2p2FlJHeWj+pA5nlYBht9lmIOXw0WOJsDcOn1XtTrs+OWOcgYSFH&#xA;0j9TNJY1lieNvsupVvkRTMsh5+MqNh5jcf8AOP8A5ZiBk0TU9R0i7H2JopuSg9iy0Vj9DjNeezof&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:3651C893087BE4118CEB959CBAE3CA09</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:3751C893087BE4118CEB959CBAE3CA09</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:6814F51D64E411E4B629D5E5796892CF</stRef:instanceID>
            <stRef:documentID>uuid:6814F51964E411E4B629D5E5796892CF</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Basic CMYK</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>29.700000</stDim:w>
            <stDim:h>20.999999</stDim:h>
            <stDim:unit>Centimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Gruppo campioni predefinito</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Bianco</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>255</xapG:red>
                           <xapG:green>255</xapG:green>
                           <xapG:blue>255</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Nero</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>26</xapG:red>
                           <xapG:green>23</xapG:green>
                           <xapG:blue>27</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>CMYK Rosso</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>226</xapG:red>
                           <xapG:green>0</xapG:green>
                           <xapG:blue>26</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>CMYK Giallo</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>255</xapG:red>
                           <xapG:green>237</xapG:green>
                           <xapG:blue>0</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>CMYK Verde</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>0</xapG:red>
                           <xapG:green>144</xapG:green>
                           <xapG:blue>54</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>CMYK Cyan</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>0</xapG:red>
                           <xapG:green>158</xapG:green>
                           <xapG:blue>224</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>CMYK Blu</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>23</xapG:red>
                           <xapG:green>41</xapG:green>
                           <xapG:blue>131</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>CMYK Magenta</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>226</xapG:red>
                           <xapG:green>0</xapG:green>
                           <xapG:blue>122</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=15 M=100 Y=90 K=10</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>190</xapG:red>
                           <xapG:green>9</xapG:green>
                           <xapG:blue>38</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=90 Y=85 K=0</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>229</xapG:red>
                           <xapG:green>53</xapG:green>
                           <xapG:blue>45</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=80 Y=95 K=0</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>231</xapG:red>
                           <xapG:green>81</xapG:green>
                           <xapG:blue>30</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=50 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>242</xapG:red>
                           <xapG:green>148</xapG:green>
                           <xapG:blue>0</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=35 Y=85 K=0</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>248</xapG:red>
                           <xapG:green>179</xapG:green>
                           <xapG:blue>52</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=5 M=0 Y=90 K=0</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>252</xapG:red>
                           <xapG:green>234</xapG:green>
                           <xapG:blue>16</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=20 M=0 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>223</xapG:red>
                           <xapG:green>219</xapG:green>
                           <xapG:blue>0</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=0 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>151</xapG:red>
                           <xapG:green>190</xapG:green>
                           <xapG:blue>13</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=0 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>66</xapG:red>
                           <xapG:green>166</xapG:green>
                           <xapG:blue>42</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=85 M=10 Y=100 K=10</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>0</xapG:red>
                           <xapG:green>138</xapG:green>
                           <xapG:blue>46</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=90 M=30 Y=95 K=30</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>0</xapG:red>
                           <xapG:green>99</xapG:green>
                           <xapG:blue>47</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=0 Y=75 K=0</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>57</xapG:red>
                           <xapG:green>169</xapG:green>
                           <xapG:blue>98</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=80 M=10 Y=45 K=0</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>0</xapG:red>
                           <xapG:green>160</xapG:green>
                           <xapG:blue>150</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=70 M=15 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>58</xapG:red>
                           <xapG:green>170</xapG:green>
                           <xapG:blue>220</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=85 M=50 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>10</xapG:red>
                           <xapG:green>113</xapG:green>
                           <xapG:blue>180</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=95 Y=5 K=0</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>12</xapG:red>
                           <xapG:green>49</xapG:green>
                           <xapG:blue>131</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=100 Y=25 K=25</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>19</xapG:red>
                           <xapG:green>35</xapG:green>
                           <xapG:blue>91</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=100 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>99</xapG:red>
                           <xapG:green>33</xapG:green>
                           <xapG:blue>129</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=100 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>147</xapG:red>
                           <xapG:green>17</xapG:green>
                           <xapG:blue>126</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=35 M=100 Y=35 K=10</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>161</xapG:red>
                           <xapG:green>13</xapG:green>
                           <xapG:blue>89</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=10 M=100 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>213</xapG:red>
                           <xapG:green>0</xapG:green>
                           <xapG:blue>80</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=95 Y=20 K=0</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>228</xapG:red>
                           <xapG:green>19</xapG:green>
                           <xapG:blue>112</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=25 Y=40 K=0</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>203</xapG:red>
                           <xapG:green>187</xapG:green>
                           <xapG:blue>157</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=40 M=45 Y=50 K=5</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>163</xapG:red>
                           <xapG:green>138</xapG:green>
                           <xapG:blue>118</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=50 Y=60 K=25</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>120</xapG:red>
                           <xapG:green>104</xapG:green>
                           <xapG:blue>84</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=55 M=60 Y=65 K=40</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>96</xapG:red>
                           <xapG:green>76</xapG:green>
                           <xapG:blue>63</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=40 Y=65 K=0</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>201</xapG:red>
                           <xapG:green>158</xapG:green>
                           <xapG:blue>100</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=30 M=50 Y=75 K=10</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>177</xapG:red>
                           <xapG:green>127</xapG:green>
                           <xapG:blue>72</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=35 M=60 Y=80 K=25</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>145</xapG:red>
                           <xapG:green>94</xapG:green>
                           <xapG:blue>54</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=40 M=65 Y=90 K=35</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>124</xapG:red>
                           <xapG:green>77</xapG:green>
                           <xapG:blue>38</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=40 M=70 Y=100 K=50</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>103</xapG:red>
                           <xapG:green>59</xapG:green>
                           <xapG:blue>21</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=70 Y=80 K=70</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>65</xapG:red>
                           <xapG:green>41</xapG:green>
                           <xapG:blue>27</xapG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Scala di grigio</xapG:groupName>
                  <xapG:groupType>1</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=90</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>229</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=80</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>203</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=70</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>178</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=60</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>152</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=50</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>127</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=40</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>101</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=30</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>76</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=20</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>50</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=10</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>25</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=5</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>12</xapG:gray>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -554.103 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 554.103 li
590.854 554.103 li
590.854 0 li
cp
clp
[1 0 0 1 0 0 ]ct
20.8047 179.437 mo
51.9058 179.437 li
51.9058 184.26 li
0.681152 184.26 li
0.681152 0.337891 li
51.9058 0.337891 li
51.9058 5.16992 li
20.8047 5.16992 li
20.8047 179.437 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 0 0 rgb
f
73.6636 0 mo
73.6636 5.36133 li
92.1675 5.36133 107.192 14.7485 113.635 30.0347 cv
118.186 41.042 122.433 51.4883 122.433 91.9951 cv
122.433 126.32 118.72 137.054 116.032 146.717 cv
110.947 167.1 95.3892 178.905 73.6636 178.905 cv
73.6636 184.26 li
116.566 184.26 149.576 144.306 149.576 91.9951 cv
149.576 39.9629 116.566 0 73.6636 0 cv
cp
f
204.514 18.4136 mo
204.514 26.6909 197.914 33.2998 189.908 33.2998 cv
181.646 33.2998 174.986 26.6909 174.986 18.4136 cv
174.986 10.4209 181.646 3.76953 189.908 3.76953 cv
197.914 3.76953 204.514 10.4209 204.514 18.4136 cv
cp
202.318 179.291 mo
220.535 179.291 li
220.535 184.232 li
162.592 184.232 li
162.592 179.291 li
181.055 179.291 li
181.055 82.4023 li
162.592 82.4023 li
162.592 77.4746 li
202.318 77.4746 li
202.318 179.291 li
cp
0.584314 0.584314 0.584314 rgb
f
324.921 116.928 mo
324.921 101.731 324.053 95.3896 321.05 90.1328 cv
317.453 83.8022 310.532 80.2075 302.255 80.2075 cv
282.667 80.2075 269.693 99.5366 269.693 128.788 cv
269.693 162.176 281.858 181.499 303.093 181.499 cv
314.404 181.499 321.326 175.437 323.518 163.835 cv
324.33 159.702 324.921 150.588 324.921 139.249 cv
324.921 116.928 li
cp
270.256 97.8604 mo
279.07 81.5938 288.994 74.7056 303.383 74.7056 cv
330.685 74.7056 350.578 97.8604 350.578 129.887 cv
350.578 162.176 329.863 187.024 303.383 187.024 cv
288.735 187.024 279.921 181.229 270.256 165.21 cv
270.256 184.232 li
230.518 184.232 li
230.518 179.291 li
249.009 179.291 li
249.009 5.16406 li
230.518 5.16406 li
230.518 0.203125 li
270.256 0.203125 li
270.256 97.8604 li
cp
f
393.931 105.07 mo
402.48 82.4023 409.921 74.7056 423.458 74.7056 cv
432.848 74.7056 438.913 80.4976 438.913 89.3354 cv
438.913 97.6011 434.507 103.12 428.168 103.12 cv
421.813 103.12 418.775 98.7139 418.517 89.3354 cv
418.212 86.2588 417.113 84.9009 414.646 84.9009 cv
409.112 84.9009 403.869 91.5356 399.449 103.929 cv
395.054 116.657 393.931 124.658 393.931 147.281 cv
393.931 179.291 li
412.146 179.291 li
412.146 184.232 li
354.204 184.232 li
354.204 179.291 li
372.665 179.291 li
372.665 82.4023 li
354.204 82.4023 li
354.204 77.4746 li
393.931 77.4746 li
393.931 105.07 li
cp
f
490.615 18.4136 mo
490.615 26.6909 484.012 33.2998 476.011 33.2998 cv
467.748 33.2998 461.088 26.6909 461.088 18.4136 cv
461.088 10.4209 467.748 3.76953 476.011 3.76953 cv
484.012 3.76953 490.615 10.4209 490.615 18.4136 cv
cp
488.418 179.291 mo
506.635 179.291 li
506.635 184.232 li
448.678 184.232 li
448.678 179.291 li
467.156 179.291 li
467.156 82.4023 li
448.678 82.4023 li
448.678 77.4746 li
488.418 77.4746 li
488.418 179.291 li
cp
f
585.064 107.25 mo
580.368 107.25 li
577.061 90.1328 565.735 80.2075 548.904 80.2075 cv
536.742 80.2075 526.012 89.062 526.012 98.9873 cv
526.012 106.715 531.237 110.282 547.26 113.606 cv
559.667 116.091 li
581.193 120.511 590.854 130.986 590.854 150.588 cv
590.854 171.839 576.497 187.024 556.072 187.024 cv
544.774 187.024 537.303 183.973 525.747 173.774 cv
519.38 184.232 li
516.619 184.232 li
516.619 143.407 li
521.313 143.407 li
526.559 169.078 538.419 181.499 557.731 181.499 cv
570.992 181.499 582.289 171.563 582.289 159.961 cv
582.289 151.135 576.497 145.892 564.637 143.407 cv
543.399 139.249 li
527.104 135.97 517.746 124.385 517.746 107.8 cv
517.746 88.5015 531.542 74.7056 550.539 74.7056 cv
560.489 74.7056 567.671 77.4746 577.596 85.1914 cv
581.467 75.2661 li
585.064 75.2661 li
585.064 107.25 li
cp
f
11.1328 244.807 mo
11.1328 270.162 li
16.2539 270.162 li
19.3711 270.162 21.7925 269.063 23.5181 266.864 cv
25.2437 264.665 26.1064 261.562 26.1064 257.554 cv
26.1064 253.546 25.2437 250.42 23.5181 248.175 cv
21.7925 245.93 19.3711 244.807 16.2539 244.807 cv
11.1328 244.807 li
cp
2.00391 277.343 mo
2.00391 237.738 li
15.9756 237.738 li
18.4805 237.738 20.7349 237.975 22.7388 238.447 cv
24.7427 238.921 26.4404 239.63 27.832 240.577 cv
30.4482 242.302 32.48 244.65 33.9272 247.618 cv
35.3745 250.587 36.0981 253.899 36.0981 257.554 cv
36.0981 263.715 34.2842 268.553 30.6567 272.068 cv
27.0293 275.585 22.043 277.343 15.6973 277.343 cv
2.00391 277.343 li
cp
f
40.4956 277.343 mo
40.4956 248.036 li
49.2627 248.036 li
49.2627 277.343 li
40.4956 277.343 li
cp
40.4956 244.278 mo
40.4956 237.793 li
49.2627 237.793 li
49.2627 244.278 li
40.4956 244.278 li
cp
f
64.0972 264.846 mo
64.0972 267.147 64.4819 268.9 65.2524 270.106 cv
66.022 271.313 67.1401 271.915 68.606 271.915 cv
70.1646 271.915 71.3335 271.155 72.1128 269.634 cv
72.8921 268.112 73.2817 265.82 73.2817 262.759 cv
73.2817 259.809 72.8965 257.568 72.1265 256.037 cv
71.3564 254.507 70.2383 253.741 68.7729 253.741 cv
67.4185 253.741 66.3003 254.367 65.4194 255.62 cv
64.5376 256.872 64.0972 258.473 64.0972 260.421 cv
64.0972 264.846 li
cp
55.6641 287.501 mo
55.6641 248.036 li
63.6797 248.036 li
63.6797 252.6 li
64.6631 250.837 65.8042 249.534 67.103 248.689 cv
68.4014 247.846 69.9043 247.423 71.6118 247.423 cv
74.8403 247.423 77.4331 248.82 79.3911 251.612 cv
81.3481 254.405 82.3271 258.139 82.3271 262.814 cv
82.3271 267.286 81.2554 270.941 79.1128 273.78 cv
76.9692 276.619 74.2651 278.038 70.9995 278.038 cv
69.4409 278.038 68.105 277.723 66.9917 277.093 cv
65.8784 276.462 64.9136 275.478 64.0972 274.142 cv
64.0972 287.501 li
55.6641 287.501 li
cp
f
105.706 262.981 mo
102.217 263.037 99.5503 263.548 97.7041 264.512 cv
95.8579 265.478 94.9351 266.851 94.9351 268.632 cv
94.9351 269.838 95.3247 270.774 96.104 271.442 cv
96.8833 272.11 97.978 272.444 99.3882 272.444 cv
101.188 272.444 102.69 271.8 103.897 270.51 cv
105.103 269.221 105.706 267.583 105.706 265.598 cv
105.706 262.981 li
cp
106.458 277.343 mo
106.291 276.693 106.161 275.983 106.068 275.214 cv
105.975 274.444 105.91 273.585 105.873 272.64 cv
104.871 274.402 103.544 275.752 101.893 276.688 cv
100.241 277.625 98.3398 278.095 96.1875 278.095 cv
93.0327 278.095 90.5327 277.287 88.6865 275.673 cv
86.8403 274.059 85.9175 271.879 85.9175 269.132 cv
85.9175 265.663 87.5825 263.033 90.9131 261.242 cv
94.2437 259.452 99.1748 258.528 105.706 258.473 cv
105.706 257.22 li
105.706 255.736 105.293 254.614 104.468 253.853 cv
103.642 253.092 102.422 252.711 100.808 252.711 cv
99.0264 252.711 97.6211 253.06 96.5908 253.755 cv
95.5615 254.451 94.9351 255.477 94.7124 256.831 cv
86.7246 255.968 li
87.4106 253.092 88.9741 250.921 91.4141 249.455 cv
93.854 247.99 97.1338 247.256 101.253 247.256 cv
105.817 247.256 109.097 248.147 111.092 249.928 cv
113.086 251.709 114.083 254.632 114.083 258.695 cv
114.083 271.692 li
114.083 272.992 114.153 274.101 114.292 275.019 cv
114.432 275.938 114.649 276.712 114.946 277.343 cv
106.458 277.343 li
cp
f
120.234 277.343 mo
120.234 248.036 li
127.805 248.036 li
127.805 254.214 li
128.473 251.839 129.47 250.086 130.796 248.954 cv
132.123 247.823 133.826 247.256 135.904 247.256 cv
136.089 247.256 136.451 247.275 136.989 247.312 cv
137.156 247.331 137.286 247.35 137.379 247.368 cv
137.379 255.272 li
137.341 255.272 137.295 255.272 137.24 255.272 cv
136.498 255.198 135.959 255.161 135.625 255.161 cv
133.455 255.161 131.761 255.852 130.546 257.234 cv
129.331 258.617 128.723 260.532 128.723 262.981 cv
128.723 277.343 li
120.234 277.343 li
cp
f
142.639 267.824 mo
142.639 253.741 li
137.908 253.741 li
137.908 248.036 li
142.862 248.036 li
143.335 239.881 li
151.128 239.38 li
151.128 248.036 li
157.223 248.036 li
157.223 253.741 li
151.128 253.741 li
151.128 266.905 li
151.128 268.725 151.383 269.949 151.893 270.579 cv
152.403 271.211 153.327 271.526 154.663 271.526 cv
155.164 271.526 155.678 271.494 156.208 271.429 cv
156.736 271.363 157.279 271.267 157.835 271.136 cv
157.863 277.51 li
156.861 277.714 155.887 277.872 154.941 277.983 cv
153.995 278.095 153.104 278.149 152.269 278.149 cv
148.874 278.149 146.419 277.339 144.908 275.715 cv
143.395 274.091 142.639 271.461 142.639 267.824 cv
cp
f
162.038 277.343 mo
162.038 248.036 li
170.805 248.036 li
170.805 277.343 li
162.038 277.343 li
cp
162.038 244.278 mo
162.038 237.793 li
170.805 237.793 li
170.805 244.278 li
162.038 244.278 li
cp
f
201.643 252.433 mo
202.756 250.726 204.06 249.455 205.554 248.62 cv
207.047 247.785 208.768 247.368 210.716 247.368 cv
213.629 247.368 215.837 248.198 217.34 249.858 cv
218.843 251.52 219.595 253.955 219.595 257.165 cv
219.595 277.343 li
211.217 277.343 li
211.217 258.528 li
211.217 257.007 210.897 255.829 210.257 254.994 cv
209.617 254.159 208.703 253.741 207.516 253.741 cv
206.031 253.741 204.825 254.331 203.897 255.509 cv
202.969 256.687 202.506 258.25 202.506 260.198 cv
202.506 277.343 li
194.128 277.343 li
194.128 258.64 li
194.128 257.025 193.822 255.806 193.21 254.979 cv
192.598 254.154 191.688 253.741 190.482 253.741 cv
189.053 253.741 187.889 254.289 186.989 255.383 cv
186.089 256.479 185.64 257.907 185.64 259.669 cv
185.64 277.343 li
177.262 277.343 li
177.262 248.036 li
185.055 248.036 li
185.055 252.489 li
186.057 250.801 187.258 249.524 188.659 248.662 cv
190.06 247.799 191.651 247.368 193.433 247.368 cv
195.455 247.368 197.139 247.781 198.484 248.606 cv
199.829 249.432 200.882 250.708 201.643 252.433 cv
cp
f
233.399 259.391 mo
245.033 259.363 li
244.996 257.267 244.477 255.652 243.475 254.521 cv
242.473 253.389 241.053 252.823 239.216 252.823 cv
237.491 252.823 236.117 253.403 235.097 254.563 cv
234.077 255.722 233.511 257.332 233.399 259.391 cv
cp
253.745 268.381 mo
252.78 271.498 251.04 273.905 248.526 275.604 cv
246.012 277.301 242.946 278.149 239.328 278.149 cv
234.781 278.149 231.117 276.74 228.334 273.919 cv
225.551 271.1 224.159 267.379 224.159 262.759 cv
224.159 258.232 225.616 254.516 228.529 251.612 cv
231.441 248.708 235.171 247.256 239.717 247.256 cv
244.133 247.256 247.603 248.653 250.126 251.445 cv
252.649 254.238 253.912 258.083 253.912 262.981 cv
253.912 264.178 li
233.288 264.178 li
233.288 266.721 233.84 268.678 234.944 270.051 cv
236.048 271.424 237.62 272.11 239.662 272.11 cv
241.109 272.11 242.343 271.726 243.363 270.955 cv
244.383 270.186 245.089 269.104 245.479 267.713 cv
253.745 268.381 li
cp
f
258.838 277.343 mo
258.838 248.036 li
266.687 248.036 li
266.687 252.711 li
267.633 250.93 268.848 249.576 270.333 248.648 cv
271.817 247.72 273.533 247.256 275.481 247.256 cv
278.71 247.256 281.104 248.161 282.662 249.97 cv
284.221 251.779 285 254.576 285 258.361 cv
285 277.343 li
276.511 277.343 li
276.511 258.918 li
276.511 257.119 276.177 255.759 275.509 254.841 cv
274.841 253.922 273.839 253.463 272.503 253.463 cv
270.945 253.463 269.683 254.066 268.718 255.272 cv
267.753 256.479 267.271 258.074 267.271 260.059 cv
267.271 277.343 li
258.838 277.343 li
cp
f
292.682 267.824 mo
292.682 253.741 li
287.95 253.741 li
287.95 248.036 li
292.904 248.036 li
293.377 239.881 li
301.17 239.38 li
301.17 248.036 li
307.266 248.036 li
307.266 253.741 li
301.17 253.741 li
301.17 266.905 li
301.17 268.725 301.425 269.949 301.936 270.579 cv
302.446 271.211 303.369 271.526 304.705 271.526 cv
305.206 271.526 305.721 271.494 306.25 271.429 cv
306.778 271.363 307.321 271.267 307.878 271.136 cv
307.906 277.51 li
306.904 277.714 305.93 277.872 304.983 277.983 cv
304.037 278.095 303.146 278.149 302.312 278.149 cv
298.916 278.149 296.462 277.339 294.95 275.715 cv
293.438 274.091 292.682 271.461 292.682 267.824 cv
cp
f
325.245 272.222 mo
327.1 272.222 328.516 271.405 329.489 269.772 cv
330.464 268.14 330.951 265.783 330.951 262.703 cv
330.951 259.604 330.459 257.234 329.476 255.592 cv
328.492 253.95 327.082 253.129 325.245 253.129 cv
323.39 253.129 321.984 253.936 321.028 255.55 cv
320.073 257.165 319.595 259.549 319.595 262.703 cv
319.595 265.839 320.068 268.21 321.015 269.814 cv
321.961 271.419 323.371 272.222 325.245 272.222 cv
cp
325.245 278.149 mo
320.829 278.149 317.262 276.73 314.544 273.892 cv
311.825 271.053 310.466 267.323 310.466 262.703 cv
310.466 258.065 311.82 254.331 314.53 251.501 cv
317.239 248.671 320.81 247.256 325.245 247.256 cv
329.698 247.256 333.279 248.671 335.988 251.501 cv
338.697 254.331 340.052 258.065 340.052 262.703 cv
340.052 267.342 338.697 271.076 335.988 273.905 cv
333.279 276.735 329.698 278.149 325.245 278.149 cv
cp
f
19.2876 325.68 mo
19.2876 323.825 18.8467 322.392 17.9653 321.38 cv
17.084 320.369 15.8267 319.863 14.1943 319.863 cv
12.5425 319.863 11.2764 320.666 10.395 322.271 cv
9.51367 323.876 9.07324 326.19 9.07324 329.215 cv
9.07324 332.295 9.50879 334.61 10.3813 336.159 cv
11.2534 337.708 12.5703 338.482 14.3335 338.482 cv
15.7432 338.482 16.9219 337.917 17.8682 336.785 cv
18.8145 335.653 19.2876 334.206 19.2876 332.443 cv
19.2876 325.68 li
cp
27.7764 304.361 mo
27.7764 343.91 li
19.7886 343.91 li
19.7329 339.401 li
18.7681 341.127 17.6079 342.436 16.2539 343.326 cv
14.8994 344.217 13.3774 344.662 11.6895 344.662 cv
8.1084 344.662 5.26465 343.289 3.15869 340.543 cv
1.05273 337.797 0 334.076 0 329.382 cv
0 324.688 1.06201 320.931 3.18701 318.109 cv
5.31104 315.29 8.1084 313.879 11.5781 313.879 cv
13.1182 313.879 14.5234 314.213 15.7944 314.881 cv
17.0654 315.549 18.23 316.561 19.2876 317.915 cv
19.2876 304.361 li
27.7764 304.361 li
cp
f
33.9829 343.91 mo
33.9829 314.604 li
42.75 314.604 li
42.75 343.91 li
33.9829 343.91 li
cp
33.9829 310.846 mo
33.9829 304.361 li
42.75 304.361 li
42.75 310.846 li
33.9829 310.846 li
cp
f
67.103 343.91 mo
67.103 304.361 li
76.5103 304.361 li
76.5103 343.91 li
67.103 343.91 li
cp
f
83.6353 343.91 mo
83.6353 314.604 li
91.4839 314.604 li
91.4839 319.279 li
92.4302 317.498 93.645 316.144 95.1299 315.215 cv
96.6143 314.288 98.3306 313.824 100.279 313.824 cv
103.507 313.824 105.901 314.729 107.459 316.537 cv
109.018 318.347 109.797 321.144 109.797 324.929 cv
109.797 343.91 li
101.309 343.91 li
101.309 325.485 li
101.309 323.686 100.975 322.326 100.307 321.408 cv
99.6387 320.489 98.6367 320.03 97.3008 320.03 cv
95.7422 320.03 94.48 320.634 93.5156 321.84 cv
92.5508 323.046 92.0684 324.642 92.0684 326.627 cv
92.0684 343.91 li
83.6353 343.91 li
cp
f
117.368 343.91 mo
117.368 320.309 li
112.748 320.309 li
112.748 314.604 li
117.368 314.604 li
117.368 313.573 li
117.368 310.215 118.184 307.725 119.817 306.101 cv
121.449 304.477 123.954 303.665 127.332 303.665 cv
128.5 303.665 129.656 303.721 130.796 303.832 cv
131.938 303.943 133.065 304.12 134.178 304.361 cv
134.178 310.122 li
133.046 309.955 132.142 309.844 131.464 309.788 cv
130.787 309.732 130.17 309.705 129.614 309.705 cv
128.204 309.705 127.151 310.043 126.455 310.721 cv
125.759 311.398 125.411 312.432 125.411 313.824 cv
125.411 313.879 125.42 314 125.439 314.186 cv
125.457 314.371 125.467 314.511 125.467 314.604 cv
132.759 314.604 li
132.759 320.309 li
125.634 320.309 li
125.634 343.91 li
117.368 343.91 li
cp
f
149.013 338.789 mo
150.868 338.789 152.283 337.973 153.257 336.34 cv
154.231 334.707 154.718 332.351 154.718 329.271 cv
154.718 326.172 154.227 323.802 153.243 322.159 cv
152.259 320.518 150.85 319.696 149.013 319.696 cv
147.157 319.696 145.751 320.504 144.796 322.117 cv
143.84 323.732 143.363 326.116 143.363 329.271 cv
143.363 332.406 143.836 334.777 144.782 336.382 cv
145.729 337.986 147.138 338.789 149.013 338.789 cv
cp
149.013 344.717 mo
144.597 344.717 141.029 343.298 138.312 340.459 cv
135.593 337.62 134.234 333.891 134.234 329.271 cv
134.234 324.632 135.588 320.897 138.297 318.068 cv
141.006 315.239 144.578 313.824 149.013 313.824 cv
153.466 313.824 157.046 315.239 159.756 318.068 cv
162.465 320.897 163.819 324.632 163.819 329.271 cv
163.819 333.909 162.465 337.644 159.756 340.473 cv
157.046 343.303 153.466 344.717 149.013 344.717 cv
cp
f
168.69 343.91 mo
168.69 314.604 li
176.26 314.604 li
176.26 320.781 li
176.928 318.407 177.925 316.653 179.252 315.521 cv
180.579 314.39 182.281 313.824 184.359 313.824 cv
184.544 313.824 184.906 313.843 185.445 313.879 cv
185.612 313.898 185.741 313.917 185.834 313.936 cv
185.834 321.84 li
185.797 321.84 185.751 321.84 185.695 321.84 cv
184.953 321.766 184.415 321.729 184.081 321.729 cv
181.91 321.729 180.217 322.42 179.002 323.802 cv
177.786 325.184 177.179 327.1 177.179 329.549 cv
177.179 343.91 li
168.69 343.91 li
cp
f
214 319 mo
215.114 317.294 216.417 316.022 217.911 315.188 cv
219.404 314.353 221.125 313.936 223.074 313.936 cv
225.986 313.936 228.195 314.766 229.698 316.426 cv
231.201 318.087 231.952 320.522 231.952 323.732 cv
231.952 343.91 li
223.575 343.91 li
223.575 325.096 li
223.575 323.574 223.255 322.396 222.614 321.561 cv
221.975 320.727 221.06 320.309 219.873 320.309 cv
218.388 320.309 217.183 320.897 216.255 322.076 cv
215.327 323.255 214.863 324.817 214.863 326.766 cv
214.863 343.91 li
206.486 343.91 li
206.486 325.207 li
206.486 323.593 206.18 322.373 205.567 321.547 cv
204.955 320.722 204.046 320.309 202.84 320.309 cv
201.411 320.309 200.247 320.856 199.347 321.951 cv
198.447 323.046 197.997 324.475 197.997 326.236 cv
197.997 343.91 li
189.62 343.91 li
189.62 314.604 li
197.413 314.604 li
197.413 319.057 li
198.415 317.368 199.616 316.092 201.017 315.229 cv
202.417 314.366 204.009 313.936 205.79 313.936 cv
207.812 313.936 209.496 314.349 210.842 315.174 cv
212.187 315.999 213.239 317.275 214 319 cv
cp
f
256.25 329.549 mo
252.761 329.604 250.094 330.115 248.248 331.08 cv
246.401 332.045 245.479 333.418 245.479 335.199 cv
245.479 336.405 245.868 337.342 246.647 338.01 cv
247.427 338.678 248.521 339.012 249.932 339.012 cv
251.731 339.012 253.234 338.367 254.44 337.077 cv
255.646 335.788 256.25 334.15 256.25 332.165 cv
256.25 329.549 li
cp
257.001 343.91 mo
256.834 343.261 256.704 342.551 256.611 341.781 cv
256.518 341.012 256.454 340.152 256.417 339.207 cv
255.415 340.97 254.088 342.319 252.437 343.256 cv
250.785 344.192 248.883 344.662 246.731 344.662 cv
243.576 344.662 241.076 343.854 239.23 342.24 cv
237.384 340.626 236.461 338.446 236.461 335.699 cv
236.461 332.23 238.126 329.601 241.457 327.81 cv
244.787 326.019 249.718 325.096 256.25 325.04 cv
256.25 323.787 li
256.25 322.304 255.836 321.181 255.011 320.42 cv
254.185 319.659 252.965 319.279 251.351 319.279 cv
249.57 319.279 248.165 319.627 247.134 320.322 cv
246.105 321.019 245.479 322.044 245.256 323.398 cv
237.268 322.535 li
237.954 319.659 239.518 317.488 241.958 316.022 cv
244.397 314.557 247.677 313.824 251.796 313.824 cv
256.361 313.824 259.64 314.715 261.635 316.496 cv
263.629 318.277 264.627 321.199 264.627 325.263 cv
264.627 338.26 li
264.627 339.56 264.697 340.668 264.835 341.586 cv
264.975 342.505 265.193 343.279 265.49 343.91 cv
257.001 343.91 li
cp
f
272.253 334.392 mo
272.253 320.309 li
267.521 320.309 li
267.521 314.604 li
272.476 314.604 li
272.949 306.448 li
280.742 305.947 li
280.742 314.604 li
286.837 314.604 li
286.837 320.309 li
280.742 320.309 li
280.742 333.473 li
280.742 335.292 280.997 336.517 281.507 337.146 cv
282.017 337.778 282.94 338.094 284.276 338.094 cv
284.777 338.094 285.292 338.062 285.821 337.996 cv
286.35 337.931 286.893 337.834 287.449 337.703 cv
287.477 344.077 li
286.475 344.281 285.501 344.439 284.555 344.551 cv
283.608 344.662 282.718 344.717 281.883 344.717 cv
278.487 344.717 276.033 343.906 274.521 342.282 cv
273.009 340.658 272.253 338.028 272.253 334.392 cv
cp
f
291.652 343.91 mo
291.652 314.604 li
300.419 314.604 li
300.419 343.91 li
291.652 343.91 li
cp
291.652 310.846 mo
291.652 304.361 li
300.419 304.361 li
300.419 310.846 li
291.652 310.846 li
cp
f
324.549 325.736 mo
324.289 323.844 323.737 322.373 322.893 321.324 cv
322.049 320.276 321.005 319.752 319.762 319.752 cv
317.981 319.752 316.631 320.55 315.712 322.146 cv
314.794 323.741 314.335 326.098 314.335 329.215 cv
314.335 332.276 314.803 334.628 315.741 336.271 cv
316.677 337.912 318.018 338.733 319.762 338.733 cv
321.135 338.733 322.271 338.2 323.171 337.133 cv
324.071 336.066 324.623 334.605 324.828 332.75 cv
332.287 333.584 li
331.897 336.98 330.523 339.685 328.167 341.697 cv
325.811 343.711 322.852 344.717 319.289 344.717 cv
315.132 344.717 311.747 343.289 309.13 340.432 cv
306.514 337.574 305.206 333.872 305.206 329.326 cv
305.206 324.65 306.551 320.897 309.242 318.068 cv
311.932 315.239 315.494 313.824 319.929 313.824 cv
323.306 313.824 326.089 314.808 328.279 316.773 cv
330.468 318.741 331.804 321.459 332.287 324.929 cv
324.549 325.736 li
cp
f
354.858 329.549 mo
351.37 329.604 348.703 330.115 346.856 331.08 cv
345.01 332.045 344.087 333.418 344.087 335.199 cv
344.087 336.405 344.477 337.342 345.256 338.01 cv
346.036 338.678 347.13 339.012 348.541 339.012 cv
350.34 339.012 351.843 338.367 353.049 337.077 cv
354.255 335.788 354.858 334.15 354.858 332.165 cv
354.858 329.549 li
cp
355.61 343.91 mo
355.443 343.261 355.313 342.551 355.22 341.781 cv
355.127 341.012 355.063 340.152 355.025 339.207 cv
354.023 340.97 352.697 342.319 351.045 343.256 cv
349.394 344.192 347.492 344.662 345.34 344.662 cv
342.185 344.662 339.685 343.854 337.839 342.24 cv
335.993 340.626 335.07 338.446 335.07 335.699 cv
335.07 332.23 336.735 329.601 340.065 327.81 cv
343.396 326.019 348.327 325.096 354.858 325.04 cv
354.858 323.787 li
354.858 322.304 354.445 321.181 353.62 320.42 cv
352.794 319.659 351.574 319.279 349.96 319.279 cv
348.179 319.279 346.773 319.627 345.743 320.322 cv
344.714 321.019 344.087 322.044 343.865 323.398 cv
335.877 322.535 li
336.563 319.659 338.126 317.488 340.566 316.022 cv
343.006 314.557 346.286 313.824 350.405 313.824 cv
354.97 313.824 358.249 314.715 360.244 316.496 cv
362.238 318.277 363.236 321.199 363.236 325.263 cv
363.236 338.26 li
363.236 339.56 363.306 340.668 363.444 341.586 cv
363.584 342.505 363.802 343.279 364.099 343.91 cv
355.61 343.91 li
cp
f
370.222 344.133 mo
370.222 335.199 li
379.462 335.199 li
379.462 343.27 li
374.007 353.373 li
369.999 353.373 li
374.341 344.133 li
370.222 344.133 li
cp
f
10.3257 403.574 mo
17.562 403.574 li
19.5659 403.574 21.1147 403.143 22.21 402.28 cv
23.3047 401.417 23.8521 400.197 23.8521 398.62 cv
23.8521 396.932 23.2856 395.638 22.1543 394.737 cv
21.0225 393.838 19.3989 393.388 17.2837 393.388 cv
10.3257 393.388 li
10.3257 403.574 li
cp
10.3257 386.819 mo
17.228 386.819 li
19.0649 386.819 20.4746 386.411 21.4585 385.595 cv
22.4419 384.778 22.9336 383.609 22.9336 382.088 cv
22.9336 380.659 22.4604 379.56 21.5142 378.79 cv
20.5679 378.021 19.2134 377.635 17.4507 377.635 cv
10.3257 377.635 li
10.3257 386.819 li
cp
1.66992 410.477 mo
1.66992 370.928 li
19.2319 370.928 li
23.2954 370.928 26.4077 371.795 28.5698 373.529 cv
30.731 375.265 31.812 377.756 31.812 381.002 cv
31.812 383.248 31.2275 385.131 30.0586 386.652 cv
28.8896 388.174 27.2197 389.223 25.0488 389.797 cv
27.6831 390.465 29.6504 391.625 30.9492 393.276 cv
32.2476 394.928 32.8975 397.09 32.8975 399.762 cv
32.8975 403.231 31.7007 405.885 29.3071 407.721 cv
26.9136 409.559 23.4526 410.477 18.9258 410.477 cv
1.66992 410.477 li
cp
f
37.8237 410.477 mo
37.8237 381.17 li
46.5908 381.17 li
46.5908 410.477 li
37.8237 410.477 li
cp
37.8237 377.412 mo
37.8237 370.928 li
46.5908 370.928 li
46.5908 377.412 li
37.8237 377.412 li
cp
f
66.1567 405.355 mo
68.0117 405.355 69.4272 404.539 70.4009 402.906 cv
71.3755 401.273 71.8623 398.917 71.8623 395.837 cv
71.8623 392.738 71.3706 390.368 70.3872 388.726 cv
69.4033 387.084 67.9937 386.263 66.1567 386.263 cv
64.3013 386.263 62.8955 387.07 61.9399 388.684 cv
60.9844 390.299 60.5068 392.683 60.5068 395.837 cv
60.5068 398.973 60.98 401.344 61.9263 402.948 cv
62.8726 404.553 64.2822 405.355 66.1567 405.355 cv
cp
66.1567 411.283 mo
61.7407 411.283 58.1733 409.864 55.4556 407.025 cv
52.7368 404.187 51.3779 400.457 51.3779 395.837 cv
51.3779 391.198 52.7319 387.464 55.4414 384.635 cv
58.1504 381.806 61.7217 380.391 66.1567 380.391 cv
70.6099 380.391 74.1904 381.806 76.8999 384.635 cv
79.6089 387.464 80.9634 391.198 80.9634 395.837 cv
80.9634 400.476 79.6089 404.21 76.8999 407.039 cv
74.1904 409.869 70.6099 411.283 66.1567 411.283 cv
cp
f
85.7783 410.477 mo
85.7783 381.17 li
94.5454 381.17 li
94.5454 410.477 li
85.7783 410.477 li
cp
85.7783 377.412 mo
85.7783 370.928 li
94.5454 370.928 li
94.5454 377.412 li
85.7783 377.412 li
cp
f
101.002 410.477 mo
101.002 381.17 li
108.851 381.17 li
108.851 385.846 li
109.797 384.064 111.012 382.71 112.497 381.781 cv
113.981 380.854 115.698 380.391 117.646 380.391 cv
120.875 380.391 123.268 381.295 124.827 383.104 cv
126.385 384.913 127.165 387.71 127.165 391.495 cv
127.165 410.477 li
118.676 410.477 li
118.676 392.052 li
118.676 390.252 118.342 388.893 117.674 387.975 cv
117.006 387.056 116.004 386.597 114.668 386.597 cv
113.109 386.597 111.847 387.2 110.883 388.406 cv
109.918 389.612 109.436 391.208 109.436 393.193 cv
109.436 410.477 li
101.002 410.477 li
cp
f
145.951 385.232 mo
144.522 385.232 143.367 385.678 142.486 386.568 cv
141.604 387.459 141.164 388.629 141.164 390.076 cv
141.164 391.578 141.591 392.762 142.444 393.624 cv
143.297 394.487 144.466 394.918 145.951 394.918 cv
147.454 394.918 148.627 394.487 149.472 393.624 cv
150.316 392.762 150.738 391.578 150.738 390.076 cv
150.738 388.61 150.302 387.437 149.43 386.555 cv
148.558 385.674 147.398 385.232 145.951 385.232 cv
cp
139.967 409.559 mo
139.336 409.893 138.858 410.301 138.534 410.783 cv
138.209 411.265 138.047 411.813 138.047 412.425 cv
138.047 413.668 138.729 414.577 140.092 415.152 cv
141.457 415.728 143.641 416.016 146.647 416.016 cv
149.412 416.016 151.374 415.755 152.534 415.236 cv
153.693 414.716 154.273 413.872 154.273 412.703 cv
154.273 411.924 153.943 411.325 153.285 410.908 cv
152.626 410.49 151.591 410.235 150.182 410.143 cv
139.967 409.559 li
cp
137.407 397.201 mo
135.941 396.403 134.823 395.405 134.053 394.209 cv
133.283 393.012 132.898 391.672 132.898 390.188 cv
132.898 387.33 134.081 385.01 136.447 383.229 cv
138.812 381.447 141.925 380.557 145.784 380.557 cv
146.842 380.557 147.872 380.646 148.874 380.821 cv
149.875 380.998 150.859 381.271 151.824 381.643 cv
152.064 379.527 152.76 377.96 153.911 376.939 cv
155.062 375.919 156.722 375.408 158.893 375.408 cv
159.245 375.408 159.951 375.436 161.008 375.492 cv
161.324 375.511 161.574 375.529 161.76 375.547 cv
161.565 381.587 li
161.491 381.568 161.388 381.559 161.259 381.559 cv
160.442 381.504 159.867 381.476 159.533 381.476 cv
158.364 381.476 157.483 381.639 156.889 381.963 cv
156.295 382.287 155.905 382.821 155.72 383.563 cv
156.74 384.564 157.506 385.623 158.016 386.736 cv
158.526 387.85 158.782 389.018 158.782 390.242 cv
158.782 393.119 157.678 395.388 155.47 397.048 cv
153.261 398.708 150.228 399.539 146.369 399.539 cv
145.459 399.539 144.629 399.502 143.877 399.428 cv
143.126 399.354 142.435 399.232 141.804 399.065 cv
141.192 399.325 140.733 399.627 140.426 399.97 cv
140.121 400.313 139.967 400.698 139.967 401.125 cv
139.967 401.812 140.204 402.331 140.677 402.684 cv
141.15 403.036 141.888 403.24 142.89 403.296 cv
151.824 403.686 li
154.978 403.834 157.469 404.642 159.296 406.107 cv
161.124 407.573 162.038 409.484 162.038 411.84 cv
162.038 414.734 160.707 416.979 158.044 418.576 cv
155.381 420.171 151.619 420.969 146.758 420.969 cv
141.285 420.969 137.226 420.343 134.582 419.091 cv
131.938 417.838 130.616 415.913 130.616 413.315 cv
130.616 412.017 131.01 410.87 131.798 409.878 cv
132.587 408.886 133.677 408.157 135.069 407.693 cv
134.141 407.174 133.436 406.538 132.954 405.787 cv
132.471 405.035 132.23 404.187 132.23 403.24 cv
132.23 401.812 132.657 400.596 133.51 399.594 cv
134.363 398.592 135.663 397.795 137.407 397.201 cv
cp
f
172.586 392.525 mo
184.22 392.497 li
184.183 390.4 183.664 388.786 182.662 387.654 cv
181.66 386.522 180.24 385.957 178.403 385.957 cv
176.678 385.957 175.304 386.537 174.284 387.696 cv
173.264 388.855 172.698 390.465 172.586 392.525 cv
cp
192.932 401.515 mo
191.967 404.632 190.227 407.039 187.713 408.737 cv
185.199 410.435 182.133 411.283 178.515 411.283 cv
173.968 411.283 170.304 409.874 167.521 407.053 cv
164.738 404.233 163.346 400.513 163.346 395.893 cv
163.346 391.365 164.803 387.65 167.716 384.746 cv
170.628 381.842 174.358 380.391 178.904 380.391 cv
183.32 380.391 186.79 381.786 189.313 384.579 cv
191.836 387.372 193.099 391.217 193.099 396.115 cv
193.099 397.313 li
172.475 397.313 li
172.475 399.854 173.027 401.812 174.131 403.185 cv
175.235 404.558 176.807 405.244 178.849 405.244 cv
180.296 405.244 181.53 404.859 182.55 404.089 cv
183.57 403.319 184.276 402.238 184.666 400.847 cv
192.932 401.515 li
cp
f
210.605 385.232 mo
209.176 385.232 208.021 385.678 207.14 386.568 cv
206.258 387.459 205.818 388.629 205.818 390.076 cv
205.818 391.578 206.245 392.762 207.098 393.624 cv
207.951 394.487 209.12 394.918 210.605 394.918 cv
212.108 394.918 213.281 394.487 214.126 393.624 cv
214.97 392.762 215.392 391.578 215.392 390.076 cv
215.392 388.61 214.956 387.437 214.084 386.555 cv
213.211 385.674 212.052 385.232 210.605 385.232 cv
cp
204.621 409.559 mo
203.99 409.893 203.512 410.301 203.188 410.783 cv
202.863 411.265 202.701 411.813 202.701 412.425 cv
202.701 413.668 203.383 414.577 204.746 415.152 cv
206.11 415.728 208.295 416.016 211.301 416.016 cv
214.065 416.016 216.027 415.755 217.188 415.236 cv
218.347 414.716 218.927 413.872 218.927 412.703 cv
218.927 411.924 218.597 411.325 217.938 410.908 cv
217.28 410.49 216.245 410.235 214.835 410.143 cv
204.621 409.559 li
cp
202.061 397.201 mo
200.595 396.403 199.477 395.405 198.707 394.209 cv
197.937 393.012 197.552 391.672 197.552 390.188 cv
197.552 387.33 198.734 385.01 201.101 383.229 cv
203.466 381.447 206.579 380.557 210.438 380.557 cv
211.496 380.557 212.525 380.646 213.527 380.821 cv
214.529 380.998 215.513 381.271 216.478 381.643 cv
216.718 379.527 217.414 377.96 218.565 376.939 cv
219.715 375.919 221.376 375.408 223.547 375.408 cv
223.899 375.408 224.604 375.436 225.662 375.492 cv
225.978 375.511 226.228 375.529 226.414 375.547 cv
226.219 381.587 li
226.145 381.568 226.042 381.559 225.913 381.559 cv
225.096 381.504 224.521 381.476 224.187 381.476 cv
223.018 381.476 222.137 381.639 221.543 381.963 cv
220.949 382.287 220.559 382.821 220.374 383.563 cv
221.394 384.564 222.16 385.623 222.67 386.736 cv
223.18 387.85 223.436 389.018 223.436 390.242 cv
223.436 393.119 222.332 395.388 220.124 397.048 cv
217.915 398.708 214.881 399.539 211.022 399.539 cv
210.113 399.539 209.283 399.502 208.531 399.428 cv
207.78 399.354 207.088 399.232 206.458 399.065 cv
205.846 399.325 205.387 399.627 205.08 399.97 cv
204.774 400.313 204.621 400.698 204.621 401.125 cv
204.621 401.812 204.857 402.331 205.331 402.684 cv
205.804 403.036 206.542 403.24 207.543 403.296 cv
216.478 403.686 li
219.632 403.834 222.123 404.642 223.95 406.107 cv
225.778 407.573 226.692 409.484 226.692 411.84 cv
226.692 414.734 225.36 416.979 222.698 418.576 cv
220.035 420.171 216.273 420.969 211.412 420.969 cv
205.938 420.969 201.88 420.343 199.235 419.091 cv
196.592 417.838 195.27 415.913 195.27 413.315 cv
195.27 412.017 195.664 410.87 196.452 409.878 cv
197.241 408.886 198.331 408.157 199.723 407.693 cv
198.794 407.174 198.09 406.538 197.607 405.787 cv
197.125 405.035 196.884 404.187 196.884 403.24 cv
196.884 401.812 197.311 400.596 198.164 399.594 cv
199.017 398.592 200.316 397.795 202.061 397.201 cv
cp
f
229.67 410.477 mo
229.67 381.17 li
237.519 381.17 li
237.519 385.846 li
238.465 384.064 239.68 382.71 241.165 381.781 cv
242.649 380.854 244.365 380.391 246.313 380.391 cv
249.542 380.391 251.936 381.295 253.494 383.104 cv
255.053 384.913 255.832 387.71 255.832 391.495 cv
255.832 410.477 li
247.343 410.477 li
247.343 392.052 li
247.343 390.252 247.009 388.893 246.341 387.975 cv
245.673 387.056 244.671 386.597 243.335 386.597 cv
241.777 386.597 240.515 387.2 239.55 388.406 cv
238.585 389.612 238.103 391.208 238.103 393.193 cv
238.103 410.477 li
229.67 410.477 li
cp
f
269.609 392.525 mo
281.243 392.497 li
281.205 390.4 280.686 388.786 279.684 387.654 cv
278.682 386.522 277.263 385.957 275.426 385.957 cv
273.7 385.957 272.327 386.537 271.307 387.696 cv
270.286 388.855 269.72 390.465 269.609 392.525 cv
cp
289.954 401.515 mo
288.989 404.632 287.25 407.039 284.735 408.737 cv
282.221 410.435 279.155 411.283 275.537 411.283 cv
270.991 411.283 267.327 409.874 264.543 407.053 cv
261.76 404.233 260.369 400.513 260.369 395.893 cv
260.369 391.365 261.825 387.65 264.738 384.746 cv
267.651 381.842 271.38 380.391 275.927 380.391 cv
280.342 380.391 283.813 381.786 286.336 384.579 cv
288.859 387.372 290.121 391.217 290.121 396.115 cv
290.121 397.313 li
269.498 397.313 li
269.498 399.854 270.049 401.812 271.153 403.185 cv
272.257 404.558 273.83 405.244 275.871 405.244 cv
277.318 405.244 278.552 404.859 279.573 404.089 cv
280.593 403.319 281.298 402.238 281.688 400.847 cv
289.954 401.515 li
cp
f
295.047 410.477 mo
295.047 381.17 li
302.618 381.17 li
302.618 387.348 li
303.286 384.974 304.283 383.22 305.609 382.088 cv
306.936 380.956 308.639 380.391 310.717 380.391 cv
310.902 380.391 311.264 380.409 311.802 380.445 cv
311.969 380.465 312.099 380.483 312.192 380.502 cv
312.192 388.406 li
312.154 388.406 312.108 388.406 312.053 388.406 cv
311.311 388.332 310.772 388.295 310.438 388.295 cv
308.268 388.295 306.574 388.986 305.359 390.368 cv
304.144 391.75 303.536 393.666 303.536 396.115 cv
303.536 410.477 li
295.047 410.477 li
cp
f
315.921 410.477 mo
315.921 381.17 li
324.688 381.17 li
324.688 410.477 li
315.921 410.477 li
cp
315.921 377.412 mo
315.921 370.928 li
324.688 370.928 li
324.688 377.412 li
315.921 377.412 li
cp
f
349.208 396.115 mo
345.72 396.171 343.053 396.682 341.207 397.646 cv
339.36 398.611 338.438 399.984 338.438 401.766 cv
338.438 402.972 338.827 403.908 339.606 404.576 cv
340.386 405.244 341.48 405.578 342.891 405.578 cv
344.69 405.578 346.193 404.934 347.399 403.644 cv
348.605 402.354 349.208 400.717 349.208 398.731 cv
349.208 396.115 li
cp
349.96 410.477 mo
349.793 409.827 349.663 409.117 349.57 408.348 cv
349.477 407.578 349.413 406.719 349.375 405.773 cv
348.374 407.536 347.047 408.886 345.396 409.822 cv
343.744 410.759 341.842 411.229 339.69 411.229 cv
336.535 411.229 334.035 410.421 332.189 408.807 cv
330.343 407.192 329.42 405.013 329.42 402.266 cv
329.42 398.797 331.085 396.167 334.416 394.376 cv
337.746 392.585 342.677 391.662 349.208 391.606 cv
349.208 390.354 li
349.208 388.87 348.795 387.747 347.97 386.986 cv
347.144 386.226 345.924 385.846 344.31 385.846 cv
342.529 385.846 341.124 386.193 340.093 386.889 cv
339.064 387.585 338.438 388.61 338.215 389.965 cv
330.227 389.102 li
330.913 386.226 332.477 384.055 334.917 382.589 cv
337.356 381.123 340.636 380.391 344.755 380.391 cv
349.32 380.391 352.599 381.281 354.594 383.063 cv
356.588 384.844 357.586 387.766 357.586 391.829 cv
357.586 404.826 li
357.586 406.126 357.656 407.234 357.794 408.152 cv
357.934 409.071 358.152 409.846 358.449 410.477 cv
349.96 410.477 li
cp
f
364.572 410.699 mo
364.572 401.766 li
373.813 401.766 li
373.813 409.836 li
368.357 419.939 li
364.349 419.939 li
368.691 410.699 li
364.572 410.699 li
cp
f
18.0352 444.202 mo
11.1885 444.202 li
11.1885 454.472 li
17.9795 454.472 li
20.1318 454.472 21.7876 454.018 22.9478 453.108 cv
24.1069 452.199 24.687 450.909 24.687 449.239 cv
24.687 447.589 24.1206 446.336 22.9893 445.482 cv
21.8574 444.629 20.2061 444.202 18.0352 444.202 cv
cp
2.00391 477.044 mo
2.00391 437.495 li
19.1763 437.495 li
24.1484 437.495 27.8877 438.445 30.3926 440.348 cv
32.8975 442.25 34.1499 445.093 34.1499 448.878 cv
34.1499 451.457 33.5557 453.633 32.3687 455.404 cv
31.1812 457.177 29.4185 458.499 27.0806 459.37 cv
34.5674 477.044 li
24.7427 477.044 li
18.2021 461.097 li
11.1885 461.097 li
11.1885 477.044 li
2.00391 477.044 li
cp
f
51.1831 471.923 mo
53.0381 471.923 54.4536 471.106 55.4272 469.474 cv
56.4019 467.841 56.8887 465.484 56.8887 462.404 cv
56.8887 459.306 56.397 456.936 55.4136 455.293 cv
54.4297 453.651 53.02 452.83 51.1831 452.83 cv
49.3276 452.83 47.9219 453.638 46.9663 455.251 cv
46.0107 456.866 45.5332 459.25 45.5332 462.404 cv
45.5332 465.54 46.0063 467.911 46.9526 469.516 cv
47.8989 471.12 49.3086 471.923 51.1831 471.923 cv
cp
51.1831 477.851 mo
46.7671 477.851 43.1997 476.432 40.4819 473.593 cv
37.7632 470.754 36.4043 467.024 36.4043 462.404 cv
36.4043 457.766 37.7583 454.031 40.4678 451.202 cv
43.1768 448.373 46.748 446.958 51.1831 446.958 cv
55.6362 446.958 59.2168 448.373 61.9263 451.202 cv
64.6353 454.031 65.9897 457.766 65.9897 462.404 cv
65.9897 467.043 64.6353 470.777 61.9263 473.606 cv
59.2168 476.437 55.6362 477.851 51.1831 477.851 cv
cp
f
79.1265 465.938 mo
79.1265 467.795 79.5581 469.247 80.4204 470.295 cv
81.2837 471.343 82.4844 471.867 84.0249 471.867 cv
85.7686 471.867 87.0957 471.088 88.0049 469.529 cv
88.9136 467.971 89.3687 465.688 89.3687 462.683 cv
89.3687 459.324 88.9326 456.852 88.0605 455.266 cv
87.188 453.679 85.8242 452.886 83.9692 452.886 cv
82.5957 452.886 81.4458 453.41 80.5181 454.458 cv
79.5898 455.507 79.1265 456.838 79.1265 458.452 cv
79.1265 465.938 li
cp
70.6377 477.155 mo
70.6377 437.495 li
79.1265 437.495 li
79.1265 451.8 li
79.7759 450.316 80.8384 449.138 82.313 448.266 cv
83.7886 447.394 85.4443 446.958 87.2813 446.958 cv
90.5835 446.958 93.2695 448.335 95.3384 451.091 cv
97.4072 453.846 98.4419 457.46 98.4419 461.931 cv
98.4419 466.663 97.3101 470.48 95.0464 473.384 cv
92.7822 476.288 89.832 477.739 86.1958 477.739 cv
84.3213 477.739 82.6006 477.299 81.0327 476.418 cv
79.4648 475.537 78.0869 474.242 76.8999 472.535 cv
75.23 477.155 li
70.6377 477.155 li
cp
f
116.505 471.923 mo
118.36 471.923 119.775 471.106 120.749 469.474 cv
121.724 467.841 122.21 465.484 122.21 462.404 cv
122.21 459.306 121.719 456.936 120.735 455.293 cv
119.751 453.651 118.342 452.83 116.505 452.83 cv
114.649 452.83 113.244 453.638 112.288 455.251 cv
111.333 456.866 110.855 459.25 110.855 462.404 cv
110.855 465.54 111.328 467.911 112.274 469.516 cv
113.221 471.12 114.63 471.923 116.505 471.923 cv
cp
116.505 477.851 mo
112.089 477.851 108.521 476.432 105.804 473.593 cv
103.085 470.754 101.726 467.024 101.726 462.404 cv
101.726 457.766 103.08 454.031 105.79 451.202 cv
108.499 448.373 112.07 446.958 116.505 446.958 cv
120.958 446.958 124.539 448.373 127.248 451.202 cv
129.957 454.031 131.312 457.766 131.312 462.404 cv
131.312 467.043 129.957 470.777 127.248 473.606 cv
124.539 476.437 120.958 477.851 116.505 477.851 cv
cp
f
137.657 467.525 mo
137.657 453.442 li
132.926 453.442 li
132.926 447.737 li
137.88 447.737 li
138.353 439.582 li
146.146 439.081 li
146.146 447.737 li
152.241 447.737 li
152.241 453.442 li
146.146 453.442 li
146.146 466.606 li
146.146 468.426 146.401 469.65 146.911 470.28 cv
147.421 470.912 148.345 471.228 149.681 471.228 cv
150.182 471.228 150.696 471.195 151.226 471.13 cv
151.754 471.064 152.297 470.968 152.854 470.837 cv
152.881 477.211 li
151.879 477.415 150.905 477.573 149.959 477.685 cv
149.013 477.796 148.122 477.851 147.287 477.851 cv
143.892 477.851 141.438 477.04 139.926 475.416 cv
138.413 473.792 137.657 471.162 137.657 467.525 cv
cp
f
157.056 477.044 mo
157.056 447.737 li
165.823 447.737 li
165.823 477.044 li
157.056 477.044 li
cp
157.056 443.979 mo
157.056 437.495 li
165.823 437.495 li
165.823 443.979 li
157.056 443.979 li
cp
f
189.954 458.87 mo
189.693 456.978 189.142 455.507 188.297 454.458 cv
187.453 453.41 186.409 452.886 185.167 452.886 cv
183.385 452.886 182.036 453.684 181.117 455.279 cv
180.199 456.875 179.739 459.231 179.739 462.349 cv
179.739 465.41 180.208 467.762 181.145 469.404 cv
182.082 471.046 183.422 471.867 185.167 471.867 cv
186.54 471.867 187.676 471.334 188.576 470.267 cv
189.476 469.2 190.027 467.739 190.232 465.884 cv
197.691 466.718 li
197.301 470.114 195.928 472.818 193.572 474.831 cv
191.215 476.845 188.256 477.851 184.693 477.851 cv
180.537 477.851 177.151 476.423 174.535 473.565 cv
171.918 470.708 170.61 467.006 170.61 462.46 cv
170.61 457.784 171.956 454.031 174.646 451.202 cv
177.336 448.373 180.898 446.958 185.333 446.958 cv
188.71 446.958 191.494 447.941 193.683 449.907 cv
195.872 451.875 197.208 454.593 197.691 458.063 cv
189.954 458.87 li
cp
f
220.263 462.683 mo
216.774 462.738 214.107 463.249 212.261 464.214 cv
210.415 465.179 209.492 466.552 209.492 468.333 cv
209.492 469.539 209.881 470.476 210.661 471.144 cv
211.44 471.812 212.535 472.146 213.945 472.146 cv
215.744 472.146 217.247 471.501 218.454 470.211 cv
219.66 468.922 220.263 467.284 220.263 465.299 cv
220.263 462.683 li
cp
221.014 477.044 mo
220.847 476.395 220.717 475.685 220.625 474.915 cv
220.531 474.146 220.467 473.286 220.43 472.341 cv
219.428 474.104 218.101 475.453 216.45 476.39 cv
214.798 477.326 212.896 477.796 210.744 477.796 cv
207.589 477.796 205.089 476.988 203.243 475.374 cv
201.397 473.76 200.474 471.58 200.474 468.833 cv
200.474 465.364 202.139 462.734 205.47 460.943 cv
208.8 459.152 213.731 458.229 220.263 458.174 cv
220.263 456.921 li
220.263 455.438 219.85 454.314 219.024 453.554 cv
218.198 452.793 216.979 452.413 215.364 452.413 cv
213.583 452.413 212.178 452.761 211.147 453.456 cv
210.118 454.152 209.492 455.178 209.269 456.532 cv
201.281 455.669 li
201.967 452.793 203.531 450.622 205.971 449.156 cv
208.411 447.69 211.69 446.958 215.81 446.958 cv
220.374 446.958 223.653 447.849 225.648 449.63 cv
227.643 451.411 228.64 454.333 228.64 458.396 cv
228.64 471.394 li
228.64 472.693 228.71 473.802 228.849 474.72 cv
228.988 475.639 229.206 476.413 229.503 477.044 cv
221.014 477.044 li
cp
f
259.701 459.093 mo
271.334 459.064 li
271.297 456.968 270.778 455.354 269.776 454.222 cv
268.774 453.09 267.354 452.524 265.518 452.524 cv
263.792 452.524 262.418 453.104 261.398 454.264 cv
260.378 455.423 259.812 457.032 259.701 459.093 cv
cp
280.046 468.082 mo
279.081 471.199 277.341 473.606 274.827 475.305 cv
272.313 477.002 269.247 477.851 265.629 477.851 cv
261.083 477.851 257.418 476.441 254.635 473.62 cv
251.852 470.801 250.46 467.08 250.46 462.46 cv
250.46 457.933 251.917 454.218 254.83 451.313 cv
257.743 448.409 261.472 446.958 266.019 446.958 cv
270.434 446.958 273.904 448.354 276.428 451.146 cv
278.951 453.939 280.213 457.784 280.213 462.683 cv
280.213 463.88 li
259.589 463.88 li
259.589 466.422 260.141 468.379 261.245 469.752 cv
262.349 471.125 263.921 471.812 265.963 471.812 cv
267.41 471.812 268.644 471.427 269.665 470.656 cv
270.685 469.887 271.39 468.806 271.78 467.414 cv
280.046 468.082 li
cp
f
2.05957 543.61 mo
2.05957 504.062 li
11.4668 504.062 li
11.4668 543.61 li
2.05957 543.61 li
cp
f
18.5918 543.61 mo
18.5918 514.304 li
26.4404 514.304 li
26.4404 518.979 li
27.3867 517.198 28.6016 515.844 30.0864 514.915 cv
31.5708 513.988 33.2871 513.524 35.2354 513.524 cv
38.4639 513.524 40.8574 514.429 42.416 516.237 cv
43.9746 518.047 44.7539 520.844 44.7539 524.629 cv
44.7539 543.61 li
36.2651 543.61 li
36.2651 525.186 li
36.2651 523.386 35.9312 522.026 35.2632 521.108 cv
34.5952 520.189 33.5933 519.73 32.2573 519.73 cv
30.6987 519.73 29.4365 520.334 28.4722 521.54 cv
27.5073 522.746 27.0249 524.342 27.0249 526.327 cv
27.0249 543.61 li
18.5918 543.61 li
cp
f
63.5405 518.366 mo
62.1113 518.366 60.9565 518.812 60.0752 519.702 cv
59.1938 520.593 58.7534 521.763 58.7534 523.21 cv
58.7534 524.712 59.1802 525.896 60.0337 526.758 cv
60.8867 527.621 62.0557 528.052 63.5405 528.052 cv
65.0435 528.052 66.2168 527.621 67.0615 526.758 cv
67.9053 525.896 68.3276 524.712 68.3276 523.21 cv
68.3276 521.744 67.8916 520.57 67.0195 519.688 cv
66.147 518.808 64.9878 518.366 63.5405 518.366 cv
cp
57.5566 542.692 mo
56.9258 543.026 56.4478 543.435 56.123 543.917 cv
55.7983 544.398 55.6362 544.946 55.6362 545.559 cv
55.6362 546.802 56.3184 547.711 57.6816 548.286 cv
59.0459 548.861 61.2305 549.149 64.2363 549.149 cv
67.001 549.149 68.9629 548.889 70.123 548.37 cv
71.2822 547.85 71.8623 547.006 71.8623 545.837 cv
71.8623 545.058 71.5327 544.459 70.874 544.042 cv
70.2153 543.624 69.1807 543.369 67.771 543.276 cv
57.5566 542.692 li
cp
54.9961 530.335 mo
53.5303 529.537 52.4121 528.539 51.6426 527.343 cv
50.8721 526.146 50.4873 524.806 50.4873 523.321 cv
50.4873 520.464 51.6699 518.144 54.0361 516.362 cv
56.4014 514.581 59.5142 513.69 63.3735 513.69 cv
64.4312 513.69 65.4609 513.779 66.4629 513.955 cv
67.4648 514.132 68.4482 514.405 69.4131 514.776 cv
69.6538 512.661 70.3496 511.094 71.5005 510.073 cv
72.6509 509.053 74.3115 508.542 76.4824 508.542 cv
76.8345 508.542 77.54 508.569 78.5977 508.626 cv
78.9131 508.645 79.1636 508.663 79.3491 508.681 cv
79.1543 514.721 li
79.0801 514.702 78.9775 514.692 78.8481 514.692 cv
78.0313 514.638 77.4565 514.609 77.1226 514.609 cv
75.9536 514.609 75.0723 514.772 74.4785 515.097 cv
73.8843 515.421 73.4946 515.955 73.3096 516.696 cv
74.3296 517.698 75.0952 518.757 75.6055 519.87 cv
76.1157 520.983 76.3711 522.151 76.3711 523.376 cv
76.3711 526.253 75.2671 528.521 73.0591 530.182 cv
70.8506 531.842 67.8169 532.673 63.958 532.673 cv
63.0488 532.673 62.2188 532.636 61.4668 532.562 cv
60.7158 532.487 60.0239 532.366 59.3936 532.199 cv
58.7813 532.459 58.3223 532.761 58.0156 533.104 cv
57.71 533.447 57.5566 533.832 57.5566 534.259 cv
57.5566 534.945 57.793 535.465 58.2666 535.817 cv
58.7393 536.17 59.4771 536.374 60.479 536.43 cv
69.4131 536.819 li
72.5674 536.968 75.0581 537.775 76.8857 539.241 cv
78.7134 540.707 79.6274 542.618 79.6274 544.974 cv
79.6274 547.868 78.2959 550.113 75.6338 551.71 cv
72.9707 553.305 69.2085 554.103 64.3477 554.103 cv
58.874 554.103 54.8154 553.477 52.1709 552.225 cv
49.5273 550.972 48.2051 549.047 48.2051 546.449 cv
48.2051 545.15 48.5991 544.004 49.3877 543.012 cv
50.1763 542.02 51.2666 541.291 52.6582 540.827 cv
51.73 540.308 51.0254 539.672 50.543 538.921 cv
50.0601 538.169 49.8193 537.32 49.8193 536.374 cv
49.8193 534.945 50.2461 533.729 51.0996 532.728 cv
51.9526 531.726 53.252 530.929 54.9961 530.335 cv
cp
f
90.1758 525.659 mo
101.81 525.631 li
101.772 523.534 101.253 521.92 100.251 520.788 cv
99.249 519.656 97.8296 519.091 95.9927 519.091 cv
94.2671 519.091 92.8936 519.671 91.8735 520.83 cv
90.853 521.989 90.2871 523.599 90.1758 525.659 cv
cp
110.521 534.648 mo
109.556 537.766 107.816 540.173 105.302 541.871 cv
102.788 543.568 99.7222 544.417 96.104 544.417 cv
91.5576 544.417 87.8936 543.008 85.1104 540.187 cv
82.3271 537.367 80.9355 533.646 80.9355 529.026 cv
80.9355 524.499 82.3921 520.784 85.3052 517.88 cv
88.2178 514.976 91.9473 513.524 96.4937 513.524 cv
100.909 513.524 104.379 514.92 106.903 517.713 cv
109.426 520.506 110.688 524.351 110.688 529.249 cv
110.688 530.446 li
90.0645 530.446 li
90.0645 532.988 90.6162 534.945 91.7202 536.318 cv
92.8242 537.691 94.3965 538.378 96.438 538.378 cv
97.8853 538.378 99.1191 537.993 100.14 537.223 cv
101.16 536.453 101.865 535.372 102.255 533.98 cv
110.521 534.648 li
cp
f
128.194 518.366 mo
126.765 518.366 125.61 518.812 124.729 519.702 cv
123.848 520.593 123.407 521.763 123.407 523.21 cv
123.407 524.712 123.834 525.896 124.688 526.758 cv
125.541 527.621 126.709 528.052 128.194 528.052 cv
129.697 528.052 130.871 527.621 131.715 526.758 cv
132.559 525.896 132.981 524.712 132.981 523.21 cv
132.981 521.744 132.545 520.57 131.673 519.688 cv
130.801 518.808 129.642 518.366 128.194 518.366 cv
cp
122.21 542.692 mo
121.58 543.026 121.102 543.435 120.777 543.917 cv
120.452 544.398 120.29 544.946 120.29 545.559 cv
120.29 546.802 120.972 547.711 122.335 548.286 cv
123.7 548.861 125.884 549.149 128.89 549.149 cv
131.655 549.149 133.617 548.889 134.777 548.37 cv
135.936 547.85 136.516 547.006 136.516 545.837 cv
136.516 545.058 136.187 544.459 135.528 544.042 cv
134.869 543.624 133.834 543.369 132.425 543.276 cv
122.21 542.692 li
cp
119.65 530.335 mo
118.184 529.537 117.066 528.539 116.296 527.343 cv
115.526 526.146 115.141 524.806 115.141 523.321 cv
115.141 520.464 116.324 518.144 118.69 516.362 cv
121.055 514.581 124.168 513.69 128.027 513.69 cv
129.085 513.69 130.115 513.779 131.117 513.955 cv
132.119 514.132 133.102 514.405 134.067 514.776 cv
134.308 512.661 135.003 511.094 136.154 510.073 cv
137.305 509.053 138.965 508.542 141.136 508.542 cv
141.488 508.542 142.194 508.569 143.251 508.626 cv
143.567 508.645 143.817 508.663 144.003 508.681 cv
143.808 514.721 li
143.734 514.702 143.631 514.692 143.502 514.692 cv
142.685 514.638 142.11 514.609 141.776 514.609 cv
140.607 514.609 139.726 514.772 139.132 515.097 cv
138.538 515.421 138.148 515.955 137.963 516.696 cv
138.983 517.698 139.749 518.757 140.259 519.87 cv
140.77 520.983 141.025 522.151 141.025 523.376 cv
141.025 526.253 139.921 528.521 137.713 530.182 cv
135.504 531.842 132.471 532.673 128.612 532.673 cv
127.703 532.673 126.873 532.636 126.121 532.562 cv
125.37 532.487 124.678 532.366 124.047 532.199 cv
123.435 532.459 122.976 532.761 122.669 533.104 cv
122.364 533.447 122.21 533.832 122.21 534.259 cv
122.21 534.945 122.447 535.465 122.92 535.817 cv
123.393 536.17 124.131 536.374 125.133 536.43 cv
134.067 536.819 li
137.221 536.968 139.712 537.775 141.54 539.241 cv
143.367 540.707 144.281 542.618 144.281 544.974 cv
144.281 547.868 142.95 550.113 140.288 551.71 cv
137.625 553.305 133.862 554.103 129.001 554.103 cv
123.528 554.103 119.469 553.477 116.825 552.225 cv
114.181 550.972 112.859 549.047 112.859 546.449 cv
112.859 545.15 113.253 544.004 114.042 543.012 cv
114.83 542.02 115.92 541.291 117.312 540.827 cv
116.384 540.308 115.679 539.672 115.197 538.921 cv
114.714 538.169 114.473 537.32 114.473 536.374 cv
114.473 534.945 114.9 533.729 115.753 532.728 cv
116.606 531.726 117.906 530.929 119.65 530.335 cv
cp
f
147.259 543.61 mo
147.259 514.304 li
155.108 514.304 li
155.108 518.979 li
156.054 517.198 157.269 515.844 158.754 514.915 cv
160.238 513.988 161.955 513.524 163.903 513.524 cv
167.131 513.524 169.525 514.429 171.083 516.237 cv
172.642 518.047 173.421 520.844 173.421 524.629 cv
173.421 543.61 li
164.933 543.61 li
164.933 525.186 li
164.933 523.386 164.599 522.026 163.931 521.108 cv
163.263 520.189 162.261 519.73 160.925 519.73 cv
159.366 519.73 158.104 520.334 157.14 521.54 cv
156.175 522.746 155.692 524.342 155.692 526.327 cv
155.692 543.61 li
147.259 543.61 li
cp
f
187.198 525.659 mo
198.832 525.631 li
198.794 523.534 198.275 521.92 197.273 520.788 cv
196.271 519.656 194.852 519.091 193.015 519.091 cv
191.29 519.091 189.916 519.671 188.896 520.83 cv
187.875 521.989 187.31 523.599 187.198 525.659 cv
cp
207.543 534.648 mo
206.579 537.766 204.839 540.173 202.325 541.871 cv
199.811 543.568 196.745 544.417 193.126 544.417 cv
188.58 544.417 184.916 543.008 182.133 540.187 cv
179.35 537.367 177.958 533.646 177.958 529.026 cv
177.958 524.499 179.415 520.784 182.328 517.88 cv
185.24 514.976 188.97 513.524 193.516 513.524 cv
197.932 513.524 201.402 514.92 203.925 517.713 cv
206.448 520.506 207.71 524.351 207.71 529.249 cv
207.71 530.446 li
187.087 530.446 li
187.087 532.988 187.639 534.945 188.743 536.318 cv
189.847 537.691 191.419 538.378 193.46 538.378 cv
194.908 538.378 196.142 537.993 197.162 537.223 cv
198.182 536.453 198.888 535.372 199.277 533.98 cv
207.543 534.648 li
cp
f
212.637 543.61 mo
212.637 514.304 li
220.207 514.304 li
220.207 520.481 li
220.875 518.107 221.872 516.354 223.199 515.222 cv
224.525 514.09 226.228 513.524 228.306 513.524 cv
228.491 513.524 228.853 513.543 229.392 513.579 cv
229.559 513.599 229.688 513.617 229.781 513.636 cv
229.781 521.54 li
229.744 521.54 229.698 521.54 229.642 521.54 cv
228.9 521.466 228.362 521.429 228.028 521.429 cv
225.857 521.429 224.164 522.12 222.949 523.502 cv
221.733 524.884 221.125 526.8 221.125 529.249 cv
221.125 543.61 li
212.637 543.61 li
cp
f
233.511 543.61 mo
233.511 514.304 li
242.278 514.304 li
242.278 543.61 li
233.511 543.61 li
cp
233.511 510.546 mo
233.511 504.062 li
242.278 504.062 li
242.278 510.546 li
233.511 510.546 li
cp
f
266.798 529.249 mo
263.309 529.305 260.642 529.815 258.796 530.78 cv
256.95 531.745 256.027 533.118 256.027 534.899 cv
256.027 536.105 256.417 537.042 257.196 537.71 cv
257.975 538.378 259.07 538.712 260.48 538.712 cv
262.279 538.712 263.782 538.067 264.989 536.777 cv
266.195 535.488 266.798 533.851 266.798 531.865 cv
266.798 529.249 li
cp
267.549 543.61 mo
267.382 542.961 267.252 542.251 267.16 541.481 cv
267.066 540.712 267.002 539.853 266.965 538.907 cv
265.963 540.67 264.636 542.02 262.985 542.956 cv
261.333 543.893 259.432 544.362 257.279 544.362 cv
254.125 544.362 251.625 543.555 249.778 541.94 cv
247.932 540.326 247.009 538.146 247.009 535.399 cv
247.009 531.931 248.674 529.301 252.005 527.51 cv
255.335 525.719 260.267 524.796 266.798 524.74 cv
266.798 523.487 li
266.798 522.004 266.385 520.881 265.56 520.12 cv
264.733 519.359 263.514 518.979 261.899 518.979 cv
260.118 518.979 258.713 519.327 257.683 520.022 cv
256.653 520.719 256.027 521.744 255.804 523.099 cv
247.816 522.235 li
248.502 519.359 250.066 517.188 252.506 515.723 cv
254.946 514.257 258.226 513.524 262.345 513.524 cv
266.909 513.524 270.188 514.415 272.184 516.196 cv
274.178 517.978 275.175 520.899 275.175 524.963 cv
275.175 537.96 li
275.175 539.26 275.245 540.368 275.384 541.286 cv
275.523 542.205 275.741 542.979 276.038 543.61 cv
267.549 543.61 li
cp
f
316.45 525.38 mo
316.45 523.525 316.009 522.092 315.128 521.08 cv
314.247 520.069 312.989 519.563 311.357 519.563 cv
309.705 519.563 308.439 520.366 307.558 521.971 cv
306.676 523.576 306.236 525.891 306.236 528.915 cv
306.236 531.995 306.671 534.311 307.544 535.859 cv
308.416 537.408 309.733 538.183 311.496 538.183 cv
312.906 538.183 314.084 537.617 315.031 536.485 cv
315.977 535.354 316.45 533.906 316.45 532.144 cv
316.45 525.38 li
cp
324.939 504.062 mo
324.939 543.61 li
316.951 543.61 li
316.896 539.102 li
315.931 540.827 314.771 542.136 313.417 543.026 cv
312.062 543.917 310.54 544.362 308.852 544.362 cv
305.271 544.362 302.427 542.989 300.321 540.243 cv
298.215 537.497 297.163 533.776 297.163 529.082 cv
297.163 524.388 298.225 520.631 300.35 517.81 cv
302.474 514.99 305.271 513.579 308.741 513.579 cv
310.281 513.579 311.686 513.913 312.957 514.581 cv
314.228 515.249 315.393 516.261 316.45 517.615 cv
316.45 504.062 li
324.939 504.062 li
cp
f
338.771 525.659 mo
350.405 525.631 li
350.368 523.534 349.849 521.92 348.847 520.788 cv
347.845 519.656 346.425 519.091 344.588 519.091 cv
342.863 519.091 341.489 519.671 340.469 520.83 cv
339.449 521.989 338.883 523.599 338.771 525.659 cv
cp
359.117 534.648 mo
358.152 537.766 356.412 540.173 353.898 541.871 cv
351.384 543.568 348.318 544.417 344.7 544.417 cv
340.153 544.417 336.489 543.008 333.706 540.187 cv
330.923 537.367 329.531 533.646 329.531 529.026 cv
329.531 524.499 330.988 520.784 333.901 517.88 cv
336.813 514.976 340.543 513.524 345.089 513.524 cv
349.505 513.524 352.975 514.92 355.499 517.713 cv
358.021 520.506 359.284 524.351 359.284 529.249 cv
359.284 530.446 li
338.66 530.446 li
338.66 532.988 339.212 534.945 340.316 536.318 cv
341.42 537.691 342.992 538.378 345.034 538.378 cv
346.481 538.378 347.715 537.993 348.735 537.223 cv
349.755 536.453 350.461 535.372 350.851 533.98 cv
359.117 534.648 li
cp
f
364.154 543.61 mo
364.154 514.304 li
372.922 514.304 li
372.922 543.61 li
364.154 543.61 li
cp
364.154 510.546 mo
364.154 504.062 li
372.922 504.062 li
372.922 510.546 li
364.154 510.546 li
cp
f
394.603 532.505 mo
403.203 530.835 li
403.76 532.858 404.826 534.412 406.403 535.497 cv
407.98 536.583 409.956 537.126 412.332 537.126 cv
414.187 537.126 415.695 536.704 416.854 535.859 cv
418.014 535.015 418.594 533.916 418.594 532.562 cv
418.594 530.465 416.107 528.767 411.135 527.468 cv
410.56 527.319 410.123 527.208 409.826 527.134 cv
409.622 527.078 409.335 527.004 408.964 526.911 cv
404.418 525.742 401.208 524.258 399.334 522.458 cv
398.406 521.586 397.701 520.565 397.219 519.396 cv
396.736 518.228 396.495 516.947 396.495 515.556 cv
396.495 511.9 397.914 508.928 400.754 506.636 cv
403.592 504.344 407.34 503.198 411.998 503.198 cv
415.727 503.198 418.887 504.043 421.475 505.731 cv
424.063 507.42 425.951 509.878 427.139 513.106 cv
419.234 515.277 li
418.604 513.57 417.652 512.281 416.381 511.409 cv
415.109 510.537 413.528 510.101 411.636 510.101 cv
409.892 510.101 408.477 510.504 407.391 511.312 cv
406.307 512.118 405.764 513.153 405.764 514.415 cv
405.764 516.308 408.063 517.848 412.666 519.034 cv
413.407 519.221 414.002 519.378 414.447 519.508 cv
414.613 519.545 414.873 519.61 415.227 519.702 cv
419.549 520.815 422.629 522.115 424.467 523.599 cv
425.672 524.583 426.582 525.761 427.193 527.134 cv
427.807 528.507 428.111 530.065 428.111 531.81 cv
428.111 535.446 426.59 538.447 423.547 540.813 cv
420.504 543.179 416.57 544.362 411.747 544.362 cv
407.313 544.362 403.592 543.318 400.586 541.23 cv
397.58 539.144 395.586 536.235 394.603 532.505 cv
cp
f
433.205 543.61 mo
433.205 514.304 li
441.973 514.304 li
441.973 543.61 li
433.205 543.61 li
cp
433.205 510.546 mo
433.205 504.062 li
441.973 504.062 li
441.973 510.546 li
433.205 510.546 li
cp
f
446.092 535.399 mo
453.217 534.426 li
453.588 535.78 454.391 536.824 455.625 537.557 cv
456.857 538.29 458.43 538.656 460.342 538.656 cv
461.881 538.656 463.111 538.364 464.029 537.779 cv
464.947 537.195 465.408 536.421 465.408 535.456 cv
465.408 534.046 463.783 533.062 460.537 532.505 cv
459.572 532.339 458.82 532.199 458.283 532.088 cv
454.33 531.327 451.52 530.242 449.85 528.831 cv
448.18 527.422 447.344 525.491 447.344 523.042 cv
447.344 520.186 448.48 517.875 450.754 516.112 cv
453.025 514.35 456.027 513.468 459.758 513.468 cv
462.912 513.468 465.541 514.113 467.648 515.402 cv
469.754 516.692 471.27 518.589 472.199 521.095 cv
465.297 522.347 li
464.795 521.215 464.072 520.38 463.125 519.842 cv
462.18 519.304 460.945 519.034 459.424 519.034 cv
457.994 519.034 456.904 519.285 456.152 519.786 cv
455.402 520.287 455.025 521.011 455.025 521.957 cv
455.025 523.33 456.863 524.342 460.537 524.991 cv
461.799 525.214 462.791 525.399 463.516 525.548 cv
467.113 526.271 469.67 527.314 471.182 528.679 cv
472.695 530.042 473.451 531.921 473.451 534.314 cv
473.451 537.302 472.193 539.705 469.68 541.522 cv
467.164 543.342 463.803 544.251 459.59 544.251 cv
456.084 544.251 453.133 543.467 450.74 541.898 cv
448.346 540.331 446.797 538.165 446.092 535.399 cv
cp
f
479.547 534.092 mo
479.547 520.009 li
474.814 520.009 li
474.814 514.304 li
479.77 514.304 li
480.242 506.148 li
488.035 505.647 li
488.035 514.304 li
494.131 514.304 li
494.131 520.009 li
488.035 520.009 li
488.035 533.173 li
488.035 534.992 488.289 536.217 488.801 536.847 cv
489.311 537.479 490.234 537.794 491.57 537.794 cv
492.07 537.794 492.586 537.762 493.115 537.696 cv
493.643 537.631 494.186 537.534 494.742 537.403 cv
494.77 543.777 li
493.768 543.981 492.795 544.14 491.848 544.251 cv
490.902 544.362 490.012 544.417 489.176 544.417 cv
485.781 544.417 483.326 543.606 481.814 541.982 cv
480.303 540.358 479.547 537.729 479.547 534.092 cv
cp
f
506.57 525.659 mo
518.205 525.631 li
518.168 523.534 517.648 521.92 516.646 520.788 cv
515.645 519.656 514.225 519.091 512.389 519.091 cv
510.662 519.091 509.289 519.671 508.27 520.83 cv
507.248 521.989 506.682 523.599 506.57 525.659 cv
cp
526.916 534.648 mo
525.951 537.766 524.213 540.173 521.697 541.871 cv
519.184 543.568 516.117 544.417 512.5 544.417 cv
507.953 544.417 504.289 543.008 501.506 540.187 cv
498.723 537.367 497.33 533.646 497.33 529.026 cv
497.33 524.499 498.787 520.784 501.701 517.88 cv
504.613 514.976 508.344 513.524 512.889 513.524 cv
517.305 513.524 520.775 514.92 523.299 517.713 cv
525.822 520.506 527.084 524.351 527.084 529.249 cv
527.084 530.446 li
506.459 530.446 li
506.459 532.988 507.012 534.945 508.115 536.318 cv
509.219 537.691 510.793 538.378 512.834 538.378 cv
514.281 538.378 515.514 537.993 516.535 537.223 cv
517.555 536.453 518.26 535.372 518.65 533.98 cv
526.916 534.648 li
cp
f
556.389 518.7 mo
557.502 516.994 558.807 515.723 560.301 514.888 cv
561.793 514.053 563.514 513.636 565.463 513.636 cv
568.375 513.636 570.584 514.466 572.086 516.126 cv
573.59 517.787 574.342 520.223 574.342 523.433 cv
574.342 543.61 li
565.963 543.61 li
565.963 524.796 li
565.963 523.274 565.645 522.097 565.004 521.261 cv
564.363 520.427 563.449 520.009 562.262 520.009 cv
560.777 520.009 559.572 520.598 558.645 521.776 cv
557.717 522.955 557.252 524.518 557.252 526.466 cv
557.252 543.61 li
548.875 543.61 li
548.875 524.907 li
548.875 523.293 548.568 522.073 547.957 521.247 cv
547.344 520.422 546.436 520.009 545.229 520.009 cv
543.801 520.009 542.637 520.557 541.736 521.651 cv
540.836 522.746 540.387 524.175 540.387 525.937 cv
540.387 543.61 li
532.008 543.61 li
532.008 514.304 li
539.801 514.304 li
539.801 518.757 li
540.803 517.068 542.004 515.792 543.406 514.93 cv
544.807 514.066 546.398 513.636 548.18 513.636 cv
550.201 513.636 551.885 514.049 553.23 514.874 cv
554.576 515.699 555.629 516.976 556.389 518.7 cv
cp
f
580.521 543.61 mo
580.521 514.304 li
589.287 514.304 li
589.287 543.61 li
580.521 543.61 li
cp
580.521 510.546 mo
580.521 504.062 li
589.287 504.062 li
589.287 510.546 li
580.521 510.546 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.1%%For: (PowerMac G5) ()%%Title: (Dibris con dicitura RGB.eps)%%CreationDate: 12/1/14 4:32 PM%AI9_DataStream%Gb"-6M..F5d/a*Z!8h56HuA9rVY:)aLm,2.7)uDL]9\X-9i?1(;Dr<J<-]a/T'1Zbs2FsT$jOL"=5qZ5/Q,`fQH15P)9`OtH0\LT%^7L<2ZPVHnYFg(ao7Fo=7Gu95Cu)\qe`>t>=fTjZZ9U[_G*lkBeFhS1J9E[Sg//X(d&K;PY0Y.peW[t"3*n4aoBCY-r64K?c=c"/%quqJ2Hf'm^e+kY'GFB%L[;L+.b3+E!F?GpDcL[<f[=*]3iUcJ`1*(eV5!L&@@-g^@UZ\YtDjJ`boSTgYr,=QaY".M"d-#ZGn/OVu%iWmSHp%i43=ofBmOT=P=oKh*"hIiF`b3^:BNaGJGX2Y"744NN$nbL-\?]>Bh0PF*4bi3f/85X]6lN8'*D@hM=+ACeN9uD,mL67ht%=^+:^oTC>3b;@>>KdG@GkK3Lcc[\L&a_WhA^*H+=9SPs/c=1oOq$h:<7F4fY/G3O#gL2:9qY]T(3aR1iS#cT[24KOcGVgM%V[@:s%b@$b`*=1cBrh^%Ko#6OW$5S(S?*>UH)3!bEO'j8oo@N$A;YQJ?Is`uB4e$r%k'^;6JX=A*:'il_.$,c^i;92aUhYE."-Vp-!X6tm%_HsGWmQ?%8H3.mUGVOIuR=1s1Q99Z$R#LAm-D?dS0/`WMlMT!'5>;eF?EM4'4`+T.hBUd9n$aC0ciDBu!jBl>$'HflIRE!c@4khn%MHN/Njg_BXP'UJpJ+^CV=3+c5r'V.rNar!XAb`mh@qZS8h^H?;UBj)D,5QC8^t.!bNj2V)j1@:j>&fM/icm085-k[`A/Wt?i!3J!%):lqcXG*kI2qI9eYZ@r_/UKYYUt<LFK)pE^(rS/;*XqQ0_1:7dN+p!_*u^8*`KpFI'X_i;DleXPiGYfO3&.<&).J96Ymt5r^CbC]%"LU[gn2J'KN:8e"7!,/p&L745GiN.a,#1*E;3T#?>)4!o`]A_Q_K^KJk!W^R,#JYr;bOutAl!KG\^BV#F'^)o5sJHZn\a8:'<NBc%9qTgjiEr[?q!e\)<N%M/LVN@"@RoaF^M2g9_;A?&n\a7kMSpf/<uN/NA0/OS1]Qs5dJSgc=GuC_F<SkBp,I,^(QD'No6O7CrkUXO%*HNQ:LTLkuq@rJ;hcPg3)t>/A:g<jWFV)19/`pl8*MOO55hsUHbe1gJL,12P+^SQei&)gle*MnU1bR/bB?i$E\C'*:(6;5(;g\A2%IV@jhRDd@Wk!U0R@A&(*J$$(VS(90W<\%<H-d2D*h9>VZs0/om+dR5^b"QBY%QG]1,dt/2i48E+H!KX$=pBP]Idf")`BaHV+ami"%dZ4t3hYs@Deh&<W@fOkPP0eRQQ[[AIhPVf`Sa)hBLH_tml)3:4p\$9=Zu5R6"L3I@kNI`YgV<C@Rig)A\9@Y:es5+`48K?[Kq]r*%<t9OY]"\0EhY/4oea!dJ/)aJm&;*7r*VB:E=/M0.IJf.[?4Zm@O(neH2"(6-onT_MHQQSgU)q[iX2jJuTWV(=@=^Irl9YBh*d#.7%6E!rN(=ikdSs_\4iiC`F(2BqbSuYi(G'FF3D0rW,5``1<1X7K.r`/DMoi]M@rJ[ttFs4PZl'"A14.M/m-a`gPebXaH@Z,`l\_3D@%Vs_c:?$U=t3Yq;sO)J?+bc>lEB4g@fROFp)MIISE([ERk4*D\'R,H1\2&qKFh-Yro1S1r`$?)A3f<"D[$6j[/hPWaX*1LmYZEQY^%c!S.cgmPYl,;ch_[aRIe:VDf@:K@*AH00pDmTj6Eb%j]>BdOGd9Y>OOcWm)T;XU#dDJJpi4CYoPV4OMf(L&DiaJur^4WE)C+nqr.%;<pAarYmKOEIG[Qdp/ErqPLZ`GcmkgH;NhUE/7GJptWsj-4NL)R<c;i0/TR:=JE#iHmM-c>L*QIN.MHX)&_Y+o4O`Zb5JiR2e`Sa%2DT?,?7k:;XMelV9srWr^>cQEiSagd`,]Obc\1'4CXgG6pM.jM^N!-*&ET#94I1o7UQPG^L06N&38iHWXE;(5B='*>XEP5QW>=7a%Ded6HKZE>Q/7Y!\MUZ\>.((5S6s(k+=7b&jPX6qs*OU&NMr1R4K]Se_hI9eGSkg(kRJCqsCZ"+%c3Rtf/PssBJ[rbl'cV&WC?_\H%.$c>`T=ae$><DIc?\.)VPqB4%5IRONp/N#'EGABTeM>uef<Y#%Y`*9i#:48G$bRcfqTII*BPm"V?\(Fp3t(5b+J6c,%*BQ`g1Q/0%'b-QLkVI'Z%R7Kja4NCCnsP:D%UB9M\Lk1SXL0pp30\CW@4N',\&;;kMA.IR1DsX@P"j@B`X43]D0SFrqHT^9PUB)W_:5F!^VEET%;<P0$WRRu/pRtV3/^o9MAgpS#*LH:_B"19,A&D+-%?02>q:*K\jmu2\?n,Ee#20]j'he1VOVTA@B!2/<ecDimC>g%GNL[7Z-;.=X%f3.dl<RU>^fL>ThcClfdlm#a'gf`ltFHDN@2Z.^;?cuR'Tn[%jMK+YlSVU@(f*ZbX2PTI08j+,>&QT8-o"<s4UcgWEVak&h!Fq'k%@Q4"[^t8?eQWq;k0jP1B<IUt<$j*<5)Rk4(8"`p7[9AW-gD1ZfXmZOt48,5-A7W/?Bcj>*ql!]9Bfe5Witc9I2;ab-KD"=G3U:g\%7/B,:/d$LQePV=ga'Kou7U"R@f&(Y`8t*;U:KL:PBp#`DgOaWV*ef$Z@R#O*RT#P_$frU3:;QDm/9S)G=7oL@mB/D6[/uun9(Y$T%kcp,mjjjtHK`oBHQpY=u4&@[2A\S>ukL.dY8&5\ce9c%TUOh_3WRdM>:nu]h.Ytutd?17R;j"/4V7.C<Pp7fFL&q*)K20Rkla8<7%Cd`>%1M<iG<A/D1o7r>W<3/K4P]K<j=Me2of&nY+1jp"SBkA,S-h\mP+!ETR[@ct/BWU3?DTfe[52Z-7L=E+0Bls5Yc-9o<>&W/a%B4>:-HFBG#7l]:552j8BlC4p/?aFnBk<-M[BLhCU6Hc!%;3,;'W\saaD5o:qe?aEh)ej1fcfI4^1T$U&UZ,BnCYOc4Yp)r^[3t5K%*5C.QJuq7WEpV5tlISeroMq-*c9$h+/SuLi&'SR_>Y\gLdTJ'%!U28kdZ2GP(`DcMA,-cI;76UH834_Y7]0GGh[^sf94Vc)fM?9U%93+(:1N-H3$D0+C"[-71LTs@n+n"\F*jZF$T.Uj&;=G`fNqOc?Wn!K&T8G\M8gXMHg7^&jjd&#AX6U&2E='iCFD#8E:k>3l351dO%+M,(gC3uuG(L+LlDmNUEI^;P3A`-0PJWi%T=fiXq&s^#B8hUm'a/NkI\^bhVolK7udb#oG/o%_eNj(Xa1pF#p23Vf)N4%?cMfuc?%DqFR-4=`9fJXThrf"6g2<P"ts9p9M+Up`@CZGpJ3'!dQFM\Ou:c_@UF>k9GW9)?g'4&O8a9pb:N<`HZpBOL`ok4>;WEW<WLYF@Uq%=3Q@4f?3cMMES:00@nQ'qoKG2CgW=um=ppj[?o(sktERJ2uKKX,[o$9C2<2uR$c-H'f`pFPa+BAX]Gbo[hLtmMhOe[=/-LA9TLc_%>.qQMY.`f,")I61q`?4t'%oV6))kbuY3j)C.kBpd9";W6003!Mq9G71X-ooI%CrY6@4\lifr3>jAU,lMD..6j:H%H=Pk=P!erq[h%$nHP@c`Ec(>)]1Tg<kcj9X?![^`9lK+Vgue8X#m5\/`IgXZX>@Zc1STP*O_)c9+<0]5/qPFY;*qAja1,3-2!oQBLNVS(<blk#tei%K)Q]'4TLD*l]G<H?03Q,WB6QlHSi0(`U__D3ii0[@7_NKU+?,`L%TWV^WRGcb3%<[AIrn.U??-53njH^E,Im"U9UEcOl6t[hk=f3%W*1-=*+s&L/IAfY/*Sm@Yhlmnf8_S+f*a`XfsMf%p'lnH(2Xg[8XV23iuA$RGkOS?B,b$]nnp%cFufhOD7Rb&D<r#mDF.ILb-L1+%/[f<$p8.sr9gEtm<uO)KD]osQ%*\]fETUhlB;MS"WpD:(C5t,!Roe#?:(62U<)LXn[84'9.ks/Ll_h>S>Q-)"]guKhU+0(;.fA\X%$[R+q`h2@WBj]@*g1PHc=GKfZ"",a$ZkA=AKsg'u4e5q.H#'SW@/'Vj3=_G!DTtn:XmG^_l#JpDqV?3nKf-%,1^=N(gq@uS#/\Nf%ePkh4E_b!Rd'Mce*=^F_M6i\Ea0m%kFLfZTBqlF=*#H#k.qS%Y.qdt!Bum>gAZXP,XEA![\t4JpN`g7>5.C=0%;msPB'i]_VIcl1%ek+Y\Wtif=i@9979":.LW__kBH'b]6`HYNM[;)f6)D^2j:RmDUNT&$Z4""ggc2&.J/6iXkl+n'^&H9nuOB#ft2EWqHhl^99;iQ)P%o]DamEV,'`\LZ94Ihu1\Ud(EOUg98Fm+lhY\Y<]9U/Q%8m!<R=\^B>9hj;B(Fb5ldk:DnNS@q#5U.o&(>b+l:V2eW@26*K/BuQgk%[8aKHN2n1>52>.'jGU%cMKo^_-,nNd>)hOa1S<>X2-J&;jm2>Z4p)T_l_iH4b:E$pC.!9(<,?`\..pVUbO(3CD`(IY7(QKef7WIX%V2hZ`[eQ?^Re>:T<k(\?<sogQ0$Tqa9,>XP\^g/YriKBn46cHEKXl9N=p$9TCbH.Fm1e/D6Xrc1(ERcm)T[.*()$Lto<"e@#VY;d%X5<aoDc&+^]$?MYHocaCT:+<rPEYNOI6e[1eGJE9c_:&CL=^u[?`QuNk>.sjpuoP'^:nhO4.E]sG=M2QZ1fMN^%AnbnSGSFj5%^I%G:,2-5!)t%-hH!ohue;eN@)"0Hnp(0DWd4A4'-V'Ck9(0??hN,s#V:)TT?"7@6P^WiRO_!BK_o5$Nb/5l=>^;SJGOUZ!P0:T$?Fs%B<"bIZPhW5K=RQ#KZESF0S!mcX+e-D2YSh?`=E4Q;<mW?^k6@8J@/5r,5Lc2,2q3s]Nj#2g$A7Yq/io)a-fWNCHF=u^V,gY$N&N:%))4\t&ZDG?n:FhCURs1NrBT`>^n&GZqk-`$^T5Is2,QJaLr8rWl#cK*O^Gbk%')lVSITem1Dk9CQOe-W?Z`Fh+)sH5bXN^Z-gSk]%HW!pV^#Ane@_Q+/AcSq``maj-^;te&;RZGkW#*BR%R:<na(Nc"Pp8caiU#b'F?NkC:pE8fO=>-I?@u+Qq(,lt$GO&YPLXE]aB<6>%=J5jQ,KT&@eQok:p[/b'?$P1noC7H%5+982Hj8nV[Q`$f&C\a;N(PA*e#J(I^))+O;<s"gk:O:.j@?rRV'#SkTD9MBlhC<%It79a%!YNKr$.9q(3^G^g"oVg?qI'qi@2+SqL2iT8=kF%m@5$u&rDn.W%O++EUF6aP*$nH#FeWd'Mu(gu1_>3D73mPJ+r6$V6q;>f:\;Vg%(eA!<16dn817!bjAL9LEf91Q-'`2k]LN+$O30'1^NO-,.GN3#bO,r9di[7#)-6eRDN&R\u$q_o3-9X'%8')nHdm00PNDe.r74QbG%KmG3)4RT"N.)!![*i4JtnBZ[p0Zp*uVO,C5`e+1fFWmuQFeSH55*R9?K+:_YeH+*?J-;FA"8HtGet';Q'2VF,[%U]-;"4B_^N0Nh%cl$qR<Ih#R+J/B:Zta`7-sbMc]79uYY,d<EW]nq_Xr`fkPb[Z>46XLqojD?W@5#KE;-7"/g9hC_lI,O+Aqg+sNIA4W&JSL7fW6s6%p5rNs>k+b(Q96TI3j!Y"f3IT@:SZ-:H!G^R=aRRQX\4se3XjB#4lcT'!$5N#&=O-PS8d!+b^f$k!CO@Jd4m2GR)6(]@LC?nZ/Q)L%$KR+O$eRd#7O;h@`>ZZ7*Q9!]`>hC63AbYBMDp&=>)G18`>$6'IDli;&Bk4Dl=XkVHZlg+X_i'#H$s[TBmo#n4R4kBksZ(4esKO,%fD2G3md$,J>-QY&WDiK)/FLIl[qj9iY1?m\4KNm&00Ln9H24it;!UpB!'(&Z><X0)@.hl\.<]*R+?dOlJP6Y)VI6i?`aI@_PsJ$[%E(:;g!uZb/KiuAM$gSF9QqR(.?/)j`F%mYZVC::&:.8J(L0odIO_;"dB%jOg&g_-Q1<)g4/k$g-/VLcnI#2*r6s0m7'%mj+%]Z$9%\.<kg%t#/na%>3s%(NALg_D6LOsj?t2AuSm7)1K*0M*nuV]@`_[X\B6[GV-hfa-.`KpCtVOG=t21!"FFdg$0h6#mW@e6_kTd#!&]%\>7U>oo=@*[LhgHW?cF!,X)=M8UtI85RaAQ3!d<H)B9b<ooFDh>qcp00NS<j9caVfT]&aej?nlQeF3-YT`$sn2(d0N8O!D^&KlI0%5JWL:N7Nb=].e70j!Prj'!+D&(*_u<TLFl+S+JtHFC:spbVt8Z$d^tCL0@l=E^:lA5rEdN8S,^*#p:Vsbm9C?3drse<p^"DG(G3#%+@H:lOMKoh0RSuX+:gt7DtZFg3\@"/$Iju"PQ[('"9F-?(^-uPjR!#21E^fAdO@IW;.bF`6>DVE4tK2?(*s%h9L.S`aF8f"+G_2`%#Mm`3/^X`=Ob&lHTKa]8OpEm:+FPsE*Rb7!dtMqjPl?M*)[YGW&9n8D0H,JAl3!ApO]aH$pB:,V":g<>O+PF`#Ja>fi2nX$=9b:]%J6%oMG7j=O&Gj3Cpot?7faU"2@VsTFgKiJbGUdWEA_"BOZF8WP]&L$(Idal%<M`-$rLR!m]orZBmp4\jeU?V$qn(JS:#u#j'lMD3%^V(@o\c!P3$Yq9*>L0nh#_qhW517KLr#k'rFmHR?kq60@]ec:Lp[D=pDaHGoam)?0@:bZ=@[*0tPQmY!"T5%;O`*jbMt5+,Vj31=%/hQ`d.L)/lO16?UaTL`-ob<GY@jI/$]9]!D`R;]S`7W#^&MSF%)&ud!R@Mp"Y,6:T]-G3<b9PI<gU@m[$Ph&3s'no'%f3t5&l_`6%M+0Kg!]M=QY#_9f/+U[bap4is/64K.7n7"j*Hb5hPpjNZmWM7B=%><SMNejB0X4U3EjXt!I:".O0!A4[UW#T5*\#O8"k/AD[XaT1%n/*0?'cpa"W;;'s5G2=JO'i"V"g&Cdm/l\_3l%a@Wh?\d[Qk")l):=JU@5OjqlNh8OuKpmLS6>OE]gm'>Q+oX#rYGW$<U/";ocnF%]4;FGm\#q!C8n_KQp#E[#<&`\a:dOUEb+G#*0SGiZqPj=d3Zbu'OeR--:XC?BA,liA'ItAAJB&l`!J/r8iKW"WDa9DHj2(j&?6"8%'h'-Si7PuQ)afVogGuQ]AF%=jZ+VB?7lE$9H&=m\9tIM>kUL*uD#hZ\9(b^u1kTHIXV6&WW703j&)'Eg(!68;dtl"@W2H2?b!ZF^%$`Ia'T'r`.;[*n0Ak/7`1n:O#Sr#4q:g0QeV2E"6RSpCT!>S$DPL]5hB/3;/YJ0R'H7JSR5"_\/ZHCICG)fSr9IPrJU5:;cNG1;I%ngLoo=&)Fb3AOm*HD-s1\MT.`CLS<*.jCuQ>iDJ&o74]#5:(GuUe5"7/3W+pFHqpA;1<D[>Trr8FGX"[V?k<q$C*TD&iq>C`VLQ>%,g,!J3e%t2r#P?%XGe=JL/:=MFd:A@@l+McLFc9#9PajO(3lsX9G(H:63esi0kL_$YC6OPT1l/G/s7cM.B*C19EiR/8ouI#Rk!Rf%TR_PTKI1*p.R1,?Z7_MpNE[N-M+XuDFA@Or.?m>r$q_>6#35T\I,<R#kic:2Pns;G<l$XF4/_/2P(QAXS)^$.i(H'c"ol6nTj&Vp%HKj-Zn+eR&Wfsd7mQ*Apkd$E$Nc'4-14tdPFL+c^P[m5>Bd;0(dnD?aB<nL.-TS0]#>.br>0t>ZU'*BPYS/sLh(i,L8m@U&fp'aY%,UT?B,OJ]TM05N!G1n^^m;drNEnnX^2s$u;N!n,j$1Z23YY/]p(V6k-dZ*c<!p=^i'N$9CY=i'ob?%rH;U&=$oGq>e:'?u;8/H,6%;%eM?91s84:M6CnUUej09L4jUCMT07`#g;']/fs`A^F?37&2pOng.1F&Ts,rW)3=?VXH%5\Z91d.[c1a;rr#>-ISeo5<oWWF,9Tq%3ooIsT>LTNOufQ98?6RHr&WhUPlcCEpGpk2S*IrfBKaaTWq]mjpS^PYM/!dZao\D*;1FbsPY,kgejPMNdAdi0A,s-6E^[qPSJpV6%J0T\A9LlWGi3p#."7X-(kpZi@>n\@_+:bt**?]M6A.QMg3.b/p.*k20CZ'h(fS'K)^tfU<'L(a0%eu6m03WgL$28m?k(1c;S+4:]%Kd1H>]@p#Xg,;T@MSkU.:aVp5'O.I$3#N%F@-ASqa^J!]KC]p]\9Y3.T9nfD#3RilZba0]b&6hl(G@X+%a&gBK@_SuGNd_&NG$:,%SM1qB^c6E%`cXu;6fgL8g0k@`!eaGoSEQ\H=/pG!Ufnr.2$E@he\cp3J(/u3bYcAD77';&8j,QldL(BUSMH)5n!'P%0E-'`OqikZ%'4aAa&f6FIMC=_1.9^)coS]A=Hs8Xa690'Y^JK"RULi4a>DbY5;pn!(S.]mW)/n.CiKU9;6Djs?@^L4bIq8_[O=*;Ri5Wc0AMeVq%(?*7kE6ISXAqg25^N9NbF&VRk:#M>j"YT3D=.]YP8mB'LZN0hA!'=8(#/Hf1#kSn91ct^X]h<RFIAW+8F.L!L?idZtX1**9->mN*%=*YqLk`_4&.d,Z2liZ@t$[1Z2jhuA.o<,AkY1'=DG[O3gXH.@3g+ja!HQ4G,9Uii-XL,h$=4osK\^0EGV,e;^<3<)ZbeZSjAj_=$%Q@<Qadk53bk/+9tg!26%,;3SQ)2%3cCsb9n[M:h;<Um;RM3Zp;kX6c_:5Y*8Mm=BM:$V"Ad&&D^C]o'ZS!1ra3^W6qW\lYjAP+OI%ULOD,@p;"Cm-H+`/U1='67H*7C6bO\PG>,,/8^H2VNmrg>>!9Up*P(+5K9lEpk9?Zs)&,n9%6a&Na"oFa?k_X8XtsTV1fLR+]m>G%jXe"Yfh3]F=X\ffp><5eT\VQm\n-2'L,N[::)gf].d]j_1j5W`H#,('o(Ge@gP1@Bm@*U#:$%[8C[7QsYhO>:MZRFsqDpQaFU@B#%QLe^d(s.M&`R:ajD_D!bV%i+#S>:XG+B)R_M@u1IbFD<U(:d<%NKS)l&DWS7?7oB[F>cb#<6Ab;UQ("+;#Z.'>PkCm.daJ0`a;f$%$^l1-Q,Ds)pi.pN[W?j;3-80a^jCG0ANIp67d$*rpHjb_;B9o!7Y%JB0!^op['<`<(aTGPXb(^qRkh'+6F5!9e8psl2qD`sL.VPC%D&%/[h0g`_&[`U8X8Ie)VB_cgZ7KF0\k3ap##"m.T;KMsJ$.SEq41gY^+&+kBU^Qp$7V1W,YhT!B!Ep7;$JU(RUh_rNbPp.'ql9j%eijV7`/8?*TsP0]cgKA*^Q?.RS.4Z6lo29Ho1]5>CRH"s1L[3k3JG`?Rf/6uHQ=[cSE'+`2t7dSE:hBb8%3Mg_qF!64l^Eu"Cu)&%,=Xa7]u'2,f82f:],O=7DfCrM3@M.A9=.R5lI*P6e+Q*J7XW1H*L81);#>nmO]P6D%IEE3_#683<;kH]ASCUT2,m3j"mQibB]!1a%a)91orEA7.g/>sel><tD3T+B.;J'F#eLRbRh5f5-DMRK2.'8rg^*Lb`c-&2qn4eZsW'cHec&P3ZK3>LS`*?L>V*7>T=jkHU<L9"8%KN)58[b.+uX"H"&U;++cq,*0gTO-:[!ienoPSErLV6qVEZ?'a1XB,4;cK4<GE^Ej7$9;B>X'<*jZ[(rU,^2t/QZ@\PV/s:@NPdcN%E![dA*6[U<R@KR'N^F%kKTeSnPc'\DCiDo3#gfCZFYChH(rB?Ae?tC(gA?a"h%4opKPq7G"VH)Mj@DdmHr209h@4DUlcWjeCP6Vd%,f[UAbRG3Ac0$,GT&/)flPi@*Zs;?c80J+i&oNr4]!V)YJLs<1R,12L#BC?\,Yj2e+q$ildP>%COksGc9C\onED%H=QPLZ:/X;3h%;lOTq?hCd-0hkU6Ui,=A'"o0k;-GGjHWd=?3-!Wm:t[rGQ`@u)Fh'!!HS^`GD-0AVoX^S!l"B;9:9uX9$,#b[/G9\8qb\,`n01KR%0TtoL#W!&8"DA&p0>qqa=k6>q5;m/`hdVr.--S&;n.VlHZ*+)K=hbEW($$?@`*!H'6H^cmqf+$t'^A/%AnUbu?)SVd,4ff3@0igb%ehLY<H:C:'Zkh)J_mY6p/i@fjX@AIG2>UA-%-f1=H7>8ZL<@7,X6:mnG3k.:%fSQd^cC>[EE*.Mf*g]CCB@N@Q3j`PbIEP$5[IEa%rU8r:;8I2[UXIGN:]cVU0:K<^="g@EJi<&;GsU4$E=uAOr8*HI2F3GCaL2s=R_hY*Yl1IK(iu[f%;70JC1&PgC\A7UgZ[qIY!4$[%T9_.0>Gr>pQdhKtlHLXJk)t%38\M[1rm!PUmh.RGe=0+rbpE&FP'V1@]t'rQO-eA"\qIfb!rMGBd_a-T/]9'^>Z,K8T%psgS!,5E%acklJ8TXHu3I0&C4D?k3q[T*Z-dBbsk2]*Tnt\9kd[WF6:7b^!-(>iQbmg[GDc#C'mg(d0WgasX<M!N<UUn!5h;"sCGrMamB<X8>%@(V.'RqJr_cX:O[_:C`$Xa(+To*i(i)/P*%$o[MB1f&+/T&SOQ=%Djf*R/eNm+Pn>>oeCc>oh16FYr"+Z+o2Hn\ZDS]A9f/aa7u$%HOha0?dgn2I<[ljIQt^.dd%FUI/c6T'%&(&o$qKfR!n,QeuuadXn0pa?VS2>omALaL+pDPI]'U8F%'UggV@KRqO<(&^\)uV`.8``%]@Z?8hr*UG!VhR#]LUfh5Pa/,_7t>s0704i^Ub6M(uCO(0#2l-cI[PYlLeX2I#PWA\QuO.3sHma)0-j8Y(/A5-mX&6+H#[Gj_nQc%BCPr][CY>F-On%(kG&=@N5.1q&]q"LU<E^+M3")sLl*C64W1[Q0T9aI$j1W%,!SpL7W!6`W^,A1\=tpRX08B<!\Rn4JFe:3,;k^%%V\q1]L)aDg'Xe/XnCVGV"`misU3on89X4Whl@r=;=%m+FXtt]6i"Igh!@f"PU)HV1K.'>$m+?lGZlR*dotkRH?uF^:j2ZQ21Y9Sg%m/cc[U6cc7)qI5A:))un2/5ji%PlMV%X@fbNA+t-&Rf'h+1-iY**W]m+\jgbo@NB0?r"lSrm]0\n6jC[p/usDN)%1Z'p/,e1Bs/&%1LP'm@$4,k</(SD(qa7F9\Rc9.B>_ho!kF',,:mO8s7*pb[a=574;Z>!?F6EdEX"/"Lm-=36eJUoPNfVdL6k=PZ8(Hd2?Jm\;<ZY%Y%H+rT!,Bp,rO8`*OC+0N7\VSWbR8R$k[#X+p24f:"HNhJk+"W@g<^#W<3!YSV@k%Vr7j/$*qY9U*0g`]BHb?^hp#+&JC`=V<&p&%gRWmGU&U]GYbEW@9qC=%FrLc"a9%56eKjo<W`QUf#'B3^?tria)N#G6J=M?_f"qRoFoar*i!H!=UuHu@aK^FI%@E7Dl=LbRVqnFS%_8NF@hUiUkA0ct)6n2.HX<EqSXoaAf:SgKV?;Z<E'1"UQ`duYA.5RW,$XuPPm'NjG\P931J3qbgR8JLO\uo)P,tYkG6;6)?PUQaJ%Ztp:K6kDh$d'3ZS6m4Z>NmJ4c5Yf3++\?'nETYK,kD#uQ="bjK+sgLb:sL*62DO.AgH6Oh;TaoZkc)"s3)*Nd6gSSR`tlU.rn(pf%"`p/6l/L+skEe$-)PU[f(%\h>KCUXF)d)'6SK3BWKcN6/[O0$igFATFp.@p,K%UW:</&cd,cWno"T+shMO:auEC+B.kEcTqVO:o;%>XG=ik-j)"3lU#a'GYr:g-/o4P:BA(XWo5(+(QLO0T%.;Osq-bTOS306qnsMJ*aPDJiQPFZJW$L-jG9r8]N],'L\ei8U%FG^>s`\%Il!SUkMq]&TH8VHEMqoF*VfZj0<KAt&._c26Rik_Rj;tX'ElRS,#,o+qIk`R-?53WI0#eSJr`R_#deL].^7[L-",3DXG%W!\qYX]%R+F"B[R-ljg<(4"7L[p[X!YsoUs<JS-J5kF6]4o<4@spP`'G#^<)'/rAeZrlj4GkW$u3f?A+b)\&RgH#_CPt[i(Ok^!&IW8h.rQ1%qIF!!'4!U!kEW!6@^[U_PDDNjVp[pTpn]EAD5uo7$5R)k+eX]Y#"lA&g-^7A`)5GH<(Nt!Ol3JW&72@SLm69j>sRc\\F7.L0B+N[%<FLO\!](`&?Qft;1Q9MAnO)+5f_\4XN%h@e6=I0V9,^WC@!YaGg/K=+N.QSXRP@hKN=<'[WiLlIK(K2-4rTg.9^a6K3fjXm$V!e@%9er:?&;`KiJlE8Gb"V"/5fP$Uf>T70Sd$)G82Na<%$46jeHAFZ*N7n^3Y3L^KL)2d1EnClNl3P*:oU.\nTt(ihAI7#=>.2T,ZMMa%7\ujE.Vh<jA3r$_4^JTAG[_FEkTJ>j%ih>l&@Fl98Qp**L(FWl&Me,i6-AR<fJFFu@2/%=@77GZdBtbNB\n>D!LK/`nA.deQ3CZd%E<fp<A/^i/ihdSa?jQ$_Jed2R<"b1@,0Mes%^J>%;\:CG]4Ga2"8D:'A3t(9$p%$*4W6<,ZjJ3t$-t-KjG(s-WI`J/-:SM?n8+rg%(8P3]!CF.qpQ.g+gHZ<#Ak<rf/9(oGjs1';U$F1244`=\#X)JK=j^L\OYXo&eKeO]kld!LR4j)K_bn/kVPt8qAd"%!qMRpNCLENC%#1]`6^gIClH*^&f+S0l$7AP2U"h`&7b*:;u5`U+-,0Zm6>4mI4L#aNfKi6hmGR^>/1b^,-KMXd2UW3VUd8^kE1VHXj2)&SEHstcB%&[,9oK+^IX7+B`%+P&fN&!)Ao9-"!ln2197MV!!I%&/^kP_Gk=UscWjN>In"_<nQO$CHF%<'ZO+hi+@r-UOL[?7]YN'ML4(K0&)U%][AJF>#]A]7;Q\R]be7t//+lfRNDTC_?^D#)=AX=6O&a/5[YLa]E26O]n/brC*W=Kh1<LhRor"[J2B;bX$Zrg4GB(rdi+IASuN;R%"1]C8Xta.LeFunt6%U#2a;T`M(MNG-[],+W/,$tRq2)8Rr(nubWF2B!gkju_jC[OIiFejeRlS?KcshQ:j-G4d'QjE6J@Qsuako?k%BVZr+AcH)g<G#0.OK*oFKrdce"r8*_RO[C'^iIe(?n-eZjXl?GY)CT3CO-Q5p/C"r*Fq@;X@iC6&=atehhbU*)'g=u:_+<<g.WYL%M0K5&csVE^P=dY7T[\FE<eRIT!5lGO8';PWlmqZsb3amiY[-$J%TA@(9'IQ`)Q(<kM',`r`l^'>9B=*1'C2elBtFgPp'\sm"0%:O%Cg81f#"b[R:l:,k#XI^[-L_*Llae347Qh;oK+N:UE1E&/W1-5g@Z^po>rR^2bY/t2gd)eIg1&,n*Iuu\`hJ/:%O5q]ZAO/>g]dSr%0r:TMQl-P^6e31^:3[7g86*L@NLB%I0pNX_\hI]ZRV9Zui&$SA]EkIK0*P<]&-;;(V4JF5(u.EG0YY[R'%!(iVH/AoaZbqp)GmB"%HIUC0Bb2,(DB3LpB^CaWC>@MuGGK7Y";OLi3*mF&du^\g+s6o;BT,+nC$o$uJLiC2+Prq)0S%M;J`U;V.LAfSEPO%J-(b6i=VNP$%bnU:+)-d6;l)"qUSHlm+<_@ZC@:9`=A0h?VPVlDK#1p5;LeEpsHaa8S,I1thKg5o3O-Z^R:/b[OMftIY!9t1B:"KOPU9OlW=>DR>%Ks"YrmJn=TW[F[30JQTPd=*phUgRJoU<]Ipi0>U)AUoP'Y,`eVKO$hH$qLL$.hGY.!?Si"@#T+_&E@2Y5fQ&c`u3?`D$PY;p9h7@%RKTVM7qXQ%$31Jj+dfEq8I3UJ)XqPF1;=*R=>VdRlVt&*b6H20Zj.:fH_:5F+>XoS-l?`rPo3's.S?IW1?2;H0,];6g9/kHfm7/2%2$k/al\JAg[@p8B`&ZCVj\=-ABYFb>Llgq7&J(2GChY]mm3X=%lK`_LM<8<T>s^6QK1*3C1ZkA^@;dmmaV%M-P^"E@,K#b&,%>Em%L<RWNd@*$JX^N4Y?s5k?Ua=SgRimk?#,>8>+@p"a.nc<QgImR>$jP>b1L+De+ooXa]6hbWR-BnkbIlC:=OS*4jk4YZWHPEX$3ZA,%*3k%0kL;0=[)=6l!IZ1Medk2'p1B#8J.c</9j/QDi9"RiN8u4G\H?:<gOrL2#`a>.]C^u7AB]t4&/mD8UlB5pWA(%\C!r[EAH)9O%[@i&,0MBT\,_@2Ff,ROG,L?`>$^NsK"<pA$'H^0WObng#"t;tC+da@6Z'*T[(''%#4!2-il9L``&N_,O#9Y(id2cmn)58Y-dMSDf%QP>)aeCTnL-9pQ^*<60W76f78/(Hr*-3_%s*\32.l:SU8PVKoUOqg$0A"V:KRW83m7]uG3?maQ>`C$**!t8Wo[X[46Go@M*`]u%G%"@eg!5]+tk#>o<=Wj_5%Csn8U8Z:)@/LB..ZkLq13C5K0aHI'q*B=uCY!f:@MElJ1.85(N(s(Q'U5'@iOHhd=bY61<9Em5/Boe$8%XbJje:uu37XC@/(VKa<pP\<r#)!HWK6Dkj&gQ\3JD%jue!K]I6K`"XJb*:FZ'W3K%)).kkTR$gP?Q`H@W`0-&D4GK<-%[q*DaIc@%KP>/<Dq`V>&C81YNA[<)$_serHa2%e22U<?Sq(4NP9u\RJ\\L;)XFsIpDgPZ8FBJ]/MDdr+RrUs38"<t*5&eiLdAlfCF[uqMEq':%S1TQ=gAk@6qeT;%_E^k(TOS_WVL@f$/9EVWS-[&356TIb#QWlS<=QlcM`M+u)k`TD9)X^Y$b(s:VG%]hM*^3c$7;*7bp1U1dWdn*%oIEUgO_VKHi@,:D)tn1pbRO(ND!2O@]%o?pW:5(ACoXSp6!]u*;k$)V$mX')3_["[pR&cGcW>fT"G?bNZ9\:b"/X?@#g0f!^Xi!e%X+58IK>b%(H76V<#/iis%`0W&s!FD3#%q>&<M4t"2$5(a^ijl*Z!^;,?.TABY:ss<)?DjfU`C'45erkF=!AunN5.t$_aZ*ZJLS3k%.U?[J8/#KLJl(&6P%?;pRm.Ks]LB-BNF3Xae<NtgCF5H'Ouj,[A"[DWZk*)9`1bgI2,TY'5_Q5>D+5#N15gEa3[KWH2'0<Tfba]9%5&5g"huElj@Mp*tb)g6I)^DFXUE1mocVpf=m_C171=03n567k!4KW<+fG\$WhpcoJ%M_!:OOtO,K!Q`a-.==X9XYAcfT(KP'hg$t%6g\kHLin=C6m?=X!N7QW;UWVY1j_`\BqND"_/YkL0:P:M=Ae5e2&Uh9JKi=jbOdfmUqgeS9hG_b]X*oc#=CcBUN(5e`?mm%k]3gW%6>gAj*(BsQTFSf:,m1oS3#k*m3SI#`6O7'p(39*T5b+l2i@Vi]";7-t*l(pqqSZ2g29C,+fc<Zob^A=+cb9sB[>TX.URhGc6PaZm%\O6R4N_>H1MUW^,Xh[ap->,l")3p^"89D^Lph'+*@g_q."eNP=F[i/BqCG*%8ID(PK%'q9e3"k.e>sN;@NdGfA4T&A>R1b_9W`O_%fGCAT\55,AC"$6n]ZK,jg?RW,^j9dNQVn>03Y&P"Zn\n0RfFEr/;QXU!jHR`C)VI<Tn/?P9-=ZJBSB/#X91qCVs=Fp4<j2MaUAh#%/M/YW@ZaT!*G_ms)I]Qj;+-eN2%B\mVZO/Y!LkVs:dp&kob1NG&Y*lIet)l#Hrd5>"_.b*E(u`=mQecCp-Mta!*XN>GE"oQ32BQ*%,BY+W,.%"6=G)<8]>CirKK9:6OU+kQf;:/-rE:"B.3SgdLI4'B%m\G9C,_,5J;D8@T,d`d`,*48P`-r^K<F`/&KGk*,-s]#LII(,%\#@5STKA+$89'QSC>r:rl$bXdO6pEe%:U>`iGn(3h%h:I\pY96aCXoC!*7!Po?Qa"A<SYke#CKP=Tl7JF]QV5@<8!h8]\:b?lZG^%#/usuk3QnG,g=JE*=N[HW<Alb^Y-.fE#<O&^tp3bPoOi`">Z0\9q34L!'?p5\[>oVk.O>V9EA;<]82mKpMmVBBDuc-*f%p`,?>i%%i-prC;.-0LE+_apBHpY;O#^hjE.D0K3lB]-\p^Z(&QMQ_7(AYU<Kci(6g"8N=%]79F=7I2/7WlkUtgM^D<;dM.ch.L_jcD>@&VG`%R$j@-(@ciAVO7NJ'dcSJ6P'5eO^te/m%Tq6@R=>*!*Ik96tWNQ/*Woce]o7\&BATgUu'Xa\;@*GYBPl.?GIPRp=6<^NY`/t:jRUs%qI]aVEL&lL\Sn+$H"kkLn%D0V:@#e\#ZT3*Wi=GBe3RL94;5&HJ\@NAK2[$IJO@<,Fq>phI?Aib9]EU4htSNDF8uH!72%#S9Fs14%O>[CNEs/#gB`Q;3?#OEif)SQ>nq4CpAS?7@;VIkr^m*MHRZLIJN$kZcK_L0#bd1b=5Z#Jo?LONF!E>O=9SG0knf\C16Bl/!ob)#;%)*rk^Mr5gB$/6iXTmH0<fgHgX)AjBJ>HJnVSXE_uVG31/Zqbs>f,q5JEhTnp/Z+Xq0C&5gljD$0-XTeb,6>W4'n/V"eHp%4G2<Uh%GWpa),S',PW!>tdX:Kmb51/T[,SpMV[[L2-!-rK(%:p6A%T8p.QBX.q1bnJ@">+"rPV^lbg$HX<JI=>d;4/phaQ%`UQkO=;3C@XJ%jHLKc;]O"82EO1VY;(C@AF0C+>*jpk+\+u\DP]WY'&8$n9F?Kh3%=o'oQe1#UpMCb2B($\CPiF^/kDP($gcIJ")6t,Atp'2Sl]Dj%-$N-oPfXPR:@<\`F8RmZGlYW.AJRq8<Z.&UQ\;Kq5oBLC9.X=m'8(-1#?f][anI8>jpis"nSTB@R^'Vpl#T!cRLR:=P=#S,V4Q/$%;ECt&U>*^&q%Ko#7&:j;A($ACMl5r9Ul4JsA$0YYfs(p?*TIH!Z@/Dac'Or[;J5WJ\mNhS]UQ$%6kX^U9b&r+<[+E!KrNpSa\2rt%f!+S_*'F>OJ3>Ero+%uM?kTD<V"TY/+YjFk35/.>TcsLtbuS3i2fUJCG(R[(Fe#rsg*8?L@L7=Dgjrb8KZE7=B+TG&nG&Cn#[ZsV%G+(5)kjp/7KIYrW2$0Ar8a"Sk(Yh363'X4a6g.9^`n*m+S5!&VS7TX-Ype`AU^g@%2iWjX"D5OgJ^ck@=k1G1B`T?KN5e"@$9f&8%(,3*(JDLG;Qh4dZ5o+Hd?Cs#R6V.qUj#&[]5Qmqdn7m&N507KIaWrqA7dWW6)lDa#&;CTB%i,J[@=7c:!Fo/BAlB6;eU'fc.pNWn%`2oj+6!ac>-Y$#CA3=+u[us[r(G.GLeYZ-rdr:^8Ru9R;b%<=p2_?I5%J6]"SW:120bP-iV3e]!-4V!c%'Pr.rehg]AK)IZ5&,[W%ZP1RGoPmVQ',Knn"7.m$@8AF*>+nM?(u:1(,pmCpR37@6!W-Hjlm+hV_3=@S<<T0BgE[Pfb`N`h<$h6Pe#HfCA)AQu[D=4uD#>].%<X-Bk2*Rg-idbq='oW[Q9[+?M1`g^s4&oulbK%?'SJ(5k(SYZ_,Dnp#gAC%)UiD&C%!.g<T`l??BX^No16Rh&Gk8q:Mbd@kNuROk%A6MD]asa%72hCXN$r/>76`D'6`4iM+qXOca_![jY#8[4)M$BL\7%iHO%9=Ri5-96J:'#'TqdpXp[`@FDEMCqp"_nS6,u+5<LM-r%%pro%IX^[6c3'q_S+J>KsWAu=l^b"DrCs9k<8E]!?m:CnS?u)`A0LS/RLG-cB`1^[cCdJiOG&&iWR>ir\?mDR[<_pMAa&8*A_tGO#%+n&9:?#sP7,?G"[*"T(eP<6"\]1L!U@/X[P3auYui_"9]#tRg##seSim%tis!<IiW]]kI^Jp$qr=PB,q@45MZO0WrFRV(_WRNiGb%7/,]!9P@o@HPeIQk,aU"4JWH@]uNeXlhuiGdV4De>6R92BmF,]<]ZOYHTJ#t#Q\MT@N]IlM;YI/AF`GL-3AJ!JC>%]6-Or%&NSE!%![E\W*a:j,T/*4c?a6(hdb[l\06tU(dlfE4Gs\hsS8Z9Un68\I06!lDJqo8O]!6=>RJ3fq(c,d>%(9Mi=>aPVXdrXa(f*e5Y!<#c%)IcYhI,Hs4)\t/K.SDAhiGmjn6E?=2e3#I0T(GF3242^aiEeX+O(L@]%@Lou_-7N<76AXGV.6u\q?a>kl>WK?Tbqaa8N2&0#_As/%#O;!8VAQLJ8qWKS!Zh[/Rp3-XAd@6ZncbjhT>1T&1`+"aQ;R:mQtpP:)Z)B>?MS8PS2^g5b/2*\s-cS,<h6$U;<oJ(AMWhI%%O;)%<Xr";<o_[LQba?l]XGIA"L(k+Bsc67bt`u3]XiIj;jr@K:-b9j8U4nWN!!!W7^`DI>/e%'LquEPB:si_!qJgnFRhsW7d5;?9KB8E%(B_CSW%rVAT]W7`Ag\]H6_1LWig;RS;G[pP?>O6UG^u:(ic>lTCbD,A/Bii8l>2Qhf9NRPi5`^n/-<Zqntche>sn8rn1L7p_MWK\%5pj"Z)AjEe26)K,fOE!Y(j-ZbI%?6+0F#;S3^@(qUu]^Op3=-r]cqQ!p/lr7ICN?^Fm&laCC@EX6l4l9!LPICZjJE@8+[0SHt9/[%>&OXiaNV%_N3nZ!!h('i*.KHE)Y/#D*N9&n0NT1B*Z]S^Q4!E>%/-DnTkCEd=:e;@9NeF-Ph-d@:;;!%mKcJk0m+TRDl5^!hMB$f%;t<(TrJ1J[4(_VPr?cX'1UVFE.GEm!))7c@PciC'#+J:+g9U+^]RmT-0NY"W0FQj/)l&o(NQmcK1oE((1_,9`Qd)=M;SI4QG(2I`%'./BaT]"rbA\Jf.#(.0g;gS;5TI(j1e3]e<L6%1!:=/1)Zml6,Q]d4]MO=[_br,("!bkEb!`3_Kd9ug$0rAc>Qn`[2]6lJ7fYgd'%/u7H[d"jKt.MUElA9*:9EB/^B0l_P0:fN0[PdGFrRM<8N'K'b@C<om.2k@C_&p*h9cu#JgZr*jL&E2:X]bMf36W7Kf+s#N>osMse%.E0-8]c;_uF".]EL/YD=_IU`-[l4f,?^!Rhc"5"=1jah:_`$lBiJ+`^CW$jl5ltFXa/!V:l)K+c5hJe&=IM5#oWhY+SL4]2N"g!a%_1R9YO6q2uW$c\6);DJ2I(`"IM2sMr25Dik3Y/?C.3hJO!Hst&ps/#/!4!0A/Edbe_DcK[kU7q^q50U"[Q"7,lJ4g9r:_Tq8R,\e%nPP/S2puLbm4ls%O$i4:j6^^a-6^]#kkmC?@t!/FFh'N_K#r'$J9M@N&Y(C]2P:1IPaJC7:gSi:85*P<-lT[$3!!"F^_b4"k3O1]%2I`QH]PM_gGaO:'0k+";Uq)aCN33C.Rha*cl@^,bSROSD+>c0i_Dhct5iI9#07=K:;[FuZen59UXV&C1BHsa;\-m]r+A>M@=E"U)%7$frpG^M^'LhDqs<`4;Q0sj_8&B4_.+_O#Lk-i=n'4[R:*F:$7BS_2,S$$"N(fEgU'2\uh5"mco70r_]3?Rf*ADT0t8J7=m:09T5%dKS=;]BZ=VVf=;0iW4FT_Eh!88faS`@B!,E)@-TY9#O%4nZdNn8?"TVL]'j52q&g*5%mYG+%CWn7$,#Q*LQ%I`-Z@#!Ll^j;HQEN%:3d(Gd(V*>O3G:9@BZe`jq94:I*`(9fU,gpdhG+1aF.lC$1X!c8S>W5-?$^,$7<:c^(i<bq$7lUL5Z/j0=@.@KTi2;n31^/FX,$1%"->/EU?>'p"@-8rl/$F)b\i(f7stBY-\6ubg6[qIU7+A]YD)KQ04?aunZJ48'KH%+UujrhJq?/R^_c@Q/!#7!4ke]o5tlQ*h881`%8/Q!3St=,GB-\R;D'geWI(gD8s(9KI.eS6l?'XPX^rX'QKm1o:[4%uSG6IDl"8Y]"A0,0BAIa3h'H_LKO#P-*gBrAJ;?;1m,<nVJ%Dts`</)2'02JY<;N-*n&@79N<e0f^!opo*l0scTuQ)^GNO>1\<W'CCVfeQth@]62-,])oAmOUO^K?oA[5/WFWl/3L\_O_`;0RL?^%>oNss.:;+*W=IA/8A.Pg#>r?ELq0dg^r"\RX(!=YLH_nnGu+_sS`KVCdQD8t[gjVJ<9&$s<$k.eacXDp_k`u6b=m,SeC/CMVP4AT%@MP1b*S&8JHFs`cU]`&SnOYiGbT3YRVURn>;?T<.hn[87JKr/5Y^S]ro;Et;,#nFb2*7Z^5d,G!d'r:c7/3FLd&%:,3]kr$[F:C%%&(sgj*arr\-TXfE9_)IMk@G2E#9;jkPPI1?)KOo>`HcM/4ZtYb$t;t',7g>$=IKUC3^Qa/?ZSn$0o>&B*#0"/-7a7I%qTgb_5;/<%GqK6>I&\kU7l4\%D`t?s.!6`Q>X"*+X'@uBE=8:8m-:h>3J/"%N%qXEbQ/$`a$i8=66tjdKtZbhO(g_a)e4m]Tq?\7_+A<8<.nj^%0%&fC[F#q2'@B9ul9(dC_8>OFl>q&^6\dV(b^m6_)>)/&3%EA^;g<'NXo\hMQjPN;HXi"Z#q4$&4aT&Ip8*#'JbLiSo;n:3DS]>u%J>X130gM0`qMjYH%X;`V^<&"tc8fg2o'W*.c&kK/A]g.Mh9%S5XaYRk8gf#!b40admZA7G)kSo'_As(\c'apBB-?ZZi)(E!4(g\_%bS$9f/#e!SLX^bfbsIeF6>#XnA^VV(.a:WXT=RqAk@Ts]44dkSc2t',id?/NRNoNr<H)4!M=*NgjtU3L-#:gafPV2jmERsXa3i+`%'VriX\een^hj?K]Zu6hl=':MeZS;Qq;LWBKgVr6JT//G_:QpkYDhP"c5RXFBNiW%B]YC.qruK?RKh)0VaWgojT0>=3p;(,lKl1)g%bY.E2f"LMn*Ig3oNU^S010dQ9Z[D<>WXnNE[spQ5cJYJ00Wi=TFM/SGms(J5mWB;']MrD9E\\Xe`\[NTo^4l4XmB]qC\@O5N1\o9%I/hb<n(p"0aUl68d-p<iZ0K[2FA6n-R>b0"YHEg[8Ar(n'j^^cIE(L4Gk0kUW]!ISrOq7@H2,$.4j0H&FV1+%T]R#+Yg.U9V#K)\%Y.ZBipDT*"CZFsN2;g2RrU5!@lH\"f&PT;gh_JDoesXrs:j'1INF8I)V_p0^(G31$02C-JnSC1f9-.hOP:euC2.0E#T>c&cT%;MX%>lFWE-,cO#EB;@2j2#4&^GRQYI;Mntp"hD3l_6=BT0FC"nt3tq"k7D[h@Z7%:KE\0E/TK[nQW$IcR.*]&1k2fUOb$`,e*o<C;]@N%cLE\lSQn><.op)>[Dc[bKhG]1"REdGAilEa(W5cq7=OcI19?Pf%Tm!=;VU>H0puC-(\qg[W/ZjTE,AM%S"F'3Q]kDiTm7Ff:sR88%Z1%A+BAWS6f\8WL%P?<H9s@]M8/(>I_;;f#db,fL+*dYTI'RS*]tFsNC8\u[1YSmH"Ia#-M>!BOYDMtABWm9d9H;HP9_29`)[nQP%*khMkic':V)lWgPY:+jlpq"2mjQc1STb4SGD4g\:[G%DOio9'I3e-\2;/:)?Xi69']4#HVp51bCX\ijm9<BdS)4.;QSkOSR:N+$g%TBj]\^1UEAmn&!foUbK4bA^W)P(d(ucf[OEepW)0F;Kg.Y@4!nkqDku/aHG.Uos:-:75(]s8KLU]\n8&H\$k-^'F],_e]$o+$T2Z%U8qVNB54UKrq".;([r+Ln^^JP;seAQ#Ha!4BO0N':j(YW1<YU?A6)oI%.i`Q&O:(UAK+lAd^q\Lq/Ei-?Z5ZY*R*:cmiAmVpgT]D%59QAT7[)A5RqZi(1C`2&C,N-$K,fsN[@2SN%#_6j+e_":T1rp]qQUC/q)DaSGL.a5Mee2No%E(dYE`/F(E\O/r6FroAU[Qer6smg%SiOHskZr.*!F*hA\W40OWP:#HlApFdj>`hRp1<&Lf9WghOKY"o8NuIg_B"q'fK&3*msDE'M9hco[ioZr5$i/)>_f6>RVh6d<!YS^%#Q(Y6hF*#,8M/H;m2h-kW/]0)qQ0GV3]O<d')0qB_g*jY@]rjDb=MaOO_Cq"A.-O4,/H,ZOtS/_QfmC/ID>.[CI8VFMrTf(qTbu'%\or8;M\fkKju%#BdKH"EjgVb#>l+SBZ`DmJ.ds:XD0D0TAQN%)0CC?Grr&C4\_0PlG*7>61:WC8f?Pj(43>`BEjLtblm+MOaTn&/%D0D)3S`FB1\_2!D:!V&8ocMh*.&pZF[.[cE]H0kHo3^cl1W:a2^uoosoB?`6n8bl0+8".8H0`EeGe,768CVkOMN.=R=,CI"2r"aW%p(oS<Q+d!0\]SRXe]:4l-L'),h;4E_^&MOr*ma8,OWWJ9J8FdcIfJTQHobTi?]7MLkDO`]U@r=[fskh?`lTPHf4<p1CtuX3aSPmI%PEMtVnX>]tc5JmK]d9!E2E>.5n5*.as1L3m>T9U2']/2@no7i<>J:?g<.P!tX</j;/I,e^'MBE]*Hj\!J!8;UbDYm%/G%j**qTtX%$S`<'kBM6XiAGl4]4-'XlNOeFDh+[$GR[F'QGh_?-f&rJaL@:SC[sAXhW>jRka83?]T#\GW:WfJ[qYCk:#;bhgGF2F->ui#hDKSJ%pV_\CAQul?68_?52k%X@%W)_1$[!\4c+cP*Wl_J&O4&8#]&=2BV6T?+]=h8O2t@:6e&glH51u6Q4Zn-hs#C>/,;f*'OZe2I7f?tN%1lp!sD!1]e4nmc]mV6JH`H4#!T5&3*hQ4eigWnsO;h$paGrXRU4)=KNd8RYNi0jj7r'sNdZMrIQs"YJZYbe".?c/aiI>hKm\*jhf%-unqSN`5-"o:rXunS0pG*l")eGM:Eta.9<D62`[@s"30\n]ft'@'\kpBFZB(?3;P+q7*lNZ/[bu;qjF*A%su%[tKjfdlEk4&oYen%S=M7P.pRVDGdPqkqk7[,_XJ)6(In('O3r+F*q^,EmgY:`?_]B'b^=R^C2Be(RYN*S4!D$#_L=D6cUW)Cp9W4^5(%M1,LH?4+&5k?%5P*Vkp^+-J\Ptr(Y>(AgLun`[d[Q`RrSM>D9r&\WkF+9dnmt"Rs3eMNHE]Di[r;-2-A=_0!t#Q)#Q4.5LRU2WH<%P%5,"7Gk4sZh%jnXR%XEOJ]Rlse?5u_&\Rk%W$RH@*Wc_5V:d.Ma42u(s%D(B_TNs485iCA[u=J3[gr<#8#k[rXYDqq2/?$_\p1cO&?pR@Tjm#<[N%Us'?"A_u3M56R7uggG&<iU%R.H[Z@+\\[.TcM_h6p>:>Ue/Ra5c#bi[f_<X42Ab!bds80po5O9I^ZSGZNi)*1(3Gn4m/+(<n(_b>%J@0WG'0%+(3*YI]<BgA-5,k/SU;f(DJO_bSm.l+B`m<4oe+IfFX8g]D6ZJ.@IdQO9dsO.s/B7]o"!-[akpj*pj7<J]p%`)/aId\O%=qA*aHcKq\5?U]]__(bfmL:AArG47F!Pq*lCGROGnN.HXI\&o.[@bNZ#`=%S/\(7qr;e`\DEjD,G\TD2HsNaY)+\&?eZ8OMK<&?h%TJrDp*jG\dMT3/WNmg_:W7O/k@t-r3]d,bt1JX!Lr70E22s0?AGAB]Kc/UPP:0dLBlZ$RPFl.<\B'+*40Z:J8>-0g-[r8;*9t9SP%,cLEBbsN):TO%T#8`OVGf'"^,dW]?a`F,urpR._mfhYr9VtJ[:&/(G*=*o!RiVr4^Bs9pnl['>tH8^.s5hb;=EEPBnI.*-4B+GnE%]1+slr[@'5HX0-8<3V!Vb+C9Vg%)5a(J3s(^VA`MT7'Lh]SWh8#lZ2'f6d$QRs`:!4<L:mc?6#5-J&!`,1rF9ggpQ=2#-$Z!u-3n%ciTF?\0B8.glNpIBOi&\NXe]SDr_Yqg+0bU8!A(Ds.-4*GD*sDdPNo6k!,:f/mci$o,"SLQ1btm>26'`)lD%uY@s]Z)O5JE<*HND%pC&+apN293q)t:0cVGAQKCLd*eNY7b[pRUp_\2A4f6#0hLc"#;Bb3DrDs=o3#Bk%@q:sfUA'L:LQA:p;lQ;6M&<Coi!W1EWV!O94%Md!_Ib3[+gbH69bZVb=o12E--:*R%5b&#,e1-,DP<Z@f^=(aU"!c+r6]pg=XWDBDE5tL]TJ_dgd*q_8AG6R-\pW!d8OZKo=i\XH\%fgN&iU<]7+l>%cUHS>!DCcjiu:WL@Y!e\aPn!s]UekUP+.?^/0pK?2<r;ksujAaVnH#tH0`GVU6p=Q@CNC]%eR'&<Hs6XRi`")Gf%bDU'u*1r:)X%3!)!?%Z%pNX.fKOs$U=mZp?TdV\nbVjD"APdVS(\9S7Utab/jj#@RRWRCp5+HMGFkCp*:cj+h'^\^=UO@?-l@0!.%qg$E+^.@/7@QaXlFtWK)ZL'8Gn\ifH)HJnkrfY%Q@Xe`J\B5ULM'CK"s-C5S:8d+g4/bbWqu%o>C?%,(p*K=uIa%XLdLN[mbLp?R%?=/4^jo*H@Y3,C%O81XU17cY/q%hPdfKd55Ho0`(ptij/2RnKhnuT:FcA0=1q0MqC#7!&oaa;'F0iijPD=g;ma_LD<%`k%BmiAh4%^4h1]&-'%(Te;MI<nA%KjKlsR?L,K)4,J_&oVlI^jtP$K`Z9f5O3t\^6[.#A0[-q[?8qI0bRQtFmgAF$*JUPSdCq+b^\NJ\ju?%U%*9LNX:NIN<VAtBE6/D#.EL7^+<nt4F0_I0SGIO;i=O\=GBo^*DF(*aG7<\9`_ZYIRj"U/XZ8iE$-gS#*g>U$lLT-?^^:QE&FrY+t%pO<\91sZX?\uYD3VD[/jJ\q;i$9OcHCKBDbXhq\s5fs*Y_Rl;Q2%>!:T%^]l"8&%[2I?,V)c+c1kP6TW^>"DB5.Z&a_]/4*`Z6bd%n]?cGj5Sn1`u1ID[iOs$]MPkV']0$qn)$@eJ`$0,G37r1aT&IW1odbF8([9uhWD(ANPN<J1ZTA4iT'SHq)piST;'(21V5`eXSleH%]U[K$9]L0dHC(a9WkHG%='4GS1gfn;ZfN[/eR,u6L3n;[N@0)F.t-sLc</eTqg1\F\R(ff_stidB*AX%%Oj;e!"FDB''HaX'`%,W%K$@[>>kU:!Q91c1eg'@%ie'@]:M-Y;SQ!+cD!6`,6c[o$*KWMX7QH-M59ID1A(::!c$/foFe*K-hpK'Bh!DWs\<1-?2k@%AjHFFu%o&8hcg/67uqJ>ok3k2?$J+[PL50-/\m.H6P3QLD/'(,@LCdH`C,e+%Ho#5/4npJ*MYKd'N[e"HIjkUUE2t<E\^9#>Wk4L((7<<'S%n'2@3Bp9QU%&Nd*b3!fd<a6+\C8lW`[Q30kD"bRX-ZLj^mA(I,7?X*<*]NhXa5NEA2j^k?(^TKOWk=rlmK"k0':J5nA9J&nF$qt]%2TPFF*db>VnakR%em=q25E2rN-9E8<BlY,=kZfu*NJ!&*i[1S.\"7Q&dl8UEWrHbo4jRh!c\QIZ)E/pphNq5VEZ.YI@pa9q&1sNE%c%l+0%2&2LO+XJJ0cuGDCi4/M1@k]*PPgPSVDe")bVV(rZ@\>]DYa:A"3AVC)8PC(DJhd=VYR*YH>@RbhfR=pd7s4$2ck5n4+>T%%^0$*.pjBgCHTMT>Zh`nNC\m>\S+K_*4)!)1pp+MH>s%Ih^95$B]&n41`Gb+p2=KHt3=,3N?Rm,]@TdO?hGKif7cUhsCkmd`_7G^!%<IY7%n$KU%r67*K+8%pK);pL%<m32RMmqSpHh0@bG:BhQT5+o6)g>&&#E0/VS2)"<3>dP/o&j5KX)S,RnXK*fq02PFq.?+*%hhhk%f0?l%RhU\/9hXp3r%EQ'IIsg:M/OTjI.qt$m_,S,C]_<ti+iD..e[NW^3:=]mImrn9u+4KGVfHYi<O`hoj$4q%/FW[b!4++Y;U]$%`7ID)9uPXOI%-K[&`<!ifI>gleTi#,c];Z_'DWeB,38ROo@Xf@6@F^D>lo5j0.&LLK@\Wj\e"J]am4!R!EutKljSZ5r(bH03q30]%?Wq5FI.)'uDl7TB#jM/%)+p$:5*`R4JgcK67@^3'P^20J:d<;KJ+jl<r!d!1(I5`[_L(ABn<<=#YkP&t]1J1,Fs<[-919ad&&.PY%946sC!:V^p7FDZ6&0j/OLN+4Gf[e>Y3tklRkp1o71H5csWD(8G?p0]o-O+tL](I&QEE*R]>L.6Fp"R3a^TNFFZ.n[(Z)FSlQ+8\m%lT)')o@>k&be&;DqsL)1=-Yp)B>Ka":I$DLMqM$2\E.J!3dmlnm+1cIZQai_fj\Nnpti^PHp0.5RH:?qnUpLF7&$PkaKr2=7Z?mb%]U$tn:Sqq&rE+aW&:TZ%VdlpB=>+$-O7HHQ@_D1O01I&i=+BA[LV8'rS\1UWbdupm5jb-j]o//"0`g@tpN0[`lJibTqpOfena;"D%Bl!H`Lk'-Ua_ZFpNn:/M!d99s^1EN^R5pr&9HDsnJ;R<hPc9/D]WZ$17!%O)#mP<ujh,MDW1lbm(,YO!4c]tcK6n[;K$k,lUE&,?%&fH*!'0a8$<F!!#rI$U(AZ"=7#i4pme0R=AeqU'_A9*,R*V62)hk^"@[cYGQhi1h6eAL!++e)G9EE)VX05&q_&<@Cna7khCJ^E$p%mr%l+6AHU^(hf+`Zam!7Hs5(aA<d[4?/;HK0.0,r`FAg]HtAL<]q.DokdmB%I13o*^3Vg]c9WXEMP@,>7a7u07pjY@;9s$'\".Eh%ik_RN_GBaAWWJODHo>/(<gTK<2LH`iQUX?2>i"<f.N.(>c#S4(o6BtR6qK0#eWT??MZmD.bUsZrq9mX=oN[TK,kq8Vr5(O@R?-LF%gef;#r.q8anIk4YhTdJb^u$EO:hQji]iYYW4I`FLgR2`-%dh?(BaRJ-*JK''_<X?2SVH?Hp](:)^^'b,q,er'Z7nO/81r$QU"aTI%<ShEAL*#eH*TsY?5EG'[KCg$:aqq5m!csG3RpY5Df,G\^([?G((+Ik/k:!;j`"*[[6il_ej1Us9IWKisS^']k/7\@ro&=g9-60]Z%pYJj9G85*j;qq4J/6_e.IN8sN3/,P`l43m>f@/8G="Eo;)1%/J'r)k/>U.-["NWK0">>nDJfoot_%$;bMt&#V_cI2>f^QLJD2nrU%Yn5&YJT8#^C9+mlP#'-VVC@IqS@0CL8>VrTL^Uq`AnJN%d,*aZV`Tb;hu2,H@BCop:%I*-:@d(W:*9I11-ohcNu-T<cOI/oJd%iS%5broSlf2?"OlC?&e)>2LPMW)'s6`%@0:/Od6C8\tikfknF%"Ws1jUhV%uXYg.Rq7WUEl(=-4.XF7YtMT'8se1l@\57qYG@D!l/p*%\gG?tM!9mB8f%<6&nurMfs\TGq+N`lTLt@_Y\/[Oqq.u88Z[iGOuVXWG1`@g2os-ar<2A'a[>\7V("P/=*h<tFYD*s8-5M0lWToa%+L[`THsD"<,#J'8^:jlKpZRONpV$%1!8$l3n<,f4SPh"pUk^sA?3(fs[X)cTc%jS"lmn@JQgH7WA;fqIF_,/'W@kD*H==EXe[1jL%/?_Y->NQ!7WRk/8[;gMUfFt"Dc7798;o=]OV%W2[U]G=.+JM<sg'S?fA8#Kb--l"3dISg\VQQ$IL?RDk!3@FZQ^8\<V8TI23/#+#%oQ<q5ljS;)bHj_W*l'ObqQ&dYh%eNfe^P*%q!D1-&Wk46+,R)cK9_tEWP6Y<i3WV>4ap'T7pVt0R\m:(FN1C&Z!QIU%qGB+<1acO%59PYKI:d4#%9l8M;'gJTX,rTXbXn#>mE/h*\BL&%@@;b$OWL?LodWS6V_Ri^;rREbZ`jTq-V%mY@uW#%FS)Y6=3..:jMsL!coi8k%-!7Q%<qU8!/%MoJ\U)tC.]^L8NN-Q#=7`D&I"[1QrX0OeN%:A6+jpSJ5NE<&NO2R^&ZYc-cnT7>&A&E`M0Ego5&5G=8h?koB%!MC%@Pq[n^pNqn-G_Q,`9&K>HBA>P*>AWnZce/@5_67iC57hS:=3eIWO3Ob(tgo=dM3MGgo)GRDkgf?D&8Ed/hE@R<;KTUfLVPk%=0F/%.ma*p=9`%+d-\uWDlAemBc(oRB_;V==j^9N4N'.rc@jr?i-DTG=X1a>1XUp(35QCOJ[6&R&S<AQXMGW1904.a)?gM$@'W8?:!SVH%@>]K"5:)(JN]o=F7*J)nZ+>UVmM!\RX$1OJ`<K0a-=b9;(eHT"auDNr$&CrW@Ce?*b.M3iRueIRcRc@VZ[jfoVN3R3)F>\Q7ZH&?%M[`n]MpO!nqm-mLE4n@H!_&0W5\!Fk-;;G.O*LLf]39`ZrlB5F'OSeAc#prf$RVHg(DJ*upLfdH1m7/;6M6aKlR%U#@4d^WAIS]u%I"r!3i<sosNJe[a.SH5E'dXLX\pN-<^"XoIlZ;`P0ot`nO1jJ3'1VaD-L>1gXkR\m[a=tm!7H9um!=eT^j"\4CYRjKWJ3K1268mi%qH_hkf_'*PIeWiNc:=8EpWh@]`P`^IIh'k)Th?k"3;rm<?#8hXm-a8)@6VrLdDUC:R(Sg10r=IEkOtWm)o]n.OLTEF'/VK`!FW]@%$CG"*L7a9PM:J<hP7]K,*(fT.LW7UV7dD>F(ri[MSM<H@n!u1lr+FG9-h2N22,Q49cb!_KO!.8AdgVbfh$Dk;`S\H%L>DblcLtIV%^P+kcHl,$Drd;4>LNW(KWuSU2pq>BI\l[T_EqYMP5J2(G<c(UZ-LAA5i[sePa[WDg-`bt$^%M<sT4c@15NdsdrC]%Zc+YdZ7JLoH%`iYZNZLI9IWH1*tVtko__uV'RN*#if"C!>9f)G;fER^&lfS8:*5(#6EFr49)Jnr)sjo:n(?Zf?,f(3)23l*E.3fLgr,nESo5Pr""%W+4@nk$g_s\6c?#kLZcVhAm\e[`gJrO#@MJ7pU:ckAkRJp$)JEF"0+78sa2*m'/F^AhdC_-c8='`A5@/+N0t"p[^.Fq6JAu'fPf>%XqRiYNm_S[9'3S/<h/MFTkd)S\#h;Nk]FN?Rr^\U><Tu^F&iORbr413jP;*+6ot]D]P[INf0SluFlO^PFqDU62Iq9=V*+Lhpa`I:%a2ZX=UMI@<@&'lO$KpGL4p#B\pWb#\Sb)VqUpCSSfZC*t5+rm>r0]KHcLKS>hC0KjJIXQRltN!8_p!Ha?G?''k'6<-ns_Z[lTH7U%_mMXTHV*t8Ae:Z\f.6=/@_TRLWf^ZPr:,)U!>Vd*hB'MX][\3u/MHYu?KK#agW3SoIa`P^;F]*6RkIg?o6`:`L@aYWi<=bp\o-%7%M_Qm?f")6L6=hR^o^\HE1P)Z.SI',7CF0T,(?3GF]GrSR*dc5Q^TP5Ed:AN7:8X6*CU7c'Z8qDJC($Qdon@U[cX*^E(LupUr.:81%3)^Yf0hXPp-N(nFa$.2sn^$7[jtqJSN9ZE>h??\grptASJJkrY-3LdfJ9`hkm&^8=X1KEJ-Po#YN*Lf8HFs7?=^Kp9qd-;oOh,RB%(V3FgTc!Ficf<sk."7U\F*/5]djfjNTVkT*e$&<W;"o2ubbpha=fTfKFLnFZ1Dhbdp>)2*a3QFF_,7UPpu0VF1s*E7MY$['R*,3%%c$LX7X#r*2.99Ss:84\?<Ffq>76VWT<p`"V^+'_AGqgu<*afYY1/%9'@aZka(U3PK@,-%kFk3V(;%K/Zm5+2T^OZ,5-gEFc7V)^h%M@4WWcT-_]6FV>7YJ<Mn2k+%Nod2K6Fo%]Q(!GR;6g+P[=4#gc=B2hcbh^alrR>CrQX<`m,1XAFM,Cl;UDEJ_eUE%\-cchoCnqeo%8bX"m2)REaWTbt4O]!dm7b^KGGXkP)lI(24?VZ:!\rX78T3N_t<38'`W;<[HU/p$j[>"D`V_^tDIF!4rpOKrTA(=G-N!a.*hJtJj%O/PRf_db83\$,3@S*Be#eYpsZ@WW)%:M7'_FYToP3Mk_/Mi=Y(f"8FoZmY$Ebh>u$KsXEgqr6nPX1:-816q6C9?.DZ6`,=Z(@pbU%'UTbL[TRa/FaohFn$Ka=g<3C%%FY6"IL;lV:0u08K$.1t;6B>epAMI$S=`NQiu7U]jlp;uSmP`.Q0KnYS]d#H_s*mYSBp^"3#\59%VM[6j[Q^8E_cKph?&[M/"\SP*6=Ihh:e,o'*15fM>08P/I8qgBNX@S4jqmEO2=(3gq:mT/SA/g"ea9\h@\ap(*8/lDdfu+SKm++#%>hWUDf4.gBCt-L#rohe0?\!Z#AnU]eeJ?GA]e*6Lfg!^tb:ACL.K[`3,EO6B:Xl=Z'Le"mNh31HgJnpWV:Eo``N*QiehnqH=kBV<%bdp:2P&f;ZPI&rB4do\.cK;I6"SZBY7`PkC_=Hk;?FE/sTr1),Wf@tRW;5aJHVmfrb03r;Hr3BC5s;?($3A9aodJJ&]Z8!)Yq/Lc%:doA(NMD^!o(%oukA:^?L?GbDdXAR`I.`Y.JkCWIboq4Lq63sk>B?ng1NA*\FnA!MJp*Gd<maXmhX7H-g+2X?)s,pi1&6*"EC%=o%L\4$;0YIWYFd_2/(Sl>?Uf^4M.r+<J["*k@<SB3MV7%7u`Ja,<"R9YF')7gE>!g:kk.\:T]>>snV2OU-obFR.l3q=KX%3S?<g0LS%<F)WrQ[C1GME4AUDR1>kers*4-<4)KP0,i/odOAc<NE@'9qGUajA%'>+'_r[2L^e[(M[3K<5EF@?!V(]T^'dIb1-l\MYC[G)DB+R%.l>c[kp`[0Ot'N>'P&AbEg[Q2:9JOZTu-_:G_P1N.P.bg>u_`DG=ej"RU7Y^Upem]@4d2+C?Mo@-W4a\]hrR74pLCl\b(&`T!'9F%*'A]>ZkFeCO1-4&4SF@\(<PD%ZdAHcO*A$#RV45lh`n1`&nAleVkELJUa2g33aC(=H)t<CO`"@4<;e#53T>-PEo>W*c*gVEq8k3#%HIZ1pB!8)T'o:VU9S%u*<urDJFAUl9pf&Ror6&hX9X[X%RY=_.L/3F%,$uLD=DdkKEWK%elj?MiX"?T-/XGG-HFUnY2)/g-YJsR)%o!eGZ6O3gPA1Ak:G$HAX8ATqj&#[ma$6\Jh2p&+"qMdK1-iLmQ*_%.Jq(FNb8lO%0<"YId5$6mLHe.Z9an:X`<3^/>9q#gpR)aV3%T?W-E(\@7gcLVONr=dTa%qe6P/$sOVT2+%m<sB*rn7.`s(r44``TifcimkA\BtrWlkrQcZqd_V=5#^0U_A)l`V.YeRl:s;IX,N:T%7$^@S0r*2XSc<NS^JCuJnBTF7CuI&8fC#V72Uld%,o4#a#21BafX`$-`B\:6kaO.&n^TA\V<tihcrgJ*.sHnpOqGlYQ&\T;D'X+t%7_tcOkIKD^p!e^J=(0:aLE5l8:\3+Vrd)5U5pW<(Y1-i:"`"qAUBeaL]0c>CSuZ/@SN%^`Q_Ld5%n@`CPHtQ7]rUfsa\%d6[EdJc%7LZbM@@k11Ji7m%/AtU%TO_mjrg,1"6Md25=;g=8:*:=pD8Y9F*)FcohN]E!70S'jB.qm"VmCb+]cp*[$)0=)*p$cogui]`MSuhi%IW8e:/6A:['8YL1J08`UMX'klaI6=T0sWobPDFA3YK\;/+2HEP2>OXE?36>O7:51,gn-/Fk=F*+JkpdD=k$8#7%jqaO`)Ra2:qsu%lCgcrhu:Y7+.qRfE5-R]UP5:a9@0css41]Ln^&l;=Y%/`2&jfR,uhs`5NgmLk+Q(%h*s4D@rp@8Y+LRU_m[6sQ?]LnIhflcIP8\s%<<YjF^^O2^&?j.!f(5MTljOe,BtVR3*V*-H56<\C[FU]Rq<bY=0qDh!p$<p]C=%C>cAG?/C&T#Hi2EV=SFtDjO>l??VB>%DjtPKt%YL/?LHJnhls7M[FTZqL:=g-uTgAEg59J3d?GSHP'fi8?E92oIg:Mo?G]<s.^L2/r\\a!19\uLaH=R)hZKlp72<i(j^!<`P\,<e!H%8jCAY[A+Bfg!(u3Kn"!^JK!D]*1q_@:VWHZJ#Q;5eD`:IW7U`4J:jVq[ROocI#BeU#]m9Q1!(7*Oq@]93U`B/O?_J*2slfcMY@Br%*d#..j*(F'V<6r-0SJh`oH$1iAUfY3LqS9.V>O-[a^;bF^$";MjO)#?r8m#i_H3H+r#_P"k(A/N=6bG8d9iKI])Au%_5jb'I/6:g%5P)YidX2s^o#9)QjTg"(YJ0eim_+[Q[VgN_ad91ps5;2Ss2mP#o]63>qTi=AK2:'jSUBqkU[S%$h";bCrk0u!^TE6W+8#"!6S-.:%,FDa9Q2&P_s*P],djU4U'qbNlo=P#?b`dNGrlBQRJ+\3ECY`/F^AQutoBF6GJ,AQhZfRP<=.fN!4dc7BI!`6qnR$bF?\@g>%DM%R%0ap86,VqSUoRHo9Uj)RnV_HtIHl9MK:cg_`rXUEc;<`>9=PR7IK0_\Lkhd%$KSH&N1**I1%KAS@ok/dHk<P%)fQOn%a^9K,IAcC,%^3oFdT,$@#?2CbYpQk%GOoFhKJ)TdI.CB)g?QA^Y`D;PDr($FQ&!DFccQ<(t>rh,`s6o:6eudB)G0kL)pBS1-#Q=RQgP]W^CJd7Y%PMet$Vsq$Rm@^RcG1bnHT0Bi5ae84dmJNaJO/`F"hgaf"r/Vq"%f3*>-uRl;^Z=XMYH)X8#LED&^LY^d_coo33h=FurK%!:_gd)E%#6eA&@3=;'lUMI]gYZ!DprEEsYo`PZ7j"#;)r4jq7qtlY`RCUARXPd;r)<C"YAr2VS#b9B6%&4$pB_6Xjr:Don';6*%P"B;s0T(a%>#(r'o>SKEI-]N["s"-4fgg$]3U!d?;fp]c?NJ..5C>]!`qApfh-PPpr-;-sk[OL_i7=IRJ,/'$W^6SLG4_UO'LjOSlMmE&]=;32%W;-?>J+1og:Fe0udpRJ$euO/TSl?0Q]&c0OFT(kY\AfV>1k+uHa-U31_7dhYilV5ZTHA*6pE,$Ks-!<QK1@V/Em_Hu`q;=UI]j"T%rpK1%T^g.oX)D_!UE<hP$CLhYYQ"&&8$ZmVeue&+^A?_BH1g,\@PqtIcpo02-C55=f2p:FSP'1ciJrEYfm'J#733rkq!WEVr;11*%l)JdNPNRG+J*EV5s7k.%\lFBWjqg8Sr,4gr0!-DgT8l-@T=d-(V3Q[^HQ:6_*V>g+pE!#YTWME5\Gk=ap*0A!-%l3YcF<iQkC5OX%KDtHqV]StL$9B&[IK$mcqWB.-r_`GT4aqRPHI/i;^\I8ArQd^2*;$./q]BQLZnIoYSj3&3cei"dkeM]IO8jW74m:q@hHBd'=nYI?%_C00OU]9210-P<2eHc-Pg-;H#o09>u'SY[&MtK;a&3/l$)aa/k_u"ZW]fpoU;E=UF(Q1&Os7uHSs62gVAKR6ic(Fr)?V<7ipsGG;%^FB`I?7]I]m6_lcXrS3Gd0emCrP=O:`WI(MYKIATpu=K362u!&kgL/i5NiLsImeqg[/0--"nLOGk*,[LIIT65"bs_bs3p\ulVSna%]'pI0*Xp\/j.oQg);CNhnea%u$o?+X#mS]Np-7`o^\,=A<)lghh.jRrZ_-,k]NQdb=?4n[/)2pr`U;FZjJ+edg)iKSpZf'_k_2Om%c'@/>gKZjfM'#Hpmd9H5U\K_LoutTdfnYn)n^2#\KC;lS:I"mXkdGjq*oYC7f0=Z;>?OWPFoT$U$;]O9gO44BoCkK<:L/iq^KUHh%oBWq;k5DK=B=`PW'A-GN[CEcONF0:WbcME5nmZ7Ji:dhj3IU5bO'7cjrVGo[GjtQ1f)!pfriP(m9692`dJ`e+Z_srhG]r+Ec`b):%hS"@#bcgGAmmaMD(3`h\Z9LLekATfr]CP,ic`_QmIX%Q2]%6[mH2iSt-#($GZ"(DnJih/`d9lLOHgb=u\C1!7V5:(oQ_%JurT\QB%GOta=Kqj,VHeuKEqK=ChlW*\_pTEu_GBl2Omf)nYA!+k4rH`g#V<@U9ruEH$2WC<8%tB%8qsp`QrcS86_u0'%21;rDa'PBfl*,O,%mC,<Pf)2c4fD!VObGSF"S\?-Ao_e^6n'_e2Fhdm!o_S0is)+Isr,qP_UQ83;:>N\=p$:#QjgU<5(6`NpQBq%;qWRD<k3WD72@o?D%#ST81rq>j5WRp=A4+I5#m_[EJ`Cm,cn^imDPM\#HT>1*dr-SJ;Pon29IQ38S#FX),lINh%jBg69G7V0QBi]>DAt`dUlMTIrk1&\i%j(G8jT=toLo'OK4:+a.are#\`K`/H(C@1Fnd=n0A.J1"uQbS$4ffZgbn+eVTgag.1'6EgA*u[5JP5`2V5'po%hod+-7Dh386d2*\%-JppH*M9tAE6T:_$f=;`I-"$'p4)7%NL^RfO2$?g5Q#?/r2TdlVg%"!omSaOfutQ1Ho+&4<mnJ<i`lH9`^fd\N;;\^;d',jDr*V1%G99PP>m-cODk6]ls*7Uoo]Fcf#/:X4RQaj[\+e:Xa2(81SiqG?IoO.&na#%[s4Ps-"5A9HIl-!=n,MV9SU[@<<Am'7gS*f*@SMaI%n=f<Gms@8+D>\!fTm*Wg8:!K-I:TO"HWU/9<P)qIp%I(iWL?i72>DIrb9"V#59C+npYa8n(@CiYH2>A=;ZiUQqXaF(@_aS"B#cL\%h7;5`?$Ud>Bk?o5YPX4UnujY/J%)sCp!,UU^\Qfmm.%bhqk'odi4bn7#^0djqDb:KLM)<(SpS"ZkPbDMVG-X!pFAIo55s++)Th/$%2a2`F?Gq?=\.>*J\[efN8*9D`gRR1!D[-e!3eV-m=0C=\%/qKAdHfQ<OVL"VnEeKt&\D<2]9"I3GI#1VrWgNk0Jr.?*k2r$Y?^mb%g^5qnf_:k^&*;-DOBd:\o6[:"r^m''9r^(INIT8Z=QP$S5Lj,Y;*:l"_d\Op^V9SXntu"CO$fDL@sqG'h;,7,bq4Z#jF?#NhsNNk%It#MiVgmNlFFL:b/AAn@!fi8C:hG(Er:nMTIXX5JI$:s3[96uDHeOPIF,L.Ih/??dpUQpBLLQRi/%9"3AplW,(XCj*C?PKfID]Rc%M0Js:YOVKR2f>s*XCm%U>FY<@Gd[2hr.&""PP*-O:-=Lp2p@95^M^V+P3rdlH2"C?auZNm`iB?Za3KIQI22d-)*2%np?i,9kdt,:%]:UR>H^C$L>eI[1e^Bma9XjlKRE8Z]<b\LN,13=_Dtj1066'dBCABD^e]gSX=+<'G`.S<eE0qTJ[auH<`fX[3c_F8Hf?Z?tp$e?O%gjJdYgZ&.Qa4lur0.ag#PL>L3d]<Y?]J=*'XnA"_#4!=&W35*3^%*?GhPRpZVg!V#TY'_n7neBHiu[JGbLIQ4qB(&bk$'cJHq7"V%*@E\?k(2MVQ4),th16O6:Z!tA\?YT"qo\$O]SOZGIeLu:rY]XgW:"a\EclH&6ORZO8L'OCj\,EEFX6POhU,G34-]EnKKf,!geNo<%R\V_tE:Mu5-<CYpdbNiHkPM+R1VNM3:&?^A&#[Ec(=orLED"dG0s]6RB7NT%htqeuDbAV4m12@r?BrekfscIVNRdhD-TF\o)h*6+%:/iMs-D+hQO6>BW(dG47`M%oYZ9-(NWt?$.@!t"!r?ApU2hN,dEnV2p=HfLS]joX"AJ$NNI(mAH1gFsM<,PC5*W*Cqc]@o"^+t7\%":B!)+8b5%YBi@@320f)lO(,TQM:cbnt0.VlT^k_V_F>mRQGhY^TT9d]s3muoXcp7m$#,f]&h$$gjF?+e;_h]Q7K^4;s:!C!QR%B%`+r(825STt9]?+@-IUHsO0p@!aM+6:D'Orc[G34*2P7`YVmFK&V!2.>N?"+*(DnEI*4iSF[XV*IJKC`/D2n&AS:Z1]&;Z]^VgG<u%[lDp6Nl_8@NWg^&hsD:9!*S44C$klUoj,9#khc(dT,Y<)gV:G)0Z]m6d,[Q$?i9cPB/:L&&q\mLg^P`?`qqgoD"@UD7t7#WqZH>/%DXn*OruOel]k3>5P-A*B#r_*>a>2UXrnSc;n1f"IcN("mZ?PP.S&"n`,ia7YU*hUQT1uNg52m_W(,!C"0Zb^ai0(e6p%KAgVg"?G%&5,CH)rUYM6Kl^N=?_Idj7#h9l.;87F,N1FM4k<go4NT7DJk&m/m5-%VF*;>G?aj-[n"pB5l1C9Z9*L6RO0?dI'_dGBWBKO9ob[B%o\Hr*h;%q=`<",g4bF-'c5^ooC4/e=diXdBU^9!Rm`4.\(egC,fMmIl_P8!qbMBT849hBaG]\hXC:s,IhWX%chI86J6$)'@rGG9l%*K'sr\1:p#ah-SMb]mdZgo.1;d:KRE`H6.Al*@=M2+??ldRl<F6WWmXa`tB9:N]B*(++Fgp]R,UCTTIT6q)n-X"`2G&:.1n)t.^a%@*qPkneV&R[6H%W<M%n]OVbt2-BHV4,c@#hO,7qJ'2p#DH.DWA#<[:#EMetIJ\Bqq=>N9'Pn7fN#:Ye-Hu#49JB]R\^c6@-i#LMA%K":RYIJRH$I7hHL^BSReTRP0<G1l&=URgl3BRA3LZp#"Wd)HJRg930sB_?<R^14DHTMI-i#=ae/=F>-`BhM-Q-`9a4qg2Tgm234F%2a'[snm-4)PB4+Efu.2WcJ.4&fsU%mn%B1)cWmYdlTsRH/k3MiF<bn[XeRl3dSAno(r04u\!"=W-9_jZ\U+7^f8q$pP*b4q@^=8]%5965Y_5:YHV#=UX]DlC;m"[JRs*a<J3k'?C"U-=[/&O?j`,XLggf1VB[FF6,3!Fo/FD?E&OnX^moM\Mg9&:F[i*]K0rPlsr<U781%9#G9hdI/#FqW]G>iQ3W7=BH4>R,_\?V4e;U`-gp:Kal3l#!9*9AP5e^e&'5'fX'gJ>+JRXfh(i5`[Fk'Sk+`%ldG767[[JN36iX\%3*mBO*9R4aHgs\'@7q@[-%+7d6Mm%1gm;NI,@U8k]4@V%Q!s6J:W)DH"_:qXHHjjW<g"rQHRrPU9[G0mBY$&sQGEb;j8_nUL<:ig%'uoguk)Ojo*.!dj/UK(Dk6'sr>kCud!WK?2?_6q0q8qlCm4!/kWFGDunnJK.oa\76h^b"=rQ2a)l,0\Z7TrUM>/.bchp/(egWBQ8%-'n>go.T-@US0,T>;F^S[V,umAZFr'#5^P#M'q`D&:\_-A>"42^uRu]mF]7$</dsPNA8PaJe?(#[5bEG?rH%?_IJDF8S%,hnd:!r%Km.ntm*2j.GbI+)qY@lRW/TIo[8sHDmAchK>F\Csh=q>gOc#iBf$KD[TMt1Lj>D&>/*OuQ$VjVf2njmH=Y4mr)S5GRFE<AHWM(8<%6.`+P4E_1ip^4UC`S&bfNN]!bG/k#+kf,j-lDGNLd#G6%$b^L,WM(8<6"fkqaYe1bK]N+>ZQEK,p=LA[r^ri!5GsrJT;VGBfqV,q%gQt,U%B,U#[([2ceil2X+X;*=VcWTViAA++r@u$AkP@!ZVV7rq.\"gZZh"9W_,^b";495R0nZU"G^\(L-WeS&?f1]*H5XB[X^KH8%.J6b+:2kiFRF5cj*5&%F(<m<K2>aET=Z:AJVCS=.+r*L[^FpJcc&LDpjtq:hZ^>F;V2\L2?.R9=@^fqrjE-Eu>/$NV@pBh^Fbahf%<mnoq[pu7d1qBH!ba>nXBUV[Q6SOb*Al-$&j^?=I/?r>rXu%@]4"Zr7U[iCIc[(*;q=kYZ_!%>)oIq7Fd%0#;e#>r5D&qN\'#r&%%rD$EF44)%%Y-Z61_j+(XaiBlV"[pCh=FDXq$i@Q9^mM1L>6jlmpNUgiRQA1QXU>?rfmUNdRpd<!>^<5IIqdW%hcK:=9PKG8h;s3S%8bM8^];$<eIau<2*;CuJpqDaV2/m/b3kgG.1&]2?W8Y.:4o$uTbjpmWrlUI>#&?hr'COMR$!,5K44YJ\R<k!]UE+R!RZ?:bBI)!i%pQ]);II*=*`':^X(,/oin+BnFWL%CAMnT3S_s+:Nr6+;R-;aI*Ws]#gR(4B[hM>rkN3V!`,9l""5CN5N6_FjgdqT2k=+AX]HP2Xe%*V4qR,:!.F:Oe5UAD3Zg*W7/$(>AM#7aP4FdWUSu>],O>H/cE+%+?H]f=sMN2tb8HPH&*"@VBS[:L35VD&Tn&LoF?h8n/7i3k.q7%79%kF*(qB;.4l$P><%&4GFs=;%40WrATm8!-;81<5...F9baNVlis0!Urp4(.CJH';9h(b7qTu0P3Jdp\-fiV*goUQklZh&`_<Af%]Aop%o;gu88J\<J'5Y6'*gs(kmcfpJWSJHMO`<+i$"h*6SWe;/RWf4.]B;r'Zjr.UcgDWVL,Q_8VP@>!qK^j!iUEp<.T2=/T/Va"%VT7#DNL?#F5Hm+;p*Ll7ahtD0Y5K4e1r&PDeE":4+j0A:]<eG-]XhaqB+,2'1t2nWG;`2:0!-XF[OI>oPbDAhSj#`K-!u,V*L+,h%Z$`X<]$OM132s&u\m38#%+VsWoC^,TeTi#k[Sh?jJd@;#qO:H<Qolp":VM5=>UsYs?q]N9Z;f2q:$h=/Mg@A-LRI'95B/jAEVb_j%?OtbZ"[20t\.`GP%^(SVOJ+_1H8tKV'3!hbHFV7\TY:/Pa/t,4B1(5.^Y.2UFn?]n?o+s@)pfm=#5)rO\V)D[1TlN!Yf1q*3q/pb%2aGup(Y]gg5_F,%>:kU,FitpgOX"!Aa.rUHPF'mR#n>+3S2eg(bi$;L?B!>gSu8!9e&OGn8Sd[8PYo''3sU3i8)#!K&8UGj>M:/l%L)lsMPd$-#`+]dV]D\Y>dVC0E;%J-%SQqkl#CG0#3B_bkQOIfFg-8%eBhKD3rLO$-mf/YG2dhY%NXU\GY8l^.A/L=N7!QRT2`a]`%4MA@r<c=Ea#&CZ7RFDZt*,;9R,?D>&nmMPW;3`28:^7`7cXp%:qWd5P.oKr_fi=i^qDj1c<-(*i77HM=e+Zn`O#!d\<Q7$2h[Jeh%#'CZK31E\7C"eHoiGG5TPIN]XNs%58C$N&s7d-dl@;0k;$nj/+3/D!l/R&S6bK"3u$3tuq@Ra.7OiJl(lT:HdQGT36D`P<ADE>E#%\>=/H*^jq-r`;_N3kYkV088``Nt&JB7",VS"g.dG@g\is#nk^0KQ$0dq_N#dL4ZbcI6>7<huF!;#&?+@5Cj=9iE*A-n8uL#Ai9G9%qSo0>cC!)b<;DOKkeaM3-uNosBcokJhU)i'?p-c9o[^NIFKSV.?BA=frUTDdqo-k0-eC8*DslIAH?8oLjhJ7=R(:2<c&Fg2[a0?4%o47a`b*0RmIt+qjbJ.pYPUFdom6#m+o.`FQjn-"HKQQqmroBst`GYFRL:(,3fO6&1/p9>JFT5e5^1rm_?+I34Ekeg1m<NX#)/eRm%@k-hiX`i#\o/!mUqfQ8NgOopG+%cK&ENOEQ7rbO%5CKqAbKUC+<jCDs/.Okt/-4d2e*a!u@Q.PRq6dEC/mTMs@<[%\rHdp&URf#`%*qjsqp[Ki4pUB&Q't_."=7!AWpODhtUGFS$7n<"->C>r/^%ZpsI6;+gn)&QIqbc<^2fA!L1f&6[)]$s'ZFANc3Ic<acu[<0e9XmS%V>Xrsmehe)"%HP+nGW(j003[hqe97HoiBMO%Y;2K0'@[mb&(@8Q#4d3Rk^Z)!=;N=8p`2"\n[brd]`2C`(+jNqBr[.+eNk(SqjXY%B6KJDf0+/F4]P7!PMDC/\<3Y$a0(0p5.;A'kTes.lPk2-gk<>S)-nH<]=sk`hZi6.:7TbN]*8IXqLDPf7PD10h]FeI?G95#Qf"(r%3pZpZ8Y4f'X6GZ1LRG<6Y0.=E?FX-<drj3hFn^YO8Mse?:U#IX:0:6B<D.Ofb/YsJfY*^Ha0):TD+hLLH:HG,>sh?Q&2JAc?'eDQ%9Hm82:"L,X$"W.VWp.*0kus43)-#(-q,s/7iFYq]fB$fBf'BE;l,NA+RUJ'Z="R]6GB=VNFBq5&Va&XF\umKi3uag)R]buSjqajm%:BskJFe)lP2UmS`ksgGsGc1$cWp0A&b?7lp9snKOY,3-Y$GFr$>toOu*Lj4#Y04\NRs?ksf)VnSSnU&ff)TkJYGUWCQAjn?T=C>m%X-To*]q2m*Y,crO)&\i22-j98?!G%5]UH!=1E*`6c(peG5UG"jWp.*0l,MN!GB*fTlI,A<%D^Qn@fK+u0a8DLSSIP=a5%`Q$D.ND%$e6kAI:$:3Pf@GSa1AHlXEH=7T-iE2gH\ZG9C4e1gB/.J@48AYgD;:1<]tY&C33(#=M^ZbjefnmXsn(.a6`p#oL&AP/!49\LDdEo%T8$6^UQVZl&Tu$`&+;>D6:[L;(scG0`VM7!S"aMsqjP-/T;uBMq=N:oolHK^"6.3cYIPTNaYg/]DGX-unbL<#U:V'kkft:'Z',s4%%(PG;Le%!\o[j'6H5+D)F>p!rBkuK]GBN<-1jQmM?D6HFhTD7h2,DcclGq_KeQH.jn7YYglf8a+=k\S+'A)gQ\2u)T6h&RdNcl5e%9t7?614J)fq><#sUmmbK4#a+TYWmtSBN5s/-D*jBg"fud?Q52agos3g3Ef5Nn??!@Fn^XUMt`lLD>b:f.^ZOUT$/f+lH(T`Tq2\:%L744Vr:"YRnP,s0>X!-UKVS1J".refDOfaD]S;]iEDB,W*2UWdq^R:IB6J:!ab@-4DI@B!f")X9!Te\kH[38g*o7VCK5LRY9#KuH%q(Yu6-o3uI?+jJ<hl$(JXW2<;lPLoLg=gR/K3D[M9:@20ik7A%HW-p3@rBGYfaW[tPr#JnI/:OcOC9']s7KsM7737h+"s3MWB.:A%g84RHd;"[t>s2iH4]WdZMN>BLp-"72?Gt;:OR\#5;au#*H^u6-A2s=)@V*\I1-EqnGJ:esqi89uOl=@jGK7J-HC>f@`b=DFj),Wt%O4u0@\g_P!q$atdD^KTuI<XI@]rKB/hBR/76S=gtqM)TgpV!_iqQM=(E&Y/)3Kd?R;V5R02>XH,iJ"].:VWGs$Tg;[YkJ%[&"P>*%!Cgatno4kf[BG%&<OYcYk=Wd_esk4?,=9D<6")?7W=tiBgL?Ael0eurVUbl5+a_D"SkW5BhEfORRShIVbA/,/q#&'ZXl/'Frl-]&%2./Z]e(^X`XjrYF'?cb4.`-q.mD6@*)XbpIS;\1ZjmtcUl6/SiDi\)1qsj&G'RC6@@WHZ"O"r?@dAQr%Gq-d0.oOuSQ8&hH%(Fg>%>)FK;ZF)k^Q4-_$pNmWBk$:Ybj1>'aF)Rt2cCX^_TtRoZCk>eH1h*4Af"RpLQk!X8e`iSdNXdk.^G.IQ0_TD#P@+(Zi>4r>TW71s%*,U1ALT+>)o=,]?:VG/qcJ,b0n'tu]T=0c?Y*qd2dJN6EYs5_-rF0F>YO*,bNil[&Q2bu>CNKG^CMS"O0%)_Or29eFin*>bXEUXd%&)5s%Y:mNQiT:nQSG%!I7<aeF4:G)d;%L-Vn_c]?&RP2,r8OPOha=!j/D06krVL_`kMo&#8#)Wi2BR'iFDatE@10-Sg)k`%m[Cbq%.em\`9'kcnKp?"rn"P6X?2FKjm_tdO^XGihV.iGLhO2Y54P;H,n>2%u_4>YL1;)3*HHh_h**;r[(cQiHmFo>DJ,RppdBgHW5(Dqr%kbkSEf(ZnDpE)Qeh;IM:rKfHi5$HfX>[H(^kTbO5ON;'*RW\c1QS$(e0QR$GcX#mccK8<^hgVspBZ,#gTg!,.jDNhJFOl,WoB5G\%h+qPZ`7MSrh70i6(%!X*]#F%&pS%Cmj(.c)m:KTH*oJ4+01l"#F@o^;0kO<^V8Dj>2M$q6.(/@%G&Lhidg%tMPP"?L3sBK:d<49h%noB)ge>b5,@-u7'a0/+)PbDg_?jGZ>pD.cj2n*FHRZu&g;ei%=#JCQ&o\iqVoI#\M"mkss:J!3Lo!GRaHq&0eS*Xngqag4&Il4_h%Zb)B9(qY*8@qbXXN";5&j(?^smKQF97b(%JDTj6G,>3B+ErXd])`-^4-thBOZC\A*oeAVQmG-).ZY2[`)Si'>@M>jZ%+_&I28h`1%8fIL:IrAE5^-B:mIa(5?b_Pu>XDHqumbiZAi18_p3K5?o\\>5O=nhc^?$3^E\7=R%Q!n<]7KUENa^#_:qFIe9rpf+fiAb*d=o!F8%SLK1!akjE%*;J!R]#JKJo%*<Mel*KhIlV`K;fA:\!SVcXV3*m:'9iPVq0cm)B<0?YIjs<4cEC)XEUNDH[@&2Ue+K$^5LEjX"6S.8%XrT=N`63Y.fs-D.q[?hB4Nea<B";DcmpIC%_P>hYVjHFC!=l44ChIi3UHiXGkui5\kSmu?g$t^R5b.iDWrUo;f2i%kA>gQE$?1A%%a%0J%QrSYg<9^eE8+U-c:?Wr^lKO<L[gK?Z,\(Qh7r#,O\)S_ml30*:0rb6NVpt@([,R?3T93-][&9lVjdYO)[UW[ef=W^$J*U"H%0!E.Y0BJ[N,MOb%j\m,oghc\`pJO1E&uW>BmhhD^Fa;qXIjs:-qiPN7.GrML.o1+5?c/pp8aWCYH7&;mDbt.ec`MZ&kRE5mrFSsL%27).9-bJ!6\[6NgdkS.F47Dh]mhP,dYr^ILIP%X;h<K4>hGETdrPj2<H7eY9n+H!,+a^7s?Z2lWn+@WQaX=gSDgZ.fi41nr]m^&5%\RofaT2p"*\T=<h3T7Z#j-MZMJ*$4goc&C]hm%&!l+#>`r.;L9<2[L_YOe.$G;VV)]meutc?ae&2g8nJq,))#;5!TQk[)$oJrW^"%);OO:r`6c_4&GV,lSm\MmE'sOqHgq>X=8Y"hhgg^RmG<rn9b,RO2BA<_7b<X""HT+pPJ>2)dbSZ;3?1+Hi:MX.eTomXkO_RIBVOA%)I.Nf?_+*:m.(j;YMXS:2V4*ta1^*.1JZt0#dogjI]qZ(K^35=lLF?9CXd9^h!-iHkN\H/qMjCJqF7oWhWm+df(OX9ZaeV*HusUj%qtNq5`M7]#hoY1*\o782^7(ho?GH"Rir3cKl0e3`YK:S)qoS=")h4pGCoYo1j_)dhcK8HJnaYab(;Y"Zoc&C]h[/`2Rj(F6gjOPt%DPlH3opa'OHkUA]!Sn\an+E14._Z[R3SD)p,K1FX>Q%gGcjB16F6M/"X5@osd\^)eH?!cDHi:s`3Nmmh]g%^-rFSq$3r**s@<Jb$%^":Si1@T2Rj5'#[?-ZHj]me!TL3L-'2=<sEUInJ:4H6u'DbQM(WUBHFiF>mt(m/:J][q(LU=4ool'V5Aop*RoPBLbec-qBC@8qO3%Hi9hJ/!#%\?\<?Xh!0*Hm(r0t^[W-q2pfZ.l!D-pMP5qRT($($nHH1(,+n4.^[\f0Fm*>U]%:kj&u7S4/FN0MWl(@n?GGVo[VtgX%>?s>0]mf!q_h9Mb_>!ec(CjJE6E"pQ6p0h5A#?>J@5R#>eQ45'W4m)Hg^dZ%N+2LDoD$9$B%^XOO/8n<S'd_3%C0>%$sd1MbjIe/%Q3l%e:hAkWDJ'NS,4*h-bN1sdei(h0>>KFCL&.M!?UmWVYNr+3s)[gG@r:bQg#Ui"m!=u$r;(efj85JCkAG\tX7KD"0"a/llLs].%;qH47Dk,[6P@%F:o'FToig4RZG0bU5r*sS]0n6M+o54$Zj6f.`^:_)Xq<k..<H\>lXe/C]QlgPPIe*<^^L-_QDVY-\o^0obV71BP%<gNd?ci/91pi,?Sh`k.J>l/rVpgiXEd8@2glLagHh_u=GL!LR%?gJgr?)^lm/RA1_E4?;0?i7?\FEI2m_c,`*hn4._hL+g8jl/RP%/_Z&a?AWk)HF=LC4S/N#FS!?IcUUM*?<oYhoD-P>?ftJYJ&&osfh0F<5B!W.0(6QnOdon6>BJn>nb21u5BkD'.Na''A4ZE!=C6C9%fC/)C44e\#/mlA@i3.[\HN_Z3rd<M7=^Oo"jR_5[kfH?H^?,)b4hH2fV/*3EdQd3O(XAXYI/\)Y]_HVjn_o\$GL!mKEr0l\S\:An%\Dg=FVH5_-MVYW=$!OFsr&VN4HgT>1^TRg);8E!07*C4X-9Z4"jR[9ZCW!UgFi*uZ2uV1;oEk9NC2n-/n`#J_Dc\jSh)j?(IOk6l%kkaS*9A:ssG51"L`pZQEGcBh#Flplb)p^G:n#o]9og8B?e+;r_+91-KH@=u#/Zq+jgg@Uc"O?ebQ(-*cn?8[RmFB0?F,N+Q[r1(]%2r7fL[.Wnb%>/0eG2qN(cRRXnrad[1HgB^,[.4.Y)Pm<5E[00)[YW5PhnLF<pJ.o5fUC!U3CgD(g;q]Rr[E2<%<nXcA/A8P&Aino%;uXG<VLQ>ZokB]k8es$bHFNKhq;pGrml/kt\TVuee<.uPY"hro\JfmCkC,B4riig*@;aKkZl8qNB0NmKf#&U/\brr6+UW[#>IaXB%ro*i3=))X@SpjHP\`NdTi:3:TedpQrCZ,dg/jt5,=Q,@tO&3E0BPuqD(&j/7ljn"Mhq%rm>2^^#-\(o"d';WYRU\MhJi693.H]$h%NcU;#`V;5u"*ns,lN.$m_]HI8BkX_=)uD]I)u#qO8`\L<<r$ODS6u'TGO2MUrCXH0:e(!,-]9oaX5u:l/k/VQ6KAjCWN;Ank,9;9%AUo`KiQ%/2T>cU`0LN0dk1?Gp]o,DVQ+chhp#>Yb-+1]Mj5h(Q:0IMNIi2TXr4`'oqV>f1hKeaNQiDI2;D7rNJ1C*_Xio&tT.+s(%gFmF`7JlJ)#9!P![hs%5h2<lWcc\6mqtS2%qmRe*&<\WDR_AW/0jk!A._?MtC>OXJF>JIFl7:$XIf6c+["%Pion,d'G5E.BlR#nq%Ml9*H1I]sh1)D2Um1-+=V1.Xm:EeoOFWA\ir;#UoIbe,:nauW/D!EO?gROZX?F\+h1$-a@][HfVdn`l$M_2`mq.\/DBV/kfcn8X\%N.6/LB_pt%ECnjIhg6/GG.L7u1VC#lir5^]QruTHGls;D*0PR>)rBJa.rNM5AQ$!KN`W[1J!S$ihRdM_hj)q8;>/u:<TOHeMPmql%hL2s6;7+CdRsY?dm,j"5*7R,XK.OW5.Z0U_HV:3*oKNjin[0uL7+E+?V]AB,4RcY+cF,Wr1fTEL,(7X!Wf!=k^5"Yc&pATeqIt6B%nS^PfZr%(Bq[5A!s&onf=T.t`CP\7XKr\qsnOhthWS1.\j<j6ckpohR=r$&fp[b)Y78+K-\[1LTLd%BT2HiI1J,\rK)rfbO`YRD.%WksW5mDc2bCWY7f09$t2p*pntI;_!:U0p2k=6SsWD\I$XcAhU*.K=_kgCp%(JT`]&s*<,(MRY_7qaNgdT#M<<mJ?d&DF'o@^H>+P%e?'@diM6.]\U0BgD<];g%g?1pNcRed?[*<C<uO#F8pW4fClC9Bn@(nP5)eC+0='%1D?"qA(=]ocHH"3VDQtqb$`5XAegk]cbARFk%&"=;G-M#RteYm!Yhc8^jZh*Xb1C9(uZ3;]NnGDETd+_o@(j+"!9m@4Vp[5L#_C]G27J$A9Ih4M-lahY[Ws?-SqZ3!H/3JC#3kil_%<_eGZ[Qe)H/n8PA2oOFsAT.X@97)KfP:e(p%:He_kUaRu=8R0BKncY/4jSiBO^#!"am74:pZj^]s$Y*D:&g#Z([5^\<b).Y`H9k(%jmH10;]FnP.=FiA5&>@"ESIqON`RhlJ)=r=g"N1__lMsiJ$([/gh<mf\N:`\bs,:!Il7PdBV,2mF.+%FX8C[AF5@k\:"X.7B`B]&%:*a^P,[P9R=PTE=gmgtVH$rBIoeeYL_+i:[Y4nAR/Ybk=f9r*s/Ye,&dd55QQ;LUcHo![=>"4Y$rr7^Ue1up2f/IcWW+?[b=!j>(%[U2b,&^q*12/OR&-u?/P%6MBk,2.tRo"Sr_d6+]qJ%'tSC3-$X;o;NijRW;5WmWh4>ph4qY7]j;&,V.oSG]o.HQc\3l2P'nVfGk>%H+2(m)XAah\jOQo=sc]]:sVAf5Ps?i/]h9[p"IjE(A5b(U,N"]FF3'*kJ,V+Vr?O`$S0fST.F6[EMk=q,M'^0]=%THs+;EeX<)M\%=E]&h>.@<NB6r\18j2.FMK]sT>OS6(NU8fo^.7b>DWH`i'2m<AcWoiITq(^lIETdk]Ii^Qs';$CMB\KBe$<5>M_(FVGl6ajVkXJe%s8MWY\,"RbMfTihD]?%WmGmr3UJIN]qXjgdhYqunkO?s0ht%ZH2m,Bu\p_37[Qbd[s7g<"FkYM1J!B,u44a7!P<S0o7GP)Q\c$_p%o?46lO"\9*r]AiK&g[;"'Nn1K?%uk^n_E-'Pq-2oSQ`c-U,o^Yq-Ws^h;@Or<rQ?KEbb:(oBfIldCkpGe*C122Tqo??fZtq0!2hA%q-H0VU5p>gp6EfC`5'*:kM"bWf9PpXV.]*Uhd<0TD]HH:&[BY&I?H_.;(&sEXZg*s0'N6!Ru=S<[HkqAR.m^]$esd\;lfGJ]i-GB%:1(qCn)2g,VcF;Yn&p43*h?J_qsc?;n.]*2N?9Y6`J\Tuq=OPf8aW!l2R`rcHP9f.qh;ph9%W5Ymoq9tI/]GkA^0c]BA-RI]B/qn%\!G\9$^!Pb1q1b7HprE$qUmGh?k<pspXZp&1%5j$'3Yr-?1J+1I9]se;#bLnHpB+l^2o5*:Y/YG:[tur]3"8>G1M9f?N5:lXo;`f%niqf"(]0cqiP/'ern<6Vr(ZAa]t(K3Iuk,p'9^)?]4(N_bm+h#+"LgA*<)6gpL<]qkgoXgPo\fAed<I$V)AbAIs?=B`k4Mnd6-2i%k<nfkkJ-*(`t=1pNVqrard:ld$KZY>fCN3Q=C84bfPR4UHtCK+F??r2@,5>m`D:E<s5*UBml]8#>+R/FjQ+_*Bs!#qq4!GNlp'@r%j391$@`5r.T[1<p(UgL8S\=f9lZ7(?a7[3MIs]2&oPPC^^-)G8b,'aRs#T,/3:qM5T'qG?O"0TelWQLefOOKj<OC=[epk@trKN`d%Hd,fE6AO*+]_Nb^"m3Ko8^NJ[25A.]L7E,*!%s4C!(-Qj!M'X,p#hB?aoI*s4Tr#s!NUS#`rHm$`M]!56Nu[.`TQ%9<!)]Zifd^e%/jPIH5,"ka'VOK<4<@-R7hU=LD7`[2IN;%8Kc=qckG3ISEmaus(:r]>b.DLDhl5L+^GpaioH'#$Oe0=uT&.&-f^#=p3kD\ADk*.I%5BCRZF((O?i%(-)cAi=<\If6YG+RSJhV2nh&5jEIp;XjKp285+"9c8%r2a=&IhKaAgHXEepVF<RYF#r*r6@AOeZ7%gFn+s@*J%Hb%#M87"G9hmF2;?)JrE")]eG^sZ#2m6oqnLI(7@1K+ghl0a]).r!gfp@kma(FK$1hY_fBp_Injh<5eT:@GBIC%[I"-"=;t/k>UW^Ea%kKT(AK@oWWLoV=5rba<diR+-B&GEE+ELt6(5@g/QA1rg#4u1b1f?lV"\W!)u8:KF&b@p$WYc[^mQEbXBUN6F'_iJcW&6nDUYpLC+%#I2]=@ee`M=gK)[K"$+"a&^\KiqjmP]=)\5=PEdtqW=nSs!d<`ceqA,%a26^r]fG8>>4L(^U*I$bUg`&qrTedD/^lp1,CFf$?Q@+%IoC,8pV&Y5p=AO`,&+flQ;XdEq_g"fUpQEGg%r8U?Y5-M`T`[Sj:+DXm'?JLKGD-fQu6]QIW9#<M>Y`>Z[2'2>Nblt"k)64nb"U6%]t1i8r&f0j5L8Vaifj7J,Q-N@QM4msCt\Cu?Or]02trW.'C1)aft[>Yl?kJ`f?)FbXbCPQ.RCPpG(:P+NTpbXY!0jtO3T\s?m#AN%_;7A]9#SP4EP\s6eU-3(;0]<g)$g1T_`F-ehSuueZGR_Gg>fF$#CYhF'le<t?`^$AbA/O4p9.k6ioR5m/ilr+n`JHrJ'MDNGjtIq%p>+K$T(ps1;\um22&iZl8c!OHm9H+=M"1&2h94YWc[J)`pb]I)oC\%4TBf;P/GskT`Q*aQiVd=MreAGErgT]QYJ8N4I<;l9W:FcL%qN)b8J^g</e3-Leh_On\f?<rUWAW=@9FL`XIjOrp3r:G.j6PU-^5]HW?Dt'`qdqS^_5Hm>3C2>"%<e!R6f0I`H";?4cYgBsXnL6@%\*MTFL(Z%(B%7j9]QP^[?@04L13:sP7a*$XktM]7?)5'GLJir3]<FK2*?b[YOf_T]b8"\G6^k3fXC\OKrP.3:I*!gi(>"cZ<@;Z^%TT<b><+!@WIQdXHVsVuf<hO,UF8,=<?(VtS)Dem)V`4PMIokdNeqC[!m>Z$+6W_[jihA]0I/<g)#9LtCDLVHFhf$-qs6%kYS=/"/%Mrap-hkHPuEB,+RRJ`0J]),oRC%pNboBGSmn+1.:IeVUPinKIY8&)P54o#!EpM]M]rb)335gSodmbQ`k^G'"ZrDoN(356^pMVcMI%o&DKQ<,Z?6Ds*kjlghgRs**o/+8PpIjF>R'Q"ElniZCac'@;"fIm7$7;uZP6q;[M5j$*SCht_BnhYbRKdJQLnp383neuL8Zo1<NE%X";NY&*HVset]7$4`!'-Q,U=+9Hp^J=tbdnmfI'S4J!ifpgtm)ce%40!*2mk"6AV7Fme_/o6YO*Nn6p,/k2)_39M2*Db!BP\X6?F%c-"2H9U;k0AWk8MnrGn-j;;r`/^@oOHoS=l&*?PlX=$H!c=]_USto@MDra!*SBC%bAe`>e%[%T:c;o4FpDba/etYS*"!^f8k*IFZ%HBQ@2-I64BM*U'B4YP6:hhu%Bb$mPode1+*ft9o*orO*_B<-8?/b="s?Ch78\J5@]O3rle-p>dRja*%*pg13HQ!"heJsk5p/2?I)%/5pO5\LelUo.;t\::uVL2f=-BX_9hHnGVjspHRP!cN!b=rl:r4_s\[3"ZQrj?;HIl7j35=s.A9m=^L6Ir$*toO;UNn)tp3'56THq%bcI!:YW7;<7aN:oe.Ff"*k!$'YWGtk%#^*J0?PR.L'@#Q.`?%:]G^u]FB)@5phhI\8d$10M0d;b+SQ$^H^lDJ7?kp9AFXslkA_>h%"A=V#.d#bjjrVXl,c+>&&RL]$nrG9pO9<e:9S?REVZ[/t;&$i3%V!1"Y;q\PBiX(72iqEk/sI9%Y(k#Eopjf)DVB!$p=^"@\cjMq%TsI_f6BF$,c[a)lF%KW>bNT>$P]DeL9H]I_(uV4:kdk0GHm/Z(79V[d_441u3)Ue[;p!d>Q2.+:,fL@k.:.)"W*56V-H@;479Ksk%&R*Ik8)2]97,CRiia]f1s&<7*)\_6f6KU;\V-@2hbPVgI=i3QgPV3eLeHlSe:hVeJU::l6]X5b3=1^^ad\\PrEqALH\K(caRe^gR%gf2mkB'FW1-P_Z`_1^V7*#"Ofi\UhZ&O&kg#_sdAf&NjMaX9).E[m_K8@qK*G<r@hPSIen$L%kNa=rI+@)%\?-,BcbPUY3Wi=5?8%U\rL?dWdp9P)S.$_qae)5`nm<m'\$1'e;&Y,nJct0MC)M.P$+KA1a3'.G=\oA5jlh-t;Nm:e-fqgJ'5`pOifM@0Lp*^\M/mKpj2>%)[Asq*7G`5G'&5K3YI9[s3if-2^#8&Ft\[]fL%.#PS^4f*%9&_#1b&]apdl@p=PR#>/ha1/*!7a[nR!6->8>/n,PS>M9*V>2,)S&%<"XRQf(5mU?C)m#BCM*UdgQ?.&:"eTJ:&to$Bd0j9:[$s%3S)=2EiL]'[eol1D+Q"FE-+K#enO7AYs](&aklb*[:&aV*(#r:C6?D%njp`D.4clA9A'r?\GSf;6Ou_A/W)MHh#/DtEk;3EF+GS["FSWc-/Z&5J0IEU5QRgp@@k8GGp6P#:/LFl%+NSO:08Wal;tS_:@S$)%FF\,=nouMhS5<(JL=/!'1=`+Nq06#GPc@h=o?)0mJp33%2?i^=J;&o\hsH*-jgZa`J/Zio'1!s[="%oKW"tP!,4$inKuFAH//G'7%MG5L:1#30Um@Q/Noa7+^+3?g=!;)pf9)=*R8a8P'`N>bsHcf(<NRV:*QaaNhVd_l@+9da'*i]d&YcfPN0N#o$&KY*A)0]sraLfml%hlO\@ZQeJYRF#`7KY0Dt17^)>>=<!C5_K5q-4J/O_fBG6neoi4<C$fY(f<?THU?2LOZ@!i0L3edF*T%t>nf\XAO?2ZPqr#c$Du$(%'8BOWl+GBTYl%H9/cS?d&HX"OF(H5iL-[,ISL`iDg&E%ddE-Xl,bg_Q%8@rIY2t`r2(U!H8JV,$"2dP%H^.ta6!@-&n3'Ws7B:rB%ib9YOD7kN[eHLS;?^8L!"9r:&^)Fk]abqj9I5W;IZ4`dmjZ='?M],L4E>8hl>W0A'*t=fnBi&7KZ4CMO"qX>51l8_H%OM:rZ512Z%WVe!C"Hdbh?i]5"M;8eMWWKf9V&s;%aAr<j'6uAlWk4(`$Va?sR0`TG+I()BH4D:3<E>5*egS/=dOg)tQUFt!!JMK6^ETjCk!F<(%:9gd'"3=i6KqT?WH?DKSP!b9*Q@T@V)\>paX<o:;;?)`U$8,C_1*9Ssi*&^d@mPq_FtPl[@u/LTM[#tR;=?b(R&PK@!",%5fa7tJ%aKAPmBhBXnPlM*oP_(ImI`SLf##sYM80Y:5=>h[\U2Nqc6BRG*IH4@>,A70*PmhpBH\*o-gc)*`\gs5"#YTG7n6V2UAk-;C+Y?qA%/hr4qr3,)k!23]fV&C$_9(=ZU>%@WS@1"p<6XgH'Oj+O92(":a;.<WAU4\TGagtsfCq$+DlXa37*cNgEl+9us'n2Rhd/.?j_F-0K%_AX-1_"&4'%C,Mg#"U.Dd+s>-*32uY&Ta;@1\8"h-p!:MK*BRg1qNm*UJRXdV`E$IVKEQ'cDgm&GKGJ*fVQHHh'b"F4\i`jP+5$Y%E\,kf#)"C`Hf!#V?Dq(,%6,3\N893m>(UF,lGAl]!]-s5,bW0j6:1m-BMbQ><580MA0cQC_?.#^:F0rm1e)4Igfn,U`pmgU7L14^%Ru[a!KNG,LbJO1EU-=JMBhTmFCl&4")o-!G/BrDJ)2pudq,dZGWLgp.AAH_nO:I;,dbDht$3r+B]Y%Un;jBsP5cVIjk)D/2C5BMM%8uIKc``'GETJ3s5&U9>sPY7OP$s>j'OS=F61X\(D$i63CpbPhu.>ie^!_<HF<,eEMQGU5ZjtW#I__UgSrfIMf_>!$R=EYX8`ooO=%&W2t7#o&(e7a)Hi>g2cK_M0BTf4QS<7NDX/,$MOY/U0m28n]Cp7-oVbq^I\#cW^h8P4)tVhH)"3PtZko!+?0D;$m8na&0feR<+h%%I]S:RW:71s4_c>&Sd+$Aa::QS/-l';>U0h?J1*X>&Aj5rAJ/PigZc]^**5$Q&mXFjKHFi;Eagri>^0*\WJBEFMTG!'!ntW?<Fd5W%SUh;@:BR5a6goPc_l-8EKb@BD!>,tT9INj$,Co7hlLtu>nieSsTr>%Q'3HtRB*]*g.jG;XUf,'M(u6L#42n1LIH=UrEci,@Ig<gT%EiA2%p_5OjU[LXW_;*9T<YrJOW,[YW0;-S2DjbQhJ(0=:Ch8DY%UsS@K8p%NE]PGFA=f)eaGg05;5>n7]mqB4oRU[iA0J3+K*'0F%PBOb99V)nsad2K@YsK-D.DZ"@ne;o`lp];ibg6XnR]jQ]0qu`*8QPCt'[T=F>#b&M(`<XZ2O3YFr_8gn1m+\(IA.qk&/e2c,aEWk%A`Y([0,?93:0KlI^aEW;.h-tQG#TnqKej9`6Tdq\j[rWK!bZe1eT#P*ToB>,#6A,Omc\Er-:8)Rb[VdC,q:)^4o%R3EIJ]/BAgYB%1_VD:%()Q4:W_WW9Mb0A*&E\Y/#slc.%o=/@;p3).*DWb2DgVg"XG[VR@$YK#aDG@-5L4_R:%Qo-OF@8/@+=sjMjMSXV<lg&^719%!&Kt>%@hnH+X%F2X4&O!6-6YOAZQus`Ji_j.54'pW_,Po!YHKSe(+LcJiH2u7$&A"]l;`dOYis3M#GRAJc)n6;9^m3@+5[kj*=#u%G#uQb1:eGl9!ORLVW,6%(kr@P+Mt*h"!AH/`'Y7+`>C,CVb.Mkb#S9D&IaN\I$a;Y;U6$%"\Ah/.)PO17b@p8/(H4"J3O&[(/i@6%Y[V%V]=a:OgC7Ss_c;um:!j[j?(n%pOHrI13_P?VUmuHR;rn(2;Wq=6^OUug@\4>D'm#UP3:Yr=9i*o/EqJ9:"tZORkRQkj"JKuJ%D7G8K+G*QP%cL=&HBeIclai$iiTBV1H=dg%l[C9$=dZF7`8qhZ1'hoVpn0X)Tk2IuFXkelq4<[l_>UCpW$!YLld)VrH`HupL!ENV%*eMXmC)0`4,n$$V09n3+GQVdhJuBsU:J.Ob0Zi)Zr7/XGaXKVh*^YNdKF'L!]ADN_6dHp0ZEh<nCKR7mM/f4Ta:=:CV6G($Pupb+%:B*-+"L<6*&9Ua=&MdI13>%4e[mBJEUp*[,Q6degWlh3kbH_AIC.,q"!\+eW8<gs#5ta&!U87TaT#UIe=GiiPM/!_>KL@d0]N;_r%!0]8?O;@P2ckHK$$9PO1JsCaW@F2GV`E`I;e9);^:s^PY&>;W*d@!@A,=kL*:0`lJ+YeSS@QB`p'FoY[i3LX\7mq</Z*H0cZImqV%.?rq^N4ouG5o-L@-p[Da-(tkbr$B#(*`?Li_46,]-H%=@"@bd*Gaom])rV2o8NR>g[J#1m.hF'ah(Xmr'g1>Re+XtfD+Z$91D++_%66_"t#q^E*8fKJYC+P;fjT7M/INJL5/m&6"QmYUqS;8:*!+OQYL7+pDE.Q*q+=(D`jVfi+mXd.PA1[2-/YR?8R1"2Y&ZmDk^h]pn%3=DHNiS@M)Qdd#``@$pN/h6PL"'3B3<e*LgiaeWR/g?!W8oXtK1:O8=4>V5a5_uV:_F*adHPOB_7tUp/)[;@\;Um3GR$a,;bnMXU%(b8`Jp*&]r=Kc;4&9W!:I7j)ZJ7p37e@s)C$rf;u,n4Krn.20#[D%7$4V=Kc>u[cCdifk.-%RHd5u[4P7Z<cgMnkMM0Q4JAL++!c%2p>LtUZ6o1*&M'6_35?nrI?,cJ0[WTo->3kad]*+86&f\0lV"QG=j>D3OBboT]=7@h'PUe-RC%@m>3e)b:/^R`/'[Ac@eDmS?h7<%U;Df%<HD1%R5%W569Zm9(>,S6KrcrQ_*_qP$[j:BB#V<R5QXh<9W!qn(5O*'ndU^#+Ws3-f@\[\$[*c?,Ln3R?qr_"^f"cQbQB&@%=:Mf7-m's5do&2O!oFZ7VH!)DH&;>uEG$-$XdKGQ%r,W_f>TG"i``2/LLbS4LM5<$ROd=1?C%r^7CuM@!p3TQi6K]S/#n:0I&[X3%d1&:,F0KTo7"LWZ/N[AT(0TDqV.rg,&fE\*Yq8ME&K6?1XS+qpD!hB<4tN=eTg?\m7>nSifWrSda9ubHIV2(GV@jk2Krc:F7?$/f%)"gq*)oU1h"c<tn!]nTK^_N"<QV?V4Jgq.OiZU(dR(UGT_Hhs09hFnN=?qmcB;^#6#S\Y":706V/Zh5GmX<;D9e/[-1)C^c-'fF7%#a,9M@qHJ>dOI\)N,\sK\."0"dJPt@:n6aQ<"f*bE2,fN>a:/CE%>S$JedR"M8_6.ilIQJTPJM-W1X8/:4[Z?-pJ$$<J7\[M6bY;%ZMAGLZEPfPCrI*<KLa$1K;L3=571>f;,P+7P,VD=i5P*HL*8aK@%WtA-qfAe:hmd-<>AP*fnVsh8#;eeT&I;Ue7<Q2-\.!6]`ROQ%<iIKSP)""HOa=5U=R#q*3J'@%KSOL\"qn!olJj>/>30fo%"[a#NgLN9^ujhPfeGB##?iZZ=-45C?'jD4F[F\UM.K^I-YcPZ$"5tm%YZ,<9i=ot$Oa8cDh%Gk_-I2!u!3c?H:n_2U_;c0"0Db(J@'BXi\:ikeKH_79#5D9Rq-k[Bb3XWqML.[>&G-\L7r\j1h`CXJ:gk$[%/F``,!=gpn?t--na@I&dEf.jR:1r+^;Dm"(UG,1Em`*>*#;mKoO<C&^'Zn1],,dIIo9e5k>oTqK2CTM[15[7_<X]kDl<pBu[7cml%&r$1JqJ4VYVot,]CW.-cfPbLDW^NQmE&FXU@]@oj[O.iHXWc?F>hoIt;jfdU3#5.Rdb<fL,HP?*fne9;lKt8G>?[X]VB+c\R3,`'%6,SQ_i^@e:Ltt(YkDg6en<8!GC@;[@Qs?YMLG9]b78g+F;AqN#?sq!5j2bc)%`iY/7\p,'SHe5l9eA/#*+[&<gd[m@TUf)I?LB6f%2--\O1e*:#;lgUCNsroMm4(tA7un(bgP#N`JuNcekNO.HVVgAr$Oal\_GRW%Gpa$4SeaoSKZR*V6KF@K%`8#f<]VqB!jfs'&fda!%g8RX1WAId&'2lP@`MH0O3WB)2pQ1]1a2(]q)Cne!O`0QA<E',KnA1VUjjHC4;_t)F!nT0X'5esa!K&]1*asVS4,R9L_bEP@.&#pN%S'ur$$&<mrW^`O5O,G2U?+A"/85"NURD=N?1KNj9:(Qs"Al'>%/k@Z(pKeZ[)k6q&%8HnD#/Y/.'8_:%<Iqgi:nCbs:_b<fCZ\K%%9+&7gCsE+ghFjQu2P.c?`l;5Q$,$8:8OJCLY_oqj>F\f9<mQXUh$hFX/SA^9&lr0"DCnVr88jQq3&.qe^j(bNP;5R1L))/&'>n\T%9MR.,$"cpa8=3p-2jB(C71rr>R%^8;+IsYF->/L=<l=VXB0lc\L:9$#C]&5hk6R(P8eWH#2?:h%,'>_?7Ej('Vs7F..-Rj[Jrkbf%0g+^U=Q9FR#p]d!F#;4IDbsp61(>D'-DOt\C)Em)#!R%&3kU^3DoG1g(e4N^:R/ICb$]'ECD<0fi1]ht6;C`-j0T0h0boMa88s4s%<RLSJ=_QrLRoCj-5D="?k3X;-l9#KFUXI(i*JbaV0^/@S:*ml+G#G>!,*esq\3H4?UH8bPJaG**4MmNtS81uSK-a>',P<-[V>UNq%Da;^\Tkm30[@$084,b_TM"nn,UWasQWeU`CY$k#8LITF;ORH0G"o5]6V++>0(QKqA+f1+tD0+FP@ps1!#7\1AXW_p"DAScF@%S'<%<+O.)dk&rV@?I#T4g?<Cc++fi%QRl8n;3V&3@CtqNe7JXo<:oPd5VaYqG^[]9[<)=;rD`G^cc=q`Ki=gc4fOu%SrpLG"kC15&Y2:%H(i[ad">fc%g-K*nhAgK(_-_3,#q&X-b%qGeka(fbG!-Ib/LTeAEJ"U$33qpJT'VW4Tp6I3+$RB'<G-$NB,Ja.M"fDTSBio#f/WN%!!A.f07Xn*N7"ASP_idNUp9fa*\J3A=IhnA-4.]n+>kAfO9`VZJHSL4G^+HE#Kr6?+!^WEWm@XidE$,ZC:V4O)?"^LQ%)VRaI64b%huLjB'4qVmFO(5V19%uuTY8NL<@'cXPX#Xp,Ng/jGjrBX\WGnm)g/j@#9`2_(d2JDZO:M=IGS=$;8?a:fgcXU'K$.&;`-ri.4Y9Y%I9LU`MIr9o(k_!2dfLUQ5;[G5ZR1Q>Ag0Zc%RXViS0CL*Aq^K29*Rt9<U^F*)Y9/DM\q-oQ$%uDG[dGIW2M^23\uD$8ju'?4r0>@%!$L&b;<L1qFNKZf#rON94/7<\L+a;2;o%E:/:O1Y;^q?(i),M6b+/9M.%lEj29&`3ZS`_QBO3"_;Z0:lmSf(-(*FCfW,_g29%+a$%P7kd/il;FO.dPoGU5'?epGW.l<#418f#m8M5\''_[(.b0jN\f8GuTF-5k`1#ULQ$`Ws7.6,5;.#L8AL=eY@8;l5.3qNYM\/l<LCJ%4!*O^D.m,2BY%UN;kr@Vhb%!B=>[bR@"&7fW'`gl_dY4Jd-AS4VGf9J(D?9n"HQGYEK!!udE9CJd@i+k,%=bG,SYP51JRRn9*bq.%8f7.c.-#*!-8=L\=ThMD=C9$.Gb-/BL4:=@8#B^YHU&KHV64p;8HY\&2]6<I!7JM4Xme$ZObaN\*<96(W'X&UJGOf;AJStq%K(F3%&mQ:+-W2Ng9cXf,[Y+ksZOu`&_.mR(K5HFeQS>;.<nni+dGQu?eq9m%APMTE9IcP;op?F*?]A('o1T*&;G^ck!(-KTacM4+Ml@&\%U2MJ35d_2G$;_1/K+%dR!7`'J)*h@7b']ROLdsW.?5H</b*6TBL;\GsR[2(4eVE2kKUYCFTb@KI%e[%Cd7%/<K0TYT;[U&"q,3pN%XpCn;a?FeZ%D_+kWPYRo*)d\Hb]uYj5TNN'KQRV?9K-sf[*<7fil3_5(BS$A&]3i?,D\4Zj#mX2PK909b;U)pDcAH#W#i$B!).&n%&=Q0WJCr"":9/m["rPdA!20Ed8;Vo%Qj=I6%FHJsas2-:JbiJ5QU!D_aOGr\a<TLB]Hq6[Z'H$m0dI/B&.<HeJ].-KDbo^/)"Y!4%0h.E6/b]DoM)<jRFje!jQ3sC\7L7H"JN_Ms)A)5b`l;"]'K:!T_]3j:M%!D!$PZFW#kj%9Gd&D@DodQbRYXL^U*"M3"0Wp?`M$X>%8?5&,+mn7l[Ig^JP7T/-rucWG)KjIFCc]Dm-3-;4:^&(oeYu+W#TdsMJg^W8k>LE(8Y*bZ8XZST[>haY-_=B?96RB-B8Nj5%]dUc%&@#9SXTs_.RrB$g%`-V!"+,2hZ*CH<2t6n-QKMZ_ec>*fNJ)_3_W*h8c.$8c5:LD/6@41@r`Im0=50#>QR#VU4_,a'6o:iNN2IIk%SeA0/_)KF>TG^2@U(Nbga`!:><oWWt;(j!@4+,!JJouEBVWJj'1)a'58o,<X7cd>IJlMk4-RI,q^-bXW2)\F%-/kP$#]LqgOq4,s%6;JJ-KpbjR`/]`3(4<5l'b+Q>H&43kR?,>j@\#DVli?$bf"n"&Q@):oM@0kQjs']pHgnso0@f@HX@uXYN^oUPY2rpV<(>3:Bii;&%@:248$Sr=b$mS6l6=u)r=JSA[)Qfec(:k3\MeFjaC14+,a$@Ku9iR<+7E`S?`J@GACSPK[1eQop$MGTIas$F(M+teY:Vfl8"(cH)%;Gi2k3ABG0H:9SR?n(k/+CmTf-l+%3+B/,422Tf"C7R]oYG+Z9*_$DkEC*3!jpbT"0MumH_GHRo6RB&#&iDj<@\i<O#[T;F<S9M]%4%CA<PTCU4d(Et>6VSL)4;Z\;N9hjNe0n+spX"R1I.RF)!n"IkjorOK`WUQ/3AN+X3PaM&ef\G5+oa1G49M0LDI#dms!4LC;lE'6%fcF!oB2l+fRlGs99O,AUQ3To(]-@YMAf?G(A=D^&4=*n5bZ+X`X4=2H;du#b7RrZbG"Q.>Et!1<V%O\\9rj'!"HN4kR,8BI9<<Be%%81PD>lt:*&,;(J98$)dQk`YV3dOsDB^V$32hXCEf88VY)8YKhJ:0#\d;)+uf.@!W=kK6@pC,>*%3uM`5.P,X4Y6n$4A?KARi2U[%J7t6LRVV%g!(j`7qO3"f%6ugh;8h:p'T!Q@FVDPeF&Asl,XIBPV?YM\^e1n1D2f1]_oOY8604NjPtJ_=Rf?5<3K#a_*,H!(Naf3%%a%Y)dq^G/n-*,6N:Lnr3<<VKWP_#OEL)]Up@O7:R!0CQeO`Ug9[Qo($>aSfiJCUO<'i2G-#W&]Y"D/D5m]_?UZX[;A9icCR78!MT%:3''qJWOAe!7f69qT'jrTdg4s:.g^.k_uT(8].Ia.4nN(NTr?t,Z2EgW]a1rTY4-tVi&o'A87r4U]Nk.76EfW7`'6XjK6E2VZL6e%F)\i=dNSlBC'12%#_5=)-ul*#$=WX%bOhGW,tnl%G8kXf(ekZ?GB]`e,%;s,96Hk(I>*KYX5q+L;%[T`5p#&Dc6sohdeR[hJjDR_%;R&*G]Cq>l5Utp]S/W3:HF=%cSq?:::nEjs3+0\dktsj`'-s)]>WtM)($8Z[W)Q+O03(mcUb^iF60',Q.SUrg=#:JnK^0Ac!X:P]%+(8:"K9`+Bc)*P#ji(Dh7.\W&A[;dUHRT).'8&(-]]*?b?<0#iYf^!++mCek^;\aoJ5]G+.hAH*e'sMUaHc'+ciBK?Y0Kf.fg5C%%<3=A3%bRt=V7-rSQs-B"P$S4@,/i%5atTR7(1K!<;sP*ha[$-"g1#`"]""i%#,3/38d@JW'.kGjbu.ZU]Uh+nPZ]S@U+NR1SRGXE%:^^!e?:&KMp0XPj8S&t>Og&0"e%OIGUDIqF'`9dWjY$^pbg;BPej`7uN1;>^C,[#DV5ud8V/?=5dR1gt@p0rq-45`(1sG5n8;l#C%Rb2-d>L@_N8Kc(d##8)"@]1!(cdHs(LH1Qk1`eBOdRk/YRY)*Q;*3)+A@$$3bo^F5=_biVReB*_+H3"uRD(,6gn9mFWi@1pVTU8F%s1AUk!f`$DS(M?sG")^X!A)c_*(FsdB#Y?a>E/,%p+XnB%%MKY\7Kg&'9h-Zj]5o*$n#28-NJK*=WUMZ=<=H-FeY.LbXG.*lH0/7%AUEc+7:$QP=[:?>4P?,^KZJnI4)&elS*k/@[\O=00mV+Dl22)D1ZG^O5Y`LYNMPh,7<$kS:gi89:RO7u.f(VdC5"$0)R/.*'[e^_%]bBO?ia3]0iRhQG2dj2)lU%b8Ynd\B-N7TlUZQT/Fb;!6\4j",<jY.&l,b3Z$6@\>""uN"1P@6tkPS8X/ZSpS0e3pg%$M)52Po@M%$S8X32oa+Pi3G8UctE_$.=I'^XCtiQYh\M$`0O\hPUiTIreiTX.Bfgh,C(SW=lejg-oF:$lRNlN6gOi+1!VMiDGa@r]rM4F<6Us*%:SCVnEj1ejD8D_d%A[OQnh"7*.Q`LS;A%h3r0#_(&46P"KNYQO,>]&h>V%*kXiA`tF0V1]nN\KD)CR]X(8.NDYm]^]\'a_tX<oce%8gAJb0`HPm(jh.eRUd_L(b*\MEr%a<>5*oIU6RLt!g-Y&UG,55eM("+`1mbn&>.7LT:ZYtfb$c7e*ngY15]*.QZ2dHTOnm?def2*%+%<bs#$t5tdDU3:0eI-2C?4`,Ll3m3(t9SO'-gNL!Q\$AYm^_em'W21?5q1IZBha]+=`o:W_US!L%Xc4+U:]I@H*)mW\>?ZTmUCr%T'U*Qa3#@d(2`9qQBPQ0>O>QYL/M7#D*^L>]O;7,k,Bh4,s3WQ-@//ce%nYOAUYIZ2+Fo/1l@8F,Y/)IgTXR)-*L4kTuh+S-qK=(%,<0k(hO<L:fHdU&KF.MtKG-HO05p+(!"sAZMojGBF[^m5e)l>9&mE:=2%8@!3X\S(8-I:%K`K-<-o&';KN/`CcGeC5A_>9MMrZ*m%UMY,,@b,gm"cdr*HC-\7)k%Jbor8:*fHaK"0`6tgRA-XtIAoj)3kM7eKi:h`"a)Zr&Ni_=e^^7\&)3(AVl*cV0.irr*tPS<WDt11%7=_V]U,.]-8^Sb?0T,p(<&_-q&R2#B:bZXrL_)C$$1&im2iAE/XC7>;"e81jD&B,')PIQKUSL5;N6L$F$$uXuJ]3h/MPMQihC_-!%>#k=Q;b5[rXN[ADKX<7MgqYOOiYAL$C:aa7U1,#@[9XJ3S6ZiEXBgLAf^PfIMjX7X9FkbP,qKKU;J-f>fbD&C34gT@PJdO7."F=i%."GI4.&EAEP<!:mU!]*:Z[9:iVa._sZS$2(C(WM=W3Z:6fL;1,HN3nAaKoEcM`$H40UacU%AO''@$Dt_0EOM@\'c3bJ?Z.`?l3<2%R4fBo7Xu4V)GE:k>;WRCYj%)P#F5u!b15Gj2VUL]GYs.dbc9j=#jE3gX;5^`6Pi<TI@Ol%Ss:b*,/%R+(0kOPi@L`<RF<km6e4$`%&8rG3R(&"UQs)r^</'k.&Kj)I-a8P-(>2k5#V@8d\@'U;9$q1E$LOQb[SbdJ!O=_t#\ZRq:MgjJ6VqaaX<LJYUlGIg('-j5VK10u%OiN72/.*NF/.,e9/5!:,+nK;CU'>cYRRK2N-M9C*.&lc@^=3o/%&LlFL6=Hc<?>)V5WDVMA!"'U5[H0JYd]NUKP\Nclls2g[9XJ3%S6[t__bI`k7@t@HPJr5*!J^]WhC#\%/8`+?(CXr;L4k(C])XWV;$/f)0#oa_coZcOl77^$s4sk!F7F=JGF\'/,:49J3XDHsm$l-c%6lEH7.VpbT#:a+FUB<nYRE/>2__l6[8Y1V15&=<<k&(>`U!X1'p_ZT>"42"Kb(Kkj?Rf=Rk[MV&2!?3OUBqml[RQ,fZEOC=;PPCI%3\H=q2'q<0(t?kJWG8nuUbbf/IF*YpB3H=:Y)LSn5[O\n=/`Q9H>KDQ'N?qM3OfZ_Dno(4^K%dc&:53DXUG2K.2#Q"-qD#`R7)lY%Z#%W->8ZUk"g]sBb-8tp7EuZB84#VG'K2XZh4\7&[[aRO+,h1TbnuOXL].S3XUHEP&G^s1+K5V9]UAQR5e0oeiU7*l,#_Fe/I!2$%45O@rCfl=A,,9394I8CHYdhFuD('`b=$ruYV#uH;Fe0@Qa7p"l8;(+:LlrKiaO(P)(rN9R:buP\>gt:t9['o.K**+g7G"39U\fQN%EkpH7FLX=7;GeHjRj.tbnK=2%;',<oOcg!&!-LTKkqUo1Mjc!@Y0^\j!QkH]?Uuk<0F/T.#Irc-%mgA.llURK(cJ3ap`3(m.Zdl3%%18e",hf;MD+PS!6hc&V"M.gs[#<.Q5d3C/kj.G-ZuR-T0/K$$EU=*<UBUlQU9a013^E,PYG5S^a0>h0Y2g[_l5L62@&"kAhUdmP%_?@mfM$!O;JXZcKNffcf%VA+_&9FQgl*9UuqO/kK(,d9(8d;Q"A+!EW'Nme3$UdGH5c@cc,h#XY]N<"d>M.8S,E[otZsbBTF/[Cd%@9J9GUr]%J8kZ-DENj]7:5&6X[lOoDQ=j/5gbZ2M]7-+amOaVZ4pI8TeWYGSn9njj3]Cm\#o;]4dCS1d:_*[V5tOWG3UC=SXlS95%\Dc?VDVjeX7ZPc*]D,a[81QV]e3XOq*K7]%%'OCWY+OBcAB<C[1kKG%ZM@[aem36C_"^9T2Vu;Z8;oN.&+L&%0It1d,S`7smI>8]%K>HCq[NSqUU'N;!JZXuY$\L=jj<\F,[<csQ7!l,B+_^?Z,Rig@g)O1HP($_O_&?$bo,"+OU=;3>mqpFiQ$q9lNEua<!+R$#[UPU+%J_d#cLT,^sRK9#@2HAgg*?UCb_$s1V)`\Z]#)CVj\n87+JKfq+Z%2."=MSF.Cg&*XC(e;``\TXsKqs>^ee:10(el\l#L%1[OjO7(%6dm5._[eb(0PFL]ZV]3^/$ms[kd#d`Dj.\-g(:X;WB'&c2s*Vr.YFk8!'5j#5q'aNeSWt-Q2+4A:%6Ao6g%PXc8s9$rs[6TEA7m>%1k.l2(3.mu.Doq7O_D?WV2.&c;\L>r^$du%)Ltkrp"_;;jS"[E.1[,a&;6:qUad<;Uj92l&b7@&)\08Z:ggLcPU\H]O9RX/##-aA%4p`!]m_R*mK8tci?a_Z3XO9LmG$<A_1&`V(+Jn?tF:D]noR5csQ";b>F_>3Mb]Uj,k+l\F8D4*;Gugb"1peBdCMe_3E"0Wo1n;CU%csetF.k*C5@3-t?TJ0$d>EmuYZ;H0bB=S)FaJO-Dor5Mf6d&<$ANqS&,(]+kJmRW/&JW%54A/U>j$K5I=YZ.T@KpuRgbu>cC]2#r%2U"EH-5lm7i#Q2P>sUVN!La/4g]d]d.KC.42;rS!c%:cGKr-V,8A*%ZQCr%Z'."lO:Ump^##/&Fi4)<85LX:?.eV@4/j"e1NO"j,%0q'J(1o1^o<1:Eb^DofuZh\WX6AGYuX+p-c<&)9LmiZkYZq8gIWCe]8#bd@kY$@*%+d[es'#69QTe]j?AZR89&2rd**g%=WSQ+e7%i$gMg.W%Yg9:0l9":T0MNaAr.=[a85!:=N:!LS.4)[VdA@KI0RV7orLUIqZ%Y6!?\.a+LK\n?&ss+tB=*Fu&soQgN`eJ`OGAm3o&%Zgf?R:Q[T0%1(6!8&.cp^btH'"uq:SBEP]+XpBDN3J-I]k\lJ1aoBlUb\_f*`1A7.KT6A4&cEqhFu!4D"&.O%e&.'kjpRnF+WOpF%=2)Ig)qb:!R[(s4dbNpu:#*O0l#$[uW^Q"2/[=;*QBOC7Lo-`K&1)QNdDQ#O@!"2UQ0n4j"$P6gG#bW84+*+NBYa>s:;CPWCo%#u%!D2:`cHPFQ@=/O7Cck*b2.CNN+]TFH?RT0C"BpXI6eli_P_s+jo*VK8H"@kFK>^fIEj-N%D5?Wo2LkrH-t+LgjeZ]><YrUu;kqKB%JsO@iCMY=+di+fX2O:+:+h)YP.,eCj_Nra=P,R'[OeN%7=(2^,Hp_D,(nMqNKD1cW8R=uI8UD.&o\S1/\la.h_5$3:REn7nYhWiD%8$')L7ZV@A6!R.:N]#DU'$>N&F,)Z:Ra07UJ*[[i/[=D0("s*WM!e5Gf_Qb>$Bj1p'&Z)OD%FX<)F\6A@Sg<]-C*:<'Cm0sD<qA+%Wdo^EYtEEa_^ZAE:aE?p&40.EW:ec,Pr6ns*=F>g+js3OMXirmTKVs9gY3YO"DEeICNjSH$`$7`WoJp#H-En`;JkJ\(D?KtdpUY9%%:u-OW[K/rY%!Fu?/?XpOKo@-">GV47f2cZV2NLAS!A)k(/5;^It9XU?U88(,a`k;X-+s5?Sr#$1QX_QW%7+o+uY>e[CF_e;lXc"%$;;26;H^rhN6]u3@Ne2TWD^W#R'P(NDa[E"O,&sG7?P;r@>-b\!NBN:"F!'h(Qk't=Mk&Wg3:6U>%;&EFLhKEQ=p98`mKL*@S)tK%JG'-,+^546/lM%G'F%pkgm^rHo['o7=Kf4Y=i!^>_#dn[=]%+1F:_M_*l'7peH*4QUoKZAs,h;bKM^`596?qH(929A*FYO.)='!p%$=>W(U>*f:bB,FaPdFe.%sS<b)jl4/gF=73QC6@+)FY#J]:!uuait3.A#TfWh/\F-M8hEp.EN]`Qde5_`70(Q*X;0mM08?RF^nMJ%62A3IhQ&sV,ZVjg["h@b,?m.D7MGEu(036>p!jW(p@:&`_P^L`f,+gR$^/0u4i,UG8A\M0[cb>rGmt)3k?tQ\0N7[G5ZmAPQDo>T%&le:3U.rH9[n*XQPjG6h28qd>R.g'X.R$sZP)s6?Il_,X4Hl&<Gd1*Q;$8ZC<C(FeG9N#_=!;&r<Fe7&#Y-114,#\m$GlsM/aD.C%EGXBqq54d0T\(Uo#*EVGQZ>g/("(a5$C(s?rijJg`%X/l1:r^oNBMsHh=.fj<2.,6kf5Bl6bW@j'#<ZY+mF;J):QL!8lJmE(?76a%*hr5^0.gSTMSQ;^lmO[0S%].80m/pG$<h^"3?sG['mt.Vf$nAbX'/>b-8i_FjJ]1mm,,l;-ur$K[uaQ(%2@\:c+3+o)4N.8N$hON%?>*_T8Sh[60j>FOilMn.D)L-hP-PQ,.0s+RKr/6IWW-1\Gg`lgJnGq+1l>HT<'l<Gb[_Kn7^a?cf%PLd7R_.ZmIN[-BJNeC?Y7lS%QDJ=S[8>P!8W/RF(68_0*3=p:>*W]9/Si=U3eN1FREWCLnc.&.-@8e[^873kc,eS=+u?Z'1<W"gCfU3c>CqV-"80T8a8r?<<%7Q;%V&&Gk>LAF_i,q,'AnX%?N[lD?5VKKtflG*D=6`'"k^m"q%im6[6fT2\GifDpiuMQP#Zt`OZRVe$e'N8N#t%B4hV.CdBp6KlG4uPd%]*C$*]/0""B;IQDRD_oZCj/U8.:R5-,KO4+c72?GD,.Lc=mdif/V?R?q8$0'S#..eZ/1cX=RIoU%7N]n\`]qM'ChAM1cF3:i[sme%dk#]]\KcL?b?:@s%c(FpYd`DM)&D=&@(?BC[Ec.fabs7/k!I63+WZ;Ir)8FeZ-IACC/$Lggeeg*WB89D*0O/\B=XeS3Q`7p4!1IS%E,2rk9V#A4E!K<6X?f:m*FFa&hqICZm1-hc?6kiUf/>Yc>,"M[@(2oF$Q4*d)+YT[bc0D.4]f%2DmpOFB)R%fSP_W*DRJ:1k/Xn6%J_c>2TGHn\G'm)B]sc[(i\E,)f^5nD$^5qL]niffc'n%fDf<&8+D8%t7P"#Bd@S7-9rj#rc:U)6#dr(*=t:M#[5e]uYVA7Q["D+U%e`NJj)B8hj[F$$oSW8WTBLgbadtjOAc<?e@Ej<(,=g=5mBkXmV(=<q'>O=tJa_6I]<]_GX'Ymr?bj%J_Sho-SJ:g/Eg2([mXP*#M%:8ha4BqM`d3<P"gSDDK-VCFCYDC9p"1M(320qU?qX+oHu3'gr]bKkJDO0dRKhCda1p;/^[%aF^!meo+!gC"R+Op#C/K*5euLXg"K%N5QgOg$ZL-J_?XLr"F"W,7@g0%Vq/iJ[0KV2qqh#_1R4&Sq=AqbDL&@*<IL?3"!lQ[^\UKhO3c0&nGaf1YW"f1YW#!RdC)O1tPbi%P9A>M<Z5\[1KdV.YL[HL[J`_[X`d`G)LI<s[G!'fO?;gQG!P\CNS83H"KT[#[+h"QB<o\7m4kg-aFZBh!-*1/!3<@>eWf!u[FpQH%=:<3<m?fr8!M%igK&VT<5H2!B>,&_hgB.e^c$!^"eR>#UdX&MLZ?rS\^U.u]'q4M@UWdI15Lsafr^gt8#7tOV#;Br%a*NG`m*0^:%5J8o1ChHpY7)ZNG4"Cg*Q`Y+F(rGJ[j3;bgF/EFCB@&Z3/-EMT'sLeE@(.r);jtL>B5.jYP,dnm&+OhTLXgQ03!3@@HFk31Rkti3%mEDH3hC,ed6'(Z_f60594:7dpiBD:Lm-fus];n%JdLY"V509p<A%=Ic.*&;Ggqhp3Ut03rK*leTX9rmUPG:WJiXPV^iXB$%X3G"3%PiU[fV>qcDnockE-.On6m7^:1R(sp?bO]m=42t7t>l>A:8W1(a7`lCH?4=T8gI+h%.o\PccJp8>+MmV2bhDG(.4m;n[hJAclbV?C%S5g8ihJhZ%e"d6[VL<hD-(_\r,LOehHtX>hKn\cCpeWX/%<INLfMF5J?5H(@XULu1j`OW$f!XkT@Ron*7s\<hLeH<i\Vkt=NE^<6%UV)cDT`q.&c</*tK.6.=X*0g;o_M5Yl9MNgJPs[uO^8RgTjA7N0hg*=AP$'IJpaZO_s1>W+>N^1f<JYb/r>iC1tITE]eZdT/t`ud%R;<oL;;>:BO/_8o=>.*amu2?a6)E*nJa,/<V7hC/M"TckMLo?k=>(e5MroW)*o`s.*p1>Q,7#"u![5ORr\3L]8oQd.W]lr>.,f"E%OO:J&Lh15K!5+X(`EK!rjN^D_i/5Z6&,\ZY)pKnr]U+HQT?ApLMG9q8%T%M/:buiD1Zp&V2#LI#0+i)B[4s5u,mkd&QcOeo0+g6r%ZEp\)&gcgn.RGd#qe`*(Pk,OXZ3=S5=eiSGr[Jg+8Y?nS9+p\Q_T#I9G?uIoi\=T[H\l\E)G@6H6o_)4F!@`Ya@!V<."F=mOL@<U%\j=nGKLWJqG'7U-(<>1`]Ve;Yj6B=:7'#Yu)p9@:`!5_n`5#Bk$Z.*m#i&@4p/?1<+s9L?VfCoM_ToD<P]IS5CbjQ)NHH!+k2`7/%6W_Y@6G*)$;l>k*?P/&eCk@93'`jV"H01YdR#6ieH>aBBbj-&HG7g-@(.mZE70tX>8-;?nHc%Z:f"6i:QWR:^;i-jjBKAiPn%!"k%`I!M^A?9ikhBH9oT`Joo/K.o8X/S9D_B`][=6)YRXIu&*)-*OQ"q44o3JBZLRWch=?cgUNRf<CY%r]fa.>9+_\C=hAi\h48+_$7Z%$af532aKqk]_A<q=\uQ,`;=3K;"khE/imULr/@4j5jVbkd'_6LJM:sS2%0@E@O[qS@;*098mA;t_eT1`X"`\cehA,D.U*ILD2tf0%<gr<8B^%GlQR<\4;),&aXoP1JbgWZ`:hC@r+L=muK?[uj,aUTkh9$D3m'':tLEp&%VFhK4[g!Di80#h[OV)+1KF!a49H9kP*I:hL%>/rZn\e7)46+Yn9GcZsK:lhaX6'%F_^^c`=:4'?U3H^0Xn0.G6-n/+)JqBpW.[;pbekD=VCNg)E)j;PSif/XCC@rtN?63gn6a)>3%;&hBK?uF]06'RDk/pRjN;;'^/SAEB@\^DB(=^@,ClU:$j.rT/&F\i'(]#*(Ag:=LaO]Cj#X0:_<n4t@]I?<3aHVp].Pam$3XuGsF%]TH9jn5<!soKgYY7KW`L\H3&Z.S3>EK]^q"XU_'$Jf;BUji7%K9Jnsr63CZ?1:K.d)`scW2gqs-C3R+8OOoJ,hb&7cOGB)j?!Foa%/64\3p0@(M`i%9b+gSZD[O6c;/=98%]hOVf!$5^*f=FhlPXQoi\^V6]p7;edMQG,7"$q'>9jq`N9Qj"GP#5PJW@FuBL.9M=h:aPS%(gPD;3honK:IaAj-"BHWg9I2M$.fi'.Y:@rL%0c#7hZUUdk@g;7WJJRl0Lfj$?5in$Z?<T#VaNHO>d9<_q5gkX,8CTi%B?ZTU&31%7l*mRoua/qdSnd0-bh.S6F]D#1.WPY!2*X>CKX[IK0GE]3<ubsNPkB_FuCYL_N+nWo`ZYL$Na=YU-C),-b*//AcB@8ddcAuajW9h%C+J1F*5a3G*ZZhN4_0sc`=aC>4%QE0XdHmm;+>PXM)d*iecl`UB@H/OQOkecEgXWl&p2oQOM%k.\cNF\?:%(cBa__LCsb6D#TZ]?%m*u$R0sdjm=5/g9!?$nL[B'd^:9b%;.A(0(m\*>/[M[jU;3I.5VB:+`[;m8'DI.]"%k\Sp^Mf7:-23L'F/0:,G.1aZLX)KJqHR.X%HPjVAO0fBlFn./Hd=aiNd';&mqEZ"Tg#ZmM)J)V[qW>bRs6A3rR07)D7Pfe"<(gg6*Q05sjqLi/,rt9?*!fE+KU587&3(t7Bis.A%$ir2:0FPI*W'#)(AZ1cH3e/b.VR+7?;&8Ea!HILCFWarb"U,X2-O"CT6G'Rt1bQ8&,]&bq0;0R,`ZT/*5cm#55-C;DH@Lcp@(c:Y%ee3Y'A-?H^_ppib2-/)M4TlN%]6#!=J^Q/3^h[u\.&_U`lc:]jT)+/+F/VY`WOfV0C/F\^>WZqG,'ln&!33ENJ-2L6KiJTdUI0j4%,R=G/(5n@D2tVEp9&3^;FAc&RTg@cn)h;$P(@WUX8sE0T'u4]qIfW^B+^4AT<d220lBFB[d)2i<aeF?<>NNq$Zt_(0T*_M=+l6*2%b:j?-3^CY"DEKGsC.mEq./Rk.qoS)s)2t\8b&N%m6m7aDd"VP'9+NEk)V#t*!W[l">DXqc*`^o($\iO%c5IA<=b;hcVo(ojfSMRM%\rF>03!dZ,;CgDt;l)D-F9D>Z(&p/8N"*/LPX#BVIAuL'H[oI*!)%1dBf?U,"]#g33GbGT12]k>AQh1g[-]<LO3&^>3B5gFH4)ZH%S=qdi+G29KfG4$r_"Ur-`o8@VWGCgBoG"(V("kdQ7MDfll-(L+G_f_1K<aJCQ4-54=e]K2$fU9a9QB</<U-Pk$]X7*XM`#Y%:h&/%TefhjRPdKP5VI%tONLmjX"6ng+j,\1/VYdp;VhGm9-N9?0WAC;=J[pjgr.>e*Pel%K/-tq&D>]t!&J8G'RV@[EkRW"C"*qQZB&il%=;6r.%\\#A/M]`&'(dIagF#"F12B]/*)Jnu3S7UkA++tM=N11W<2)*FQ,#$W\UsGsC_c"9Ru)Y*</%6+.1)Z`bMKiR;b&og):CSg%:fpWKlbVCU\CHk\^R/j^Eo+3cl.7/H&Y(UD<NFoRJf2#YjDcM)!T-2i[3=/)m2f<?*>s72.&/g?X]d_;e9FAMICT?)(#U>T*C[_X%R+'85KO@;[Sl--5#%2;)2BDM;5ij;_C<7H5iJCR!<AkYU[JOut8Ah)LM4/eP+p2$eB<R47/))HS0;Y*D>bD&J;3\"jRm1lA2rK.g%_[oir!5n]"Jj#ib@`isqg85oNC]+d2^K(HCZSi@P0cE#=C*\*P?k6_!oiT"\/SYZbaDGr'O<![1K=b(/.Z3;LgV#/GJt4L3JK7:W%b:SJu=J"b#>(EPi=X>?Eel3V:<rN.6$9]:_Q-M6&_aqa1)r"-6YZ2Uc&hjf-K;2i[*C_mhn(G,d_,HKQK4fE@-Fa`eQcs,o16B!J%f,RWD[u=9n:Qh\OG5%)#V:IrQ3B$P8H4I09:,FbW#U?%/$CP1m$>3:M6[7jS:qiCV[<P.B5fIjD>!<0&cds2=(3UZ'2!3km2O/+b%bm^/>W[\R^]Fofg9[+RB<J;uW#sY5EqC.e&8MCY6K.?6df*Z3'AK"7AN7>dhZZ^k,Bc^<5BK)"ddIlZ(&Zmj0!kOtDI2&g$EWXt2%]ms^DM=D]*E=B."$&pP<BNl-@kX',_0;,_r5SXQ<&+Q]C0INMR&4EZ7d.eNs5(SC,SC4nS,daVBF;!:JV3fPND4racn.b^$B>t<n%VCN@HLocil]TAr[@[_<2'W>6ZBb(O$k@%ChF!O[q?<$NC9M0?BRZg($NK_q`31A(d;e_e-94B-K6gTYm3q2'9i"p*]qq>.)@VQt4%L>g#&N%HU>YgIig-7heg[Im/I>IM`Ire+FXBQF91)T)Ea]K:Z^qd$F60(.OJ(dr2.[:$76n^;lcb2aFK@ojJt3$LblNA$Zf:QI'>%_`W(O6!<Z9]03Q^"+cduJ7sg'Wu_+*2Y3"Ap*%A17KIM3iEU$rkQ"(LUnrDB,m=WIj$[gSd*%_O$DLPfKHU_a(GGBk<n;F;c&CNE%gm3OYCfWIEbKrHfOTuR/VRc"2^]cR$*:9mAVmg.p(_(\*Ju*XeBBep+^p=-$QKX8I8Djj!SKcN$2qq7>)d-1L:/Q!cZIN>-f]fZ-%[u$o7RY2r<_Z8g69<m>N%GV&dhu27`*j]!aW-<ap%sjK4"-172SNel5E+slX#0A4UnibJ4lkIBGEJD0db&u5cXbbO9=NWB5jLhUI%RSka*[3\eN-Eq/-/#lEc@*nt4gAOr>HWZEn7G:WmM'+Bqf<P%ON[n=`!LCb6!MHlrPr`%h]O;k510H3`n/tr(TECIZr+S%t5*t>2%IZub\h<;i(,RlZF7gD[aVjnso(?\[\]bSirO6!aDSqYQ_bY"7gA!H17>;aei6E,:rjc>[$hMMs'S=CUrBJ6BCN[-Z.Z11`eKNT=A%]pRNREPYu:E6Ua'7OiAO=0^*[#8^nlBjtEPkBR)MajOEU*4(j<,r:i3!"U%inck<1!I/_k&d,(9Q!-=K#aYS>Pr;2l`ap3Vm\hK(%C86qiFUR'9kTQeV1q#5p0W6G54;]<>J[5AaduFfBhnbO6V4cCsE6JopLMFL/-cfL("7:tOg8G(_Vf6,eqhh%SJbM^oG!'o<J6hHf%Vhk3t[P`s!'plfoRhCYPD?kAr]MDVXYhK9ucmis8bo07VN?ljp!?99AGr_Y:"W/:6LdT*&8Xa1\ROsJ?E+D"2Ksm$GJA#&8g)-84%:'Uk.qXl1VV"jJ+>eIuoXl(+u"C^Ocih^-U8]=?hPWH!NLdG4^!k'LG+rFNCedS-OLEX67"#T2P-rk6=B2WRrMY[?3K?rmi7qbe.%C^+1@DNh*)S\'/59LaegG(cptTIQ8q*R"\kgtk#D)u#LdSJh-9X1EHojnO.Q-1^^Y>]YHP@ZU^#X(&+jo4eSJU#nA&`8CRP?n'g(%;GMNT4GToMq>[pH/utEdaUruRo+&0BQk>:ubd_3G;M#Jd%[%S?R[n,,MO'oN7W^R%H@+adjrP,tZE!d"jI^p.io4inDQ^haRP(4Y%V9cT[j"^V/(R&9YHpo9Em*4WEGA<\,-+^nBW;BAKWH]eIg#]0g\rdWu5pmC2BsG\%l*libqV/`FDcu_Yi\gNcPO\cdE,6tG&&/rK%*],ukd(P;Dlak8ZmE2LP"tZP6D"D]^i)5/4H+I2doBrE1q,#u)I@\22Dj<0.SA:oN@2sA10(IRodoK^0U9q`KI8]$kS'WC1?`Lj'%kr&Qg0hp10_f@_YjD/2!`mN#A@C\_`r&d\s]sE"9WEM&^^!h*(0\>NKbp7J'a(8X^5RD@gbQ5:f\J0Gi\2oS#YVF&t(\mF8SM!Dc%V%S-,mb;;.Wd516\Ws(>$@*I:m`2$*!.BlZ/KWk[.=Ort?P_Cp^UU%VA$`Z[L9"lV;*A1j\fL%'-;H.V2N^';/ujPrh;fVDfTNg!%T(m:6_<C!Gi8._#A3b@JZg,NS<G`Ed9+P`#ZPjkLVkk?GqYKa(^=W(nh1CDPU"P(6IoO)5%u69gFOM]q>)!T"Lq[)KattoJNP&J<%Eo4(1.rVr)ICP;S$)!sn5"jTmN^-'BF8ADO&*\*WBV"%g@NO<(9BP3fMZJ=bTd_BmjCkA2QFS:P)lckPG-\$o(h9IKmKG8WJR`b8%Mu-C#PJne+3sf%(<>jt)V/c>$Aj/TQl:OR-A(]0D0CU'n%$9na>OcL^:#NNJj@.nP;;bOIYZdnO0eEJo>>-a/9qC7HQXKg=CnXu8%X0S\<Ss]Qgb3bVQ^.lT@I?/4/(A0dD/]GTKER-Gn=f9\Uk+s=Dk:s%ni:FEHMT'XP%Ve`lTKG49G^`pTA[++r4Z5ae%4nt*q=GXh%K<=ot(shn!<tmNr&`1B;FO$X!1/SJU.\!2(2Emj+0#a)?J0oSRH\1Yo)>A[EVS#ScIoI/9BWsh8\NN&h7_Vf]@;r95gM?OCB[9*4%A[%G$iR76ZC-%O_HTTN8gPWu88MjUZ9D`tWDh/?4TMU&I;"K#PfWS`P.;^PIl_>c@o^hsdb[j4S($/QCT,,"5iEEq/:rnG'oSM\N%#a<9;9L>1C;,mhhmCDc<bV;BrQAXBSSApJHq9[I/$'U7sZi7=n#eR*N2Ym17Mcf]!]1^<f&32Uj8@g$R^mo0p\A,c573il*H0ii9%cu=T](R:V.,]!&V2f]h_$+aeK;n2Q;FoG==g9=!2Ep<S>US1b,o<"+<V'+@rBl`\Z=111.-C3&#L%K&o2nX_FS=cY-HP)dF7>2N'%4]!_"fLM-6ei>e$=n<UF;OUulLC@0!-3/=DH<NsPHu<h>Vf0X3LX#_DYpc!ENR;Bm;L<FVc?,XS!>/^WYp!;eq$:OV1i8i#;59H(%Jt!*^kUBBB'<CR-3@*1:nJQe]8rM.",^omq,i1\4euE66"'-_U1P_f![V-t__PjTUCA]Vp+SJ^:+ZP&]Qj0IY40NWF;]RFL2QBT&%DoP<b_o:&K/>HaF-jsdp)JEPkP[4C9$8%trb+cjY<LsZ\9;Ak(M[8e)`i)!7[Gfcn65nI%\(Jm/Rjel%9"m0c-THFm(WEXkb@7AC%"(1?]\2fVD)"[8;0hAT8Du//ME9hkoI#9n#4UEQmMECK6q7c$u2B:7u4&'fb,<qHAacG-:VsM.dlh8q06]L%?\_s2<AKM-%"'sp5%H&PbPon'`TTM>uG=&EX[ri0<!]:X!]JZ_i>[<N'4D@f7u<(I1uc_"H\1Ck-(![:sol7n)US!LO"CWl<uVJ[oXI`9WH:89.C*C>R#%eTT!h^9iK<&j_I:&'Y5=2."s:_j,o!BgNp2MI\B)&:jsgKJ\p'UDkit':5ZGq8#K6$8=_&b8$<=GQag8dU5@;?,A^9GHj2`(6Z,o%YS(g:XZh'#'Gl'B)orXKl.\?(R;#oA\Pn<5QbXNbb7tpRnp-*$MALJp\a_\&.WOf5[;lSu6)]Pu-.+>nq7N'SMQaNQMVE+8'Hej$%7<XAk"An3KX!ZlLJFZ;gVcghE`*t#DjlirDcs['Dbee$RT?@eK<mV)jWe>GfYu+M/ndNA&;6*N`Fs"u?T*IY%(VI;BZda9NdHZ#V%Vaac,9`,DI?oPbC>>l",WfQ`=*&kX6T&]UUfC&0N6mR/6.d]D*IT-pu@;&)]G;bg#,K+.5KDW>Rh]hW!7/^lmrO9CZflrB">W$1u%5ju1nM8X;%T;00)-l]U:bPWl/W^%FG^hJI!NFT<:!(i$Mc@GEB*:)j[6GqXGQti<FRgJ35EGe\OnF\!IW7EJpS'fu8c7&pMEYq^%%YG`NoR<QJP\%@CD2W8a;l-Cs?ULB"q8'VH:FZDgVN#u&T':7W\Z$I5$h88Spp<?XK\R3U:rH;)!4O0W\gfBc94!,mYSs,sLl+.0I%NZlu4<3+cj&`&l"bE?NXc,Agd0c3[p2J7!WcpECp>&&;r_N#pejGl]7M+1u0%-V]l-F2.M5gS,Y\IE=V4\Y%=m-ABTVAeh+o9d]R%SlXsj>T;Qt8XcEQI;\R,&W%Y4I0:6H%3L:ufi3jVhX_;3(/*2_"n2e)fm>1p6=AP<Pf%5s0c8Th/=.pnPlem?;t0d_.K6%&#Yd-Z%n^7a,BQp:RR\]>PmI(=33nE&':U3J3rcuHDZCC.eqb<"2ogQ!fYBr!//m+12:F8!dgIn/,3,/htI"$nhK!rUoUh$kWDfh:@q(5S*%S2-HhS+i-O^'&q_hTIXuS)HJ&[g_U!9;ciZj(`a;O3c"och!1F6:oH?+PW`jE`n"+]>kGaE&LAD,'])PSXuuoZlOJ?I/NG>dCUAT%--*W4U9)Z3?)k\Q<MR=eD4G3'Oo9:qI'lcg22oRfg;`Q,*,=<JFHsjt^dpC7f[YOIppU_%WA\JSN'dr]gU%/i`T490GV,_!JrNq]%Z&Y53A,u`e83e0j\K5'IbYOCuRpE*o:r'3IccUi\4-$k)A+1K_4J!bO()Oa?O3'AA]2AE7L3f"XAcX!oE'?%$$6XO#&T5q/+ogkm%:6"lJ=SI'ZRc-M^0TQq=m*"S0LnqGMD2LaSWsEfF&,sLH/dJEoeGa<0(Nje%+FCn<Ys/#_iPO!.Oo32$/ll^.q>:7/&iYj);B!cV%gW3[G@kQ4;e5_Yt8Q:PZ!$1O?($B9>eSJ.G6lI7c'"",BpB'>:f?(YW'i9>rXFni"DA/.IEu0r,)Nh$RTbq[Ri]6\_7?@.fe00$f%B1?*D]cd"BI_OZ*re-cQh#0h#VjL98/O"7`Fk>h'[Kr/L@V9m+,N=[-+b;(#6q)"J+MCb0?ht/81`q0P!Z.k6M%@)jDB="ERON#g%$b/MTlA0:=Mq#(qNS##?#ukH%i"jG8r@B2'F^asj7W^^$,J5%o&`;#j##X-6D\5ho(gl9,OS[].N,R[TK.`/9ofTqE/Ffj<P59LK%mCk"o^:b^`^;RJnDqOb$hl?=JZl.b!e(.W7B7*?t5Ohd/\#RN!DIpbq=*(m]`4&^TZI4g/QKhM>:QO0$(8[h1nZAg(me)t'Hf9d!%;7*EbOu'hK+ZL9#i`dfRgNCa@(EA:ea:dE/"*i^?%<+&Lp3-YLpYeT2,J^-m%^G"+i82(mm#;"3.qY=niN&1Pc>/DYOZ'_Qjd>?h%4`H(aWqUPXRj"pKA+)<C>a;*JYAhFi[*>I4a:dR6U_m$"\bqVfE(7D%KXL2PUKl<f+:!rUpYGsdas_HNAs>AN)<H`hF-IR(?D0V>%U>/DnH-J$%Falme9;ZMU`u=*'Kj+Ucab07IK3[Kip,=]Y8l0r.+YJHlW]\T=Qgtc(G*a%IEb)l.(me]oI^U-S9).aUc^#^J<#*n;%KA7^[N[T*+A=,GP\J(t2'2a(q\bu*6^Bo!X3B1j[\n=Q7N^+D?1pfc>5W:(a''Q=urTH&aAU(/3?j=2W-1rV19r6SVk9B7?ahE^T%LLJ-3_if$-/Ipc(j'7>4.O[fS/"m3uEbG!/P$MH>KU&(JEN`e'AUcd?233<bTEJhZ\[4]VeZL%3>_n9;_9+_R/u)r'1=2SH&a<%h%KXr?m8rtc:?'e3I&08UThBV&<U0Uc#mn:/`D'mqi-/<)+T].*3>m.[_XcIF&q[H7gB=uE+X5d^p][HLOJ'*RlVdY7ke!'rsbCrt]%JmL;DYLa]cp?&*j%!u^QI&h'?_VY#knHaJ_gb3Y#@UJ:^_d7N*]8W[)+q##<9@O>$V1rK.8%GAj2NF_[(e3"://e,PWoi_*lBV"7%=AC+-4XE=tc`ic(^Ls$5md;-AD%1jV6W`O;RE(tgc@.mmhQ+RHc*19k#L^d-p0OK\Zl/QI_[LmI.DfE"j7BorfSc]RD?(it?3uZ2%S8m2.'k>E3lt&%d%9UL(pFf6)-d@daZ6ep%V7kPoi,r(!ZprhDc/N/51?2]J4@-)=goJ<dX3\;"(hT!l9GpBmnWP3GF<0;/BTrSX%Lh[s8EkU59`3aec9AE0#rH1huUiH5Dp*(mdOKeWoU-o'+o3u)W6Q-r23t1_HL++?Sc9`JG&c+8e]$j@kqU,Z_agV\,\_9rI(\$i=%^%7U7KAd!X1u^46XJ,Kk+><GVBk.ijpMj/Q1Qb:_Cap?"-54q(UY=0h$5s(>L^@WRO[]au<\o7oV:tJ!#VqOA0(R?.0fT?MN/Za^%ZCe(AVA,jBN7LKG'bM,qTfTN;__BPs__gsu#M?mj5I&GFiikgWOaB(VO]LP<RZYn.,3mtCO(;^^`uo+`jpfjrL06N8MtFcG^udT\%r#L#*PDd'S`LJ`raBMQK]hC*M-81I8bV)`/82(P&bV4J_3=@o'PsQjg&otqlVFZo8eMP)VLgZ4uH%IJ[m^sPB97]NW02N!L9/f*W%:l6*sA?*X(,q1nVV@7&0$)S\7K'`Y5;>4p==9;/6L5Dd$;nsiP"D8t,PX>`$]mqQs0b6c$^_E`\;Vi@&)"oOsq(g5A1-P6ki\j\>%RTPI%/GF5%;C"T0>[1Yc;QaTq%P21?*a$QA%H%A8ZM_%)9SoU%_H`lgAB-t=fqR'gM5A!r25qh)'N&J)\4E-Cq\E[T@OYu\DKN[b%a#('H'2!7snBr(#767-?9dZP`1;EPaV+?nP</q!UHl/f7-qEM@m&CAgk^9nE'2'3`WJRHZW"^@#QK#(?oieR6mR80p@O\lmW)a4h%8C2hOmE6t$$Z0Lm/#!6+1(dn$_eGmZq?0`A)sY8)?j\h].Q"Ao&,5ioAe@I+,c9bM0MKYJTK;nLIVOc:W)n&(Oo>Ii\KhTsRlqm>%AGsSX%Y*e9q6;W^M'NG0LJml6&'s*5n$B2r#!0_G/DGpsQ.96AU2#kCoV;h[4^As`n+9`75gM]'i5];'g(Qhhai]hsQdo0,W6S#!%c@\1V)Zq&+Z5.M$GhVi!#5mFtZhfhD1;Q3L1g'<n6YKsN;j>i\8D!,sgfXNL6_TDSTN4pin3qMa<kE^FF/3"&Bpd(1Rc^@E@8JM5%^A@.8i]^U46JiU.+?1O8=^cZ*Ar88@r:+#AKLt2Z+Od]V^-(-tVWC"uT50RuJs'KuGXS9pSOJ*I<LS2G`FD-C?$D&i5jiW=baXrC%[*r_t4MIP#=Af&q8Qm")S.NKH<+,4mgb7Y$"44$Y#T[?\4`O]r[=n85(,[D9coQtsf!.0X#e<h6@N+16'alqG@l=SJCq%J+TiUH-%TYNt4*KOFZ;,]l_>[$EE&oMHb*/8('o]s[W7H+'9-K\%E#tZY*+\EVU/Z*JkoMgAY34i/*n.M3Q1K=Jj.B2)@ceVdQdrZMrH!O+Q%@ri%f@;T%:V0SaC2LA^qI$M3Q<PYn3I?E"kY!P1\'#`kJdpTb[k`Fhl/M<b<G+jd+W`lSpZ+!!!W97t+^;oAb,jG="'\!9r\SFi'%hiWSl[n"`E9V#LTH+eurhIjY4=0Gr%YBoWEct`=Hh5SFaDRbM6E2isn=%uOh.4q&?X%)EDfn$X^J4%c[h85,ioW:8U(hoqcm@n\n%q&"eI6:Ff\U$?&oUNG+>@4KY`icQt!&Hcnp_Jf0F4Got6NL"Au\k>a4BcSPb`Nd3<P&S.p/KN)9IQ>rnI[p@8+#Cr8XH27-/oB>i%3fee@L4NG$h8;q(J3:E5*rc4#IK2'PPM4c=mGNi!+J:Q559l4(Rh3dKdY&Hf(`CF]dj2L^(J77=N?@'BG`uGJl[ilm.9AT`QJ?16%S-F%r[8r5r@*k'ra7ln&XNF9=N2lFAe14TZE[_PS*u=Wah3ZHtp\jK$NT^+t0TU&I1JGhQnU6kgX!ps(if1Z,q.6A->Ak"[&m?f9%A0@X;jouF^j^BM8A4=\:Pr^$81ag8O)[iN(#FDkOWape[Yo^5U+,0fO#?Hqc2uVKbo$<ZfBbl;86cDN(.oH)8/51L>qUj"*:WmGa%/tHI<a"PJ4^JZrRRe7:.+"GB/`Pot-9cjZ69JpUX:(]Ei:Xa]>%!s]aY6=.=U$d\S,'-gJ[LsWb]U'h5E&2hAc\j<kP\!$G9/B<<%VLSU?o#E$"A*Fpt>kNM"SZ^;XTFD-MLq4P.iE<3L+Agl\>UO=L*oM;S7Aq!iNDrI=Z-pDi\Qld/NZm.XN+<5t6)bUC!Isuc`B^2p%bd6hYEOu]pE+G3JCf5/qcUS$\_aLMght'DL`@^AEWSc)7Bbgu_r2IjTMYZ[FXW0O5Aj(Ar")@Y"B5e]m*CiZ'?#c80?Con;.2ENG%(@n]pT$nBP.B:RhY:<pO\u+GHg78cCm%"D&FHoRu8uuE6$C4XKC_!$L/O1=R%?Mr@:ao=OrD0pg)PNW-nr*`CHV[3#^^F!/1DH(o%co.;3OEa%l\>@noiWW5;ADKno!52.XZR'!5$kk=^V>q$H(,8bi0dm[;4j!gDTJ!cPS.Uh`QRd[BfR`LiLKo":Q'V*"),s4`F7L!-%<bd66(7CNj%pUtsM&Ge\Uh1:-_>HEIK4u5(!FgonCd'R"Aq68CrtCcNPSE@%3&(M,.C*/)Aq6&="Pq*n`f3?"R[=+BMU27Pjd>IE%S"P<H9I4C85Qg9%<gs41'U:=c75/CO[ij`Abi$Bh*K(TU2i5R%B#*Y7Yb(tQOQhV3#%iBoWrk*7Ou0Qn@_d\9ElJ/8d(Ke[#rmI?%/SWRg(eB(<4Mj3mo@QgZJ1'4VZjOm)[j1:cKFFZ28a8#aK+I_O(,J4rd<'mN"&@<Ib:>\UeAa[.N>V0&\TlE;3.nPGRK;;*gF&j9%"+E5]>aR"fr`qo2\t3WScgVq-TBkW7&$Iaf_`-"9#eEuCc/%G)n\?Wi[hO4Z2tpt[i,VKVS&>U.$_#Yih6/!@MPd7ug+YWr;QA15%?5uml@5q[>Qf@_3`A.+?R[nXJj2BB0<J@??lV58fR1E4*q<uID8koST:AgI'XfX']P&_Su^hJ+gK]r4_8nY8t[2AO<&//iW^N3QX%ZrY@r@$##WJPZf.HI:(>l1,b=MRD8,i7)D?ZD6<SM<uQpC;$]o"7OMmJsF>GpM$R<@r9C8=@j7qK[>@=*VQ'tG:QcO'HZaD&tW)s%2ce<EA>ru[]dQ]jRcrbAF5kZR#Us6D]ISdI$R>9f,>!h;($^lFQ)8Jp#4rdm1suCV?oV8=1(:gl.P[]DaCRC['+0]!+q+:,;0D%7%)H!1h5Z>MpeM_A9HdqC#osc*8NU=#p'#-dYX!YE8[_,ZPOPAkT8kCc,0)8Ch8/EdpbsllgP1/$`22J4?#HN`CF,MpZS!m3N5'-8I%K*p%>*e8ahI0,Ii0&IGl,*tSNeOX#RgJJZ+;$'\O%a*_Y&E,+r8Q/QF]o!b/%GRW`bHoeEc/e%pmNqFamBFATF&R".!*g%tI!TcA%QuXOF^Zl_nW@HW(`W]J'00R<)b/DM]o'iIl`UZ\V=WsA-F87`mMg)2,N`_fsbOeg`Jjm>^SB]Ol`[22*hD0Btb?Ui/d&e0<-'*@A%Q\i;o<)3VDgZ?hIQ551!r/T:8%l7U.p1u#>EfFu`B+HU[4jgE3BQK#Y`_-^BA+q4FdYh->^cWqk%,#Cn"X]MAXGQkG(Loob%n$i)%H`_9Y1MlVjI@o7rV,\[VpTfJ^e(h.ph$_,5VR_Do5F8g_1bN!7R[3n%ch<30ftuU<CY?Rdlf:&P'_hR&;4?Da%MkX^PtB5Ad-&7,%C7BiFW'XeSKP*^??#Gq^MDg@KTh2!V[jgZ+/J1>D>25=Mh;/[kn9bPd9O19](eTB;Jr94Z)WDThZ,CNcT*E`Z7)EAr:Q)pt3_d,"%Vd,WH[$7JUVDI!/!>okF@t!*LZNKC6Dc@Hp3K9*K"Op5tbV"+`bV3q_5eq'WTgo91"4F431A02%$u9soXLIjalB-BRPtDqJ9<ins%Y#[DaC'k789n$IgY%2>WPB+P]n*IDFKOTYlog@$*,P8*pe"d*3lj4/<gY1SJC?+Fl,u^*6T&!gHcZ'B_BJE>Ve6euq:J_RUhXI?l%I_2$edbn&\7<hp`\Ub.FFu57a.L)DFA`+hZX#-dn!90]h+@!DU7YJqaG/"EE)9*lBid+rdY4Oh\aN69Ej<\&@Xk\Hci$`XQk?[M_%fp]s'Ws5f*_^XYTPlM*$d6o<J]5:GC,mHTlNQ)M'1uLL.H-J0ODYC,<K"I5Wp+[D(6FP-[Kt]+a_Z,uK[_Y[Q-`o+gRilE6'j$AR%fA5!l&gh\)mEsBT?5\HT#f`>+/>^PQ4)1DC^!9]1f8kt?eE/Xn3";QG_jAeNXdGoNHV%ck]Uq>JW6lC%:q*T&9gu7qCT4+S.9$46%'2WQ,c4i%`J3@2C'?;(^+JFL'=_H6bZ*7EO+#1O)AWo\\<UG@@@)QcZ]NZ38dbit;C<nr#*.=G+OJ;'fP)1LjUlNbpA$Kna%c6'2%DMqKP;EJi6,t,`*$0cE5R$KDVi-9]_RMR]mpsB5ObhQQ"Tg7.]gh^Ga#%@<!K4,.,e#9-=m6Z]u]`9V?p'Xaj`OBa7Ycs=hiV?7)%XX,rffjb[*D7(]YZb+)oq#X5VYDU5/h54m2G/IE?Mh(lAeZX93HI0]H3;QWf\XgmK?]S[djmmXG.etX0feV3[g*L%Bc/9A&4\9=C%B;!D"#p2$A6cZ_WF1<CJ&Q)M;(lA<8]9;<W8&8Io6J3XIW.TiHdsXFhQP"OeVu7uFf$]TiYcKu_TgVKc/8K?SK>'7[Z:;HZF-\8_%:3H.c\M^LQ1>:>8V5DP&F`M8$$WYQlar6'>H)?F`20*^66EY#JnC12[Yd.])=P5NBTZ1-10X7HL`"mh?=;b1M&)12(Qg6djE3L\*%Z#.a![2tS?o9e;/Z&+`/EQiLB[alqu]]J9'<n>d!ToE6Pq0?@ZdklT[7P_,`T:-BCCX`>4K,7Wm',.+D[7Un)Xke%s=BSST<@89R%)](V"Yd2i4Ps(2-c>b13`e[I3UPY9+[+$rsZ*HiO'YtlBQ!q2PfPH(L*sQP5AZ^[T5JaYVUPa;JAMUZ?(+Zd6r^Xh:>c<>&-="R8%-mVTu9XhY.JV5bh`C6>2=d/!t_SOW@ATT;'`j;jG)\Ha$mmlBWM3`-[b4_Zbb.E"J$^PoAr;/6+fk@M8UX#Z=jK"J0[(E0aD'oiH%(EgShY:go?iA)maHCI)2f"kGPP/"6T7DKD()Ts0J6p?>R8e9*=P^\9ZA8@#gocmWi$&=YG7'WMJ:Sc0,"#JLmPa32\o].uZ@`nWJ%C:[X`c!BP@.^)d!>KSb^0UBtm<D8BQOW/F847:6L2oRCQA_Djtq9jFjib'6pd=D#5?maVgIQAsR\o\B6\`l^S@rU85'E.NDo`Ol2%A=>I65^V#pq4e7WOS?>T0$?jG$LF7[J]b-a,k9-idOP3Sc4MpM%Q,0'nSsTDCoAa[pFm[X;fS$abWI3i?^npIG"6Bg6$F'LKLlb\%nk#<s,@*XGm2up,EsokJ95.StRr5S,I=,X1*$=HFmc/@e<&VGTo^XZ'8(uqik\h\2(13D;(:b_&oMd0dDKfl(*m%,AQMIgPF/3C:%2Wmq)a5@H,)9jC_*P3#h<"5_BAb+&I(L2'NHbm@-<YJa3/L9*#Z2X7thldH0iTS=!s*_`tdkkX3fL"4F5;Nanikr</S;2+3PtKMQ%k2U9MQkg:.pZDm.inp@#Du9+'5JQhD^\dtr5Q1HeF;FEb:E4A"Vu/_pIlOWJ,4bU$]79\UQbRfpl8Hko*^>UUI,Xbe?[hd^Ir,/T%a1qQJouI+0p<+QWnFFI-s752Ghu<;8+91ZiDnis_o]qS<oBj_^J,.8pJ,AcFDu]e6ji^H7I/ETG^]*fkbHLsAfDih\HmK='iJ0Ys%o09nc5IX<Yrr~>%AI9_PrivateDataEnd